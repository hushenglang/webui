var a='ClNUWENoYXJ0LnByb3RvdHlwZS5wbHVnaW5zID0ge307ClNUWC5pc1N1cmZhY2UgJiYgKFNUWC5nZXN0dXJlID0gbmV3IE1TR2VzdHVyZSwgU1RYLmdlc3R1cmUudGFyZ2V0ID0gZG9jdW1lbnQuYm9keSwgU1RYLmdlc3R1cmVQb2ludGVySWQgPSBudWxsKTsKU1RYQ2hhcnQuaHRtbENvbnRyb2xzID0gewogICAgYW5ub3RhdGlvblNhdmU6ICc8c3BhbiBjbGFzcz0iYnRuIHN0eF9hbm5vdGF0aW9uX3NhdmUiPicraTE4bi5zYXZlKyc8L3NwYW4+JywKICAgIGFubm90YXRpb25DYW5jZWw6ICc8c3BhbiBjbGFzcz0iYnRuIHN0eF9hbm5vdGF0aW9uX2NhbmNlbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjEwcHg7Ij4nK2kxOG4uY2FuY2VsKyc8L3NwYW4+JywKICAgIG1TdGlja3k6ICc8ZGl2IGlkPSJtU3RpY2t5Ij4gPHNwYW4gaWQ9Im1TdGlja3lJbnRlcmlvciI+PC9zcGFuPiA8c3BhbiBpZD0ib3ZlcmxheVRyYXNoQ2FuIiBjbGFzcz0iYnRuIiBzdHlsZT0iZGlzcGxheTpub25lIj48c3BhbiBjbGFzcz0idHJhc2giPiZuYnNwOzwvc3Bhbj48L3NwYW4+IDwvZGl2PicsCiAgICBmbG9hdEhSOiAnPGRpdiBjbGFzcz0idmQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9kaXY+JywKICAgIGNyb3NzWDogJzxkaXYgY2xhc3M9InN0eF9jcm9zc2hhaXIgc3R4X2Nyb3NzaGFpcl94IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjwvZGl2PicsCiAgICBjcm9zc1k6ICc8ZGl2IGNsYXNzPSJzdHhfY3Jvc3NoYWlyIHN0eF9jcm9zc2hhaXJfeSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4nLAogICAgY2hhcnRDb250cm9sczogJzxkaXYgY2xhc3M9InN0eF9jaGFydF9jb250cm9scyIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+PGRpdiBpZD0iY2hhcnRTaXplIj4gPHNwYW4gaWQ9Inpvb21PdXQiIGNsYXNzPSJtaW51cyI+LTwvc3Bhbj4gPHNwYW4gaWQ9Inpvb21JbiIgY2xhc3M9InBsdXMiPi08L3NwYW4+PC9kaXY+PGRpdiBpZD0iaG9tZSIgY2xhc3M9ImhvbWUgYnRuIiBzdHlsZT0iZGlzcGxheTpub25lIj48c3Bhbj48L3NwYW4+PC9kaXY+PC9kaXY+JywKICAgIGZsb2F0RGF0ZTogJzxkaXYgY2xhc3M9ImhkIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjwvZGl2PicsCiAgICBoYW5kbGVUZW1wbGF0ZTogJzxkaXYgY2xhc3M9ImhhbmRsZSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48c3Bhbj48L3NwYW4+PC9kaXY+ICcsCiAgICBpY29uc1RlbXBsYXRlOiAnPGRpdiBjbGFzcz0iaWNvbnMiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PGRpdiBpZD0iaWNvbnNUaXRsZSI+PC9kaXY+PGRpdiBjbGFzcz0iYnRuIGljb24iPjxzcGFuIGNsYXNzPSJ1cCI+Jm5ic3A7PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9ImJ0biBpY29uIj48c3BhbiBjbGFzcz0iZm9jdXMiPiZuYnNwOzwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPSJidG4gaWNvbiI+PHNwYW4gY2xhc3M9ImRvd24iPiZuYnNwOzwvc3Bhbj48L2Rpdj48ZGl2IGNsYXNzPSJidG4gaWNvbiI+PHNwYW4gY2xhc3M9ImNsb3NlIj4mbmJzcDs8L3NwYW4+PC9kaXY+PGRpdiBpZD0ic3R1ZHlMYWJlbCIgY2xhc3M9InN0eC1zdHVkeS1sYWJlbCI+PC9kaXY+PC9kaXY+Jwp9OwpTVFhDaGFydC5wcm90b3R5cGUucmVnaXN0ZXJIVE1MRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYSA9IHRoaXMuY2hhcnQuY29udGFpbmVyLAogICAgICAgIGI7CiAgICBmb3IgKGIgaW4gU1RYQ2hhcnQuaHRtbENvbnRyb2xzKQogICAgICAgIGlmICgidW5kZWZpbmVkIiA9PSB0eXBlb2YgdGhpcy5jaGFydFtiXSkgewogICAgICAgICAgICB2YXIgYyA9ICQkJCgiIyIgKyBiLCBhKTsKICAgICAgICAgICAgaWYgKCFjKSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IFNUWENoYXJ0Lmh0bWxDb250cm9sc1tiXSwKICAgICAgICAgICAgICAgICAgICBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiRElWIik7CiAgICAgICAgICAgICAgICBkLmlubmVySFRNTCA9IGM7CiAgICAgICAgICAgICAgICBjID0gZC5maXJzdENoaWxkOwogICAgICAgICAgICAgICAgYS5hcHBlbmRDaGlsZChjKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2hhcnRbYl0gPSBjOwogICAgICAgICAgICB0aGlzLmNvbnRyb2xzW2JdID0gYwogICAgICAgIH0KICAgIHRoaXMuY29udHJvbHMuY2hhcnRDb250cm9scyAmJiAoYSA9ICQkJCgiI2hvbWUiLCB0aGlzLmNvbnRyb2xzLmNoYXJ0Q29udHJvbHMpLCBiID0gJCQkKCIjem9vbUluIiwgdGhpcy5jb250cm9scy5jaGFydENvbnRyb2xzKSwgYyA9ICQkJCgiI3pvb21PdXQiLCB0aGlzLmNvbnRyb2xzLmNoYXJ0Q29udHJvbHMpLCBiLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLm1vZGFsQmVnaW4oKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKSwKICAgICAgICBiLm9ubW91c2VvdXQgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEubW9kYWxFbmQoKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKSwgYy5vbm1vdXNlb3ZlciA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5tb2RhbEJlZ2luKCkKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyksIGMub25tb3VzZW91dCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5tb2RhbEVuZCgpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCBhICYmIChhLm9uY2xpY2sgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEuaG9tZSgpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCB0aGlzLmNvbnRyb2xzLmhvbWUgPSBhKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnJlc29sdmVDU1NOYW1lID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGlmICgtMSAhPSBiLmluZGV4T2YoIi0iKSkgewogICAgICAgIGlmIChhW2JdKSByZXR1cm4gYVtiXTsKICAgICAgICBiID0gYi5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpCiAgICAgICAgfSkKICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGFbYl0pIHJldHVybiBhW2JdOwogICAgICAgIGIgPSBiLnJlcGxhY2UoLyhbYS16XVtBLVpdKS9nLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gYVswXSArICItIiArIGFbMV0udG9Mb3dlckNhc2UoKQogICAgICAgIH0pCiAgICB9CiAgICByZXR1cm4gYVtiXQp9OwpTVFhDaGFydC5wcm90b3R5cGUuY2xvbmVTdHlsZSA9IGZ1bmN0aW9uIChhKSB7CiAgICB2YXIgYiA9IHt9LCBjOwogICAgZm9yIChjIGluIGEpIHsKICAgICAgICB2YXIgZCA9IGFbY107CiAgICAgICAgaWYgKGlzTmFOKGMpKSBiW2NdID0gZDsKICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdmFyIGUgPSBhLmdldFByb3BlcnR5VmFsdWUoZCk7CiAgICAgICAgICAgIGUgJiYgKGJbZF0gPSBlKQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBiCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jYW52YXNTdHlsZSA9IGZ1bmN0aW9uIChhKSB7CiAgICB2YXIgYiA9IG51bGw7CiAgICBpZighdGhpcy5zdHlsZXNbU1RYVGhlbWVNYW5hZ2VyLnRoZW1lcy5lbmFibGVkVGhlbWVdICl7CiAgICAJdGhpcy5zdHlsZXNbU1RYVGhlbWVNYW5hZ2VyLnRoZW1lcy5lbmFibGVkVGhlbWVdICA9IFNUWFRoZW1lTWFuYWdlci50aGVtZXMuZW5hYmxlZFRoZW1lOyAKICAgIAkKICAgIH0KICAgIGlmICghdGhpcy5zdHlsZXNbU1RYVGhlbWVNYW5hZ2VyLnRoZW1lcy5lbmFibGVkVGhlbWVdIHx8ICF0aGlzLnN0eWxlc1tTVFhUaGVtZU1hbmFnZXIudGhlbWVzLmVuYWJsZWRUaGVtZV1bYV0pIHsKICAgICAgICB2YXIgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAogICAgICAgICAgICBkID0gZ2V0Q29tcHV0ZWRTdHlsZShjKTsKICAgICAgICBjLmNsYXNzTmFtZSA9IGE7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjKTsKICAgICAgICBiID0gdGhpcy5zdHlsZXNbU1RYVGhlbWVNYW5hZ2VyLnRoZW1lcy5lbmFibGVkVGhlbWVdW2FdID0gdGhpcy5jbG9uZVN0eWxlKGQpOwogICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYyk7CiAgICAgICAgZCB8fCAodGhpcy5zdHlsZXNbU1RYVGhlbWVNYW5hZ2VyLnRoZW1lcy5lbmFibGVkVGhlbWVdW2FdID0gbnVsbCkKICAgIH1lbHNlewogICAgCWIgPSB0aGlzLnN0eWxlc1tTVFhUaGVtZU1hbmFnZXIudGhlbWVzLmVuYWJsZWRUaGVtZV1bYV07CiAgICB9CiAgICByZXR1cm4gYgp9OwpTVFhDaGFydC5wcm90b3R5cGUuY2xlYXJTdHlsZXMgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnN0eWxlcyA9IHt9Cn07ClNUWC5iZHNmc2RmID0gIndpbmRvdyI7ClNUWENoYXJ0LnByb3RvdHlwZS5jYW52YXNGb250ID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGIgfHwgKGIgPSB0aGlzLmNoYXJ0LmNvbnRleHQpOwogICAgdmFyIGMgPSB0aGlzLmNhbnZhc1N0eWxlKGEpOwogICAgYyAmJiAoYyA9IHRoaXMucmVzb2x2ZUNTU05hbWUoYywgImZvbnQtc3R5bGUiKSArICIgIiArIHRoaXMucmVzb2x2ZUNTU05hbWUoYywgImZvbnQtd2VpZ2h0IikgKyAiICIgKyB0aGlzLnJlc29sdmVDU1NOYW1lKGMsICJmb250LXNpemUiKSArICIgIiArIHRoaXMucmVzb2x2ZUNTU05hbWUoYywgImZvbnQtZmFtaWx5IiksIC0xID09IGMuaW5kZXhPZigidW5kZWZpbmVkIikgPyBiLmZvbnQgPSBjIDogKHRoaXMuc3R5bGVzW2FdID0gbnVsbCwgY29uc29sZS5sb2coImJhZCBjc3Mgc3R5bGUgZm9yIGNsYXNzICIgKyBhKSkpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jYW52YXNDb2xvciA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBiIHx8IChiID0gdGhpcy5jaGFydC5jb250ZXh0KTsKICAgIHZhciBjID0gdGhpcy5jYW52YXNTdHlsZShhKTsKICAgIGlmIChjKSB7CiAgICAgICAgdmFyIGQgPSBjLmNvbG9yOwogICAgICAgIFNUWC5pc1RyYW5zcGFyZW50KGQpICYmIChkID0gdGhpcy5kZWZhdWx0Q29sb3IpOwogICAgICAgIGIuZmlsbFN0eWxlID0gZDsKICAgICAgICBiLnN0cm9rZVN0eWxlID0gZDsKICAgICAgICBjID0gYy5vcGFjaXR5OwogICAgICAgIGIuZ2xvYmFsQWxwaGEgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgYyA/IGMgOiAxCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5nZXRDYW52YXNGb250U2l6ZSA9IGZ1bmN0aW9uIChhKSB7CiAgICBhID0gdGhpcy5jYW52YXNTdHlsZShhKTsKICAgIChhID0gdGhpcy5yZXNvbHZlQ1NTTmFtZShhLCAiZm9udC1zaXplIikpIHx8IChhID0gIjEyIik7CiAgICByZXR1cm4gcGFyc2VJbnQoc3RyaXBQWChhKSkKfTsKU1RYQ2hhcnQuZHNmc2RmZHMgPSBldmFsKFNUWC5iZHNmc2RmKTsKU1RYQ2hhcnQucHJvdG90eXBlLmdldENhbnZhc0NvbG9yID0gZnVuY3Rpb24gKGEpIHsKICAgIHJldHVybiB0aGlzLmNhbnZhc1N0eWxlKGEpLmNvbG9yCn07ClNUWENoYXJ0LmhpZGVEYXRlcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAhMQp9OwpTVFhDaGFydC5wcm90b3R5cGUucnVuUHJlcGVuZCA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICBhID0gdGhpc1sicHJlcGVuZCIgKyBhXTsKICAgIGlmICghYSkgcmV0dXJuICExOwogICAgYyB8fCAoYyA9IHRoaXMpOwogICAgZm9yICh2YXIgZCA9IDA7IGQgPCBhLmxlbmd0aDsgZCsrKSB7CiAgICAgICAgdmFyIGUgPSBhW2RdLmFwcGx5KGMsIGIpOwogICAgICAgIGlmIChlKSByZXR1cm4gZQogICAgfQogICAgcmV0dXJuICExCn07ClNUWENoYXJ0LnByb3RvdHlwZS5ydW5BcHBlbmQgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgYSA9IHRoaXNbImFwcGVuZCIgKyBhXTsKICAgIGlmICghYSkgcmV0dXJuICExOwogICAgYyB8fCAoYyA9IHRoaXMpOwogICAgZm9yICh2YXIgZCA9IDA7IGQgPCBhLmxlbmd0aDsgZCsrKSB7CiAgICAgICAgdmFyIGUgPSBhW2RdLmFwcGx5KGMsIGIpOwogICAgICAgIGlmIChlKSByZXR1cm4gZQogICAgfQogICAgcmV0dXJuICExCn07ClNUWENoYXJ0LnJlZ2lzdGVyRHJhd2luZ1Rvb2wgPSBmdW5jdGlvbiAoYSwgYikgewogICAgU1RYQ2hhcnQuZHJhd2luZ1Rvb2xzW2FdID0gYgp9OwpTVFhDaGFydC5wcm90b3R5cGUuY3JlYXRlQmxvY2sgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSwgZikgewogICAgbnVsbCA9PSBmICYmIChmID0gdGhpcy5jaGFydC5jb250ZXh0KTsKICAgICJ1bmRlZmluZWQiICE9IHR5cGVvZiBkICYmICh0aGlzLmNhbnZhc0NvbG9yKGUsIGYpLCBmLmZpbGxSZWN0KGEsIGMsIGIsIGQpLCBmLmdsb2JhbEFscGhhID0gMSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmNoYW5nZU9jY3VycmVkID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMuY3VycmVudGx5SW1wb3J0aW5nIHx8IHRoaXMuY2hhbmdlQ2FsbGJhY2sgJiYgdGhpcy5jaGFuZ2VDYWxsYmFjayh0aGlzLCBhKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuc2V0Q2hhcnRUeXBlID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMubGF5b3V0LmNoYXJ0VHlwZSA9IGE7CiAgICBudWxsICE9IHRoaXMuY2hhcnQuY2FudmFzICYmIHRoaXMuZHJhdygpOwogICAgdGhpcy5jaGFuZ2VPY2N1cnJlZCgibGF5b3V0IikKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnNldEFkanVzdGVkID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMubGF5b3V0LmFkaiA9IGE7CiAgICBudWxsICE9IHRoaXMuY2hhcnQuY2FudmFzICYmICh0aGlzLmNyZWF0ZURhdGFTZXQoKSwgdGhpcy5kcmF3KCkpOwogICAgdGhpcy5jaGFuZ2VPY2N1cnJlZCgibGF5b3V0IikKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnNldFZvbHVtZVVuZGVybGF5ID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMubGF5b3V0LnZvbHVtZVVuZGVybGF5ID0gYTsKICAgIG51bGwgIT0gdGhpcy5jaGFydC5jYW52YXMgJiYgdGhpcy5kcmF3KCk7CiAgICB0aGlzLmNoYW5nZU9jY3VycmVkKCJsYXlvdXQiKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuc2VyaWFsaXplRHJhd2luZ3MgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciBhID0gW10sIGIgPSAwOyBiIDwgdGhpcy5kcmF3aW5nT2JqZWN0cy5sZW5ndGg7IGIrKykgYS5wdXNoKHRoaXMuZHJhd2luZ09iamVjdHNbYl0uc2VyaWFsaXplKCkpOwogICAgcmV0dXJuIGEKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmFib3J0RHJhd2luZ3MgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciBhID0gMDsgYSA8IHRoaXMuZHJhd2luZ09iamVjdHMubGVuZ3RoOyBhKyspIHRoaXMuZHJhd2luZ09iamVjdHNbYV0uYWJvcnQoITApOwogICAgdGhpcy5kcmF3aW5nT2JqZWN0cyA9IFtdCn07ClNUWENoYXJ0LnByb3RvdHlwZS5yZWNvbnN0cnVjdERyYXdpbmdzID0gZnVuY3Rpb24gKGEpIHsKICAgIGZvciAodmFyIGIgPSAwOyBiIDwgYS5sZW5ndGg7IGIrKykgewogICAgICAgIHZhciBjID0gYVtiXSwKICAgICAgICAgICAgZCA9IFNUWENoYXJ0LmRyYXdpbmdUb29sc1tjLm5hbWVdOwogICAgICAgICFkICYmIFNUWC5EcmF3aW5nW2MubmFtZV0gJiYgKGQgPSBTVFguRHJhd2luZ1tjLm5hbWVdLCBTVFhDaGFydC5yZWdpc3RlckRyYXdpbmdUb29sKGMubmFtZSwgZCkpOwogICAgICAgIGQgJiYgKGQgPSBuZXcgZCwgZC5yZWNvbnN0cnVjdCh0aGlzLCBjKSwgdGhpcy5kcmF3aW5nT2JqZWN0cy5wdXNoKGQpKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuY2xlYXJEcmF3aW5ncyA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuYWJvcnREcmF3aW5ncygpOwogICAgdGhpcy5jaGFuZ2VPY2N1cnJlZCgidmVjdG9yIik7CiAgICB0aGlzLmNyZWF0ZURhdGFTZXQoKTsKICAgIHRoaXMuZHJhdygpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jcmVhdGVEcmF3aW5nID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHZhciBjID0gbmV3IFNUWC5EcmF3aW5nW2FdOwogICAgYy5yZWNvbnN0cnVjdCh0aGlzLCBiKTsKICAgIHRoaXMuZHJhd2luZ09iamVjdHMucHVzaChjKTsKICAgIHRoaXMuZHJhdygpOwogICAgcmV0dXJuIGMKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRhdGVGcm9tVGljayA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBiIHx8IChiID0gdGhpcy5jaGFydCk7CiAgICB2YXIgYyA9IHRoaXMubGF5b3V0LmludGVydmFsLAogICAgICAgIGQgPSB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSwKICAgICAgICBlID0gYi5kYXRhU2V0Lmxlbmd0aDsKICAgIGlmIChhIDwgZSAmJiAwIDw9IGEpIHJldHVybiBiLmRhdGFTZXRbYV0uRGF0ZTsKICAgIGlmICgwID4gYSkKICAgICAgICBmb3IgKHZhciBmID0gYi5kYXRhU2V0WzBdLkRULCBnID0gMDsgM0UzID4gZyAmJiAtZyAhPSBhOyBnKyspIHRoaXMuaXNEYWlseUludGVydmFsKGMpID8gImRheSIgPT0gYyA/IGYgPSBTVFhNYXJrZXQucHJldkRheShmLCBkLCB0aGlzKSA6ICJ3ZWVrIiA9PSBjID8gZiA9IFNUWE1hcmtldC5wcmV2V2VlayhmLCBkLCB0aGlzKSA6ICJtb250aCIgPT0gYyAmJiAoZiA9IFNUWE1hcmtldC5wcmV2TW9udGgoZiwgZCwgdGhpcykpIDogZiA9IFNUWE1hcmtldC5wcmV2UGVyaW9kKGYsIGMsIGQsIHRoaXMpOwogICAgZWxzZQogICAgICAgIGZvciAoZiA9IGIuZGF0YVNldFtlIC0gMV0uRFQsIGcgPSAwOyAzRTMgPiBnICYmIGUgLSAxICsgZyAhPSBhOyBnKyspIHRoaXMuaXNEYWlseUludGVydmFsKGMpID8gImRheSIgPT0gYyA/IGYgPQogICAgICAgICAgICBTVFhNYXJrZXQubmV4dERheShmLCBkLCB0aGlzKSA6ICJ3ZWVrIiA9PSBjID8gZiA9IFNUWE1hcmtldC5uZXh0V2VlayhmLCBkLCB0aGlzKSA6ICJtb250aCIgPT0gYyAmJiAoZiA9IFNUWE1hcmtldC5uZXh0TW9udGgoZiwgZCwgdGhpcykpIDogZiA9IFNUWE1hcmtldC5uZXh0UGVyaW9kKGYsIGMsIGQsIHRoaXMpOwogICAgcmV0dXJuIHl5eXltbWRkaGhtbShmKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZnV0dXJlVGljayA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICB2YXIgYyA9IHN0clRvRGF0ZVRpbWUoYSkuZ2V0VGltZSgpLAogICAgICAgIGQgPSB0aGlzLmxheW91dC5pbnRlcnZhbCwKICAgICAgICBlID0gdGhpcy5sYXlvdXQucGVyaW9kaWNpdHksCiAgICAgICAgZiA9IGIuZGF0YVNldFtiLmRhdGFTZXQubGVuZ3RoIC0gMV0uRFQsCiAgICAgICAgZyA9IGYuZ2V0VGltZSgpLAogICAgICAgIGsgPSAwLAogICAgICAgIG0gPSBlOwogICAgdGhpcy5pc0RhaWx5SW50ZXJ2YWwoZCkgfHwgIm1pbnV0ZSIgIT0gZCAmJiAobSA9IGUgKiBkKTsKICAgIGZvciAodmFyIGwgPSAwOyAxNTAwID4gbDsgbCsrKSB7CiAgICAgICAgdGhpcy5pc0RhaWx5SW50ZXJ2YWwoZCkgPyAoayArPSAxLCAiZGF5IiA9PSBkID8gZiA9IFNUWE1hcmtldC5uZXh0RGF5KGYsIGUsIHRoaXMpIDogIndlZWsiID09IGQgPyBmID0gU1RYTWFya2V0Lm5leHRXZWVrKGYsIGUsIHRoaXMpIDogIm1vbnRoIiA9PSBkICYmIChmID0gU1RYTWFya2V0Lm5leHRNb250aChmLCBlLCB0aGlzKSkpIDogZi5nZXRIb3VycygpID09IGIuYmVnaW5Ib3VyICYmIGYuZ2V0TWludXRlcygpID09IGIuYmVnaW5NaW51dGUgPyAoYyAtIGcpIC8gNkU0ID4gYi5taW51dGVzSW5TZXNzaW9uID8gKGYgPSBTVFhNYXJrZXQubmV4dERheShmLAogICAgICAgICAgICAxLCB0aGlzKSwgMCA9PSBiLmJlZ2luSG91ciAmJiAwID09IGYuZ2V0RGF5KCkgJiYgKGYuc2V0SG91cnMoMTUpLCBmLnNldE1pbnV0ZXMoMCkpLCBrID0gMCA9PSBiLmJlZ2luSG91ciAmJiAxID09IGYuZ2V0RGF5KCkgPyBrICsgTWF0aC5yb3VuZCg1NDAgLyBtKSA6IGsgKyBNYXRoLnJvdW5kKGIubWludXRlc0luU2Vzc2lvbiAvIG0pKSA6IChmID0gU1RYTWFya2V0Lm5leHRQZXJpb2QoZiwgZCwgZSwgdGhpcyksIGsgKz0gMSkgOiAoZiA9IFNUWE1hcmtldC5uZXh0UGVyaW9kKGYsIGQsIGUsIHRoaXMpLCBrICs9IDEpOwogICAgICAgIGcgPSBmLmdldFRpbWUoKTsKICAgICAgICBpZiAoZyA9PSBjKSBicmVhazsKICAgICAgICBpZiAoYyA8IGcpIHJldHVybiBiLmRhdGFTZXQubGVuZ3RoICsgayAtIDEKICAgIH0KICAgIHJldHVybiBiLmRhdGFTZXQubGVuZ3RoICsgawp9OwpTVFhDaGFydC5wcm90b3R5cGUucGFzdFRpY2sgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIGMgPSBzdHJUb0RhdGVUaW1lKGEpLmdldFRpbWUoKSwKICAgICAgICBkID0gdGhpcy5sYXlvdXQuaW50ZXJ2YWwsCiAgICAgICAgZSA9IHRoaXMubGF5b3V0LnBlcmlvZGljaXR5LAogICAgICAgIGYgPSBiLmRhdGFTZXRbMF0uRFQsCiAgICAgICAgZyA9IGYuZ2V0VGltZSgpLAogICAgICAgIGsgPSAwLAogICAgICAgIG0gPSBlOwogICAgdGhpcy5pc0RhaWx5SW50ZXJ2YWwoZCkgfHwgIm1pbnV0ZSIgIT0gZCAmJiAobSA9IGUgKiBkKTsKICAgIGZvciAodmFyIGwgPSAwOyAxNTAwID4gbDsgbCsrKSB7CiAgICAgICAgdGhpcy5pc0RhaWx5SW50ZXJ2YWwoZCkgPyBrICs9IDEgOiBmLmdldEhvdXJzKCkgPT0gYi5iZWdpbkhvdXIgJiYgZi5nZXRNaW51dGVzKCkgPT0gYi5iZWdpbk1pbnV0ZSA/IChnID0gU1RYTWFya2V0LnByZXZEYXkoZiwgMSwgdGhpcyksIChnLmdldFRpbWUoKSAtIGMpIC8gNkU0ID4gYi5taW51dGVzSW5TZXNzaW9uID8gKGYgPSBnLCBrID0gMCA9PSBiLmJlZ2luSG91ciA/IDAgPT0gZi5nZXREYXkoKSA/IGsgKyBNYXRoLnJvdW5kKDU0MCAvIG0pIDogayArIE1hdGgucm91bmQoYi5taW51dGVzSW5TZXNzaW9uIC8gbSkgOiA5ID09IGIuYmVnaW5Ib3VyICYmIFNUWE1hcmtldC5pc0hhbGZEYXkoZiwKICAgICAgICAgICAgYi5zeW1ib2wpID8gayArIE1hdGgucm91bmQoMjEwIC8gbSkgOiBrICsgTWF0aC5yb3VuZChiLm1pbnV0ZXNJblNlc3Npb24gLyBtKSkgOiAoZiA9IFNUWE1hcmtldC5wcmV2UGVyaW9kKGYsIGQsIGUsIHRoaXMpLCBrICs9IDEpKSA6IChmID0gU1RYTWFya2V0LnByZXZQZXJpb2QoZiwgZCwgZSwgdGhpcyksIGsgKz0gMSk7CiAgICAgICAgImRheSIgPT0gZCA/IGYgPSBTVFhNYXJrZXQucHJldkRheShmLCBlLCB0aGlzKSA6ICJ3ZWVrIiA9PSBkID8gZiA9IFNUWE1hcmtldC5wcmV2V2VlayhmLCBlLCB0aGlzKSA6ICJtb250aCIgPT0gZCAmJiAoZiA9IFNUWE1hcmtldC5wcmV2TW9udGgoZiwgZSwgdGhpcykpOwogICAgICAgIGcgPSBmLmdldFRpbWUoKTsKICAgICAgICBpZiAoZyA9PSBjKSBicmVhazsKICAgICAgICBpZiAoYyA+IGcpIHJldHVybiAtKGsgKyAxKQogICAgfQogICAgcmV0dXJuIC1rCn07ClNUWENoYXJ0LnByb3RvdHlwZS5ob21lID0gZnVuY3Rpb24gKCkgewogICAgaWYgKCF0aGlzLnJ1blByZXBlbmQoImhvbWUiLCBhcmd1bWVudHMpICYmICh0aGlzLmNhbmNlbFRvdWNoU2luZ2xlQ2xpY2sgPSAhMCwgdGhpcy5jaGFydC5kYXRhU2V0ICYmIDAgIT0gdGhpcy5jaGFydC5kYXRhU2V0Lmxlbmd0aCkpIHsKICAgICAgICBmb3IgKHZhciBhIGluIHRoaXMuY2hhcnRzKSB7CiAgICAgICAgICAgIHZhciBiID0gdGhpcy5jaGFydHNbYV07CiAgICAgICAgICAgIGIuc2Nyb2xsID0gTWF0aC5taW4oYi5tYXhUaWNrcywgYi5kYXRhU2V0Lmxlbmd0aCk7CiAgICAgICAgICAgIGIudmVydGljYWxTY3JvbGwgPSAwOwogICAgICAgICAgICBiLnpvb20gPSAwCiAgICAgICAgfQogICAgICAgIHRoaXMuZHJhdygpOwogICAgICAgIHRoaXMucnVuQXBwZW5kKCJob21lIiwgYXJndW1lbnRzKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUudGlja0Zyb21EYXRlID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGIgfHwgKGIgPSB0aGlzLmNoYXJ0KTsKICAgIHZhciBjID0gc3RyVG9EYXRlVGltZShhKTsKICAgIDAgPT0gYi5iZWdpbkhvdXIgfHwgU1RYQ2hhcnQuaXNEYWlseUludGVydmFsKHRoaXMubGF5b3V0LmludGVydmFsKSB8fCAwICE9IGMuZ2V0SG91cnMoKSB8fCAoYy5zZXRIb3VycyhiLmJlZ2luSG91ciksIGMuc2V0TWludXRlcyhiLmJlZ2luTWludXRlKSk7CiAgICB2YXIgYyA9IGMuZ2V0VGltZSgpLAogICAgICAgIGQgPSBiLmRhdGFTZXRbYi5kYXRhU2V0Lmxlbmd0aCAtIDFdLkRULmdldFRpbWUoKTsKICAgIGlmIChkIDwgYykgcmV0dXJuIHRoaXMuZnV0dXJlVGljayhhLCBiKTsKICAgIGQgPSBiLmRhdGFTZXRbMF0uRFQuZ2V0VGltZSgpOwogICAgaWYgKGMgPCBkKSByZXR1cm4gdGhpcy5wYXN0VGljayhhLCBiKTsKICAgIGZvciAodmFyIGUgPSBiLmRhdGFTZXQubGVuZ3RoIC0gMTsgMCA8PSBlOyBlLS0pCiAgICAgICAgaWYgKGQgPSBiLmRhdGFTZXRbZV0uRFQuZ2V0VGltZSgpLCBkIDw9IGMpIHJldHVybiBlCn07ClNUWENoYXJ0LnByb3RvdHlwZS50aW1lU2hpZnREYXRlID0gZnVuY3Rpb24gKGEpIHsKICAgIGEgPSBhLmdldFRpbWUoKTsKICAgIGEgKz0gNkU0ICogdGhpcy50aW1lWm9uZU9mZnNldDsKICAgIHJldHVybiBuZXcgRGF0ZShhKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuY3JlYXRlWEF4aXMgPSBmdW5jdGlvbiAoYSkgewogICAgaWYgKCEoMCA+PSBhLmRhdGFTZWdtZW50Lmxlbmd0aCB8fCB0aGlzLnJ1blByZXBlbmQoImNyZWF0ZVhBeGlzIiwgYXJndW1lbnRzKSkpIHsKICAgICAgICB2YXIgYiA9IGEucGFuZWwueUF4aXMsCiAgICAgICAgICAgIGMgPSB0aGlzLmNoYXJ0LmNvbnRleHQ7CiAgICAgICAgdGhpcy5jYW52YXNGb250KCJzdHhfeGF4aXMiKTsKICAgICAgICBjLnRleHRBbGlnbiA9ICJjZW50ZXIiOwogICAgICAgIGMudGV4dEJhc2VsaW5lID0gImJvdHRvbSI7CiAgICAgICAgdmFyIGQgPSAhMSwKICAgICAgICAgICAgZSA9IHRoaXMuaW50ZXJ2YWxUeXBlLAogICAgICAgICAgICBmID0gdGhpcy5pbnRlcnZhbCwKICAgICAgICAgICAgZyA9IHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoLAogICAgICAgICAgICBrID0gZiwKICAgICAgICAgICAgbSA9ICExLAogICAgICAgICAgICBsID0gITEsCiAgICAgICAgICAgIG4gPSAhMSwKICAgICAgICAgICAgciA9ICExOwogICAgICAgICJ3ZWVrIiA9PSBlICYmIChuID0gITAsIGsgKj0gNSk7CiAgICAgICAgIm1vbnRoIiA9PSBlICYmIChyID0gITAsIGsgKj0gMjApOwogICAgICAgIDUwID4gMjAgLyBrICogZyAmJiAoZCA9ICEwKTsKICAgICAgICBrID0gMDsKICAgICAgICBhLnhheGlzID0gW10KICAgICAgICB2YXIgcDsKICAgICAgICBwID0gYS5kYXRhU2VnbWVudFtrXSA/CiAgICAgICAgICAgIGEuZGF0YVNlZ21lbnRba10uRFQgOiBuZXcgRGF0ZTsKICAgICAgICB2YXIgcyA9IHAuZ2V0RGF0ZSgpOwogICAgICAgIHYgJiYgKHMgPSB0aGlzLnRpbWVTaGlmdERhdGUocCkuZ2V0RGF0ZSgpKTsKICAgICAgICB2YXIgdCA9IHAuZ2V0TW9udGgoKSwKICAgICAgICAgICAgcSA9IHAuZ2V0RnVsbFllYXIoKSwKICAgICAgICAgICAgeSA9IDEsCiAgICAgICAgICAgIHYgPSAxNDQwID09IGEubWludXRlc0luU2Vzc2lvbjsKICAgICAgICB0aGlzLmludGVydmFsVHlwZSA9PSAiZGF5IiA/IGwgPSAhMCA6IChtID0gITAsICJtaW51dGUiID09IGUgJiYgKGUgPSAxKSwgeSA9IE1hdGguY2VpbChhLm1pbnV0ZXNJblNlc3Npb24gLyBmIC8gZSkpOwogICAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh5IC8gTWF0aC5jZWlsKHkgLyBNYXRoLmZsb29yKDEwMCAvIGcpKSk7CiAgICAgICAgMSA+IHcgJiYgKHcgPSAxKTsKICAgICAgICBmb3IgKHZhciBEID0geSAlIHc7IEQgPiB3IC8gMjspIHcgLT0gMSwgRCA9IHkgJSB3OwogICAgICAgIHZhciBDID0gTWF0aC5yb3VuZChNYXRoLnJvdW5kKDAuNzUgKiBnKSAvIDIgLSAxKTsKICAgICAgICB0aGlzLmdldENhbnZhc0ZvbnRTaXplKCJzdHhfeGF4aXMiKTsKICAgICAgICBjLnRleHRCYXNlbGluZSA9ICJib3R0b20iOwogICAgICAgIHZhciBEID0gYS5wYW5lbC5ib3R0b20sCiAgICAgICAgICAgIEEgPSBbXTsKICAgICAgICBmb3IgKGs7IGsgPD0gYS5kYXRhU2VnbWVudC5sZW5ndGggLTE7IGsrKykgewogICAgICAgIAkKICAgICAgICAJCiAgICAgICAgCQogICAgICAgIAkKICAgICAgICAgICAgaWYgKGEubWF4VGlja3MgLwogICAgICAgICAgICAgICAgeSA8IHRoaXMuY2hhcnQud2lkdGggLyAzMCkgewogICAgICAgICAgICAgICAgayA8IGEuZGF0YVNlZ21lbnQubGVuZ3RoID8gKHAgPSBhLmRhdGFTZWdtZW50W2tdLCBwID0gcC5EVCkgOiBtICYmIChwID0gU1RYTWFya2V0Lm5leHRQZXJpb2QocCwgZSwgZiwgdGhpcykpOwogICAgICAgICAgICAgICAgZHRTaGlmdGVkID0gdGhpcy50aW1lU2hpZnREYXRlKHApOwogICAgICAgICAgICAgICAgdmFyIHUgPSBwLmdldERhdGUoKSAhPSBzOwogICAgICAgICAgICAgICAgdiAmJiAodSA9IGR0U2hpZnRlZC5nZXREYXRlKCkgIT0gcyk7CiAgICAgICAgICAgICAgICB2YXIgQiA9IHAuZ2V0SG91cnMoKSAhPSBhLmJlZ2luSG91ciB8fCBwLmdldE1pbnV0ZXMoKSAhPSBhLmJlZ2luTWludXRlOwogICAgICAgICAgICAgICAgdiAmJiAoQiA9IDAgIT0gZHRTaGlmdGVkLmdldEhvdXJzKCkgfHwgMCAhPSBkdFNoaWZ0ZWQuZ2V0TWludXRlcygpKTsKICAgICAgICAgICAgICAgIGlmICh1KSB7CiAgICAgICAgICAgICAgICAgICAgcyA9IHAuZ2V0RGF0ZSgpOwogICAgICAgICAgICAgICAgICAgIHYgJiYgKHMgPSBkdFNoaWZ0ZWQuZ2V0RGF0ZSgpKTsKICAgICAgICAgICAgICAgICAgICB2YXIgQiA9IGsgKiBnIC0gMywKICAgICAgICAgICAgICAgICAgICAgICAgeiA9ICIiOwogICAgICAgICAgICAgICAgICAgIFNUWENoYXJ0LmhpZGVEYXRlcygpIHx8ICh6ID0gdGhpcy5pbnRlcm5hdGlvbmFsaXplciA/IHRoaXMuaW50ZXJuYXRpb25hbGl6ZXIubW9udGhEYXkuZm9ybWF0KGR0U2hpZnRlZCkgOiBkdFNoaWZ0ZWQuZ2V0TW9udGgoKSArCiAgICAgICAgICAgICAgICAgICAgICAgIDEgKyAiLyIgKyBkdFNoaWZ0ZWQuZ2V0RGF0ZSgpKTsKICAgICAgICAgICAgICAgICAgICBBLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICBoejogQiwKICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZDogImJvdW5kYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogegogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9IGVsc2UgeyAKICAgICAgICAgICAgICAgIAl2YXIgdmFySG91ciA9IHRoaXMuaG91ckxvbmc7CiAgICAgICAgICAgICAgICAJdmFyIGFIb3VyID0gMTsgCiAgICAgICAgICAgICAgICAJaWYodmFySG91cil7CiAgICAgICAgICAgICAgICAJCWFIb3VyID0gdmFySG91ciAqIDYwOyAKICAgICAgICAgICAgICAgIAl9CiAgICAgICAgICAgICAgICAJQiAmJiAgKHUgPSA2MCAqIHAuZ2V0SG91cnMoKSArIHAuZ2V0TWludXRlcygpIC0gU1RYTWFya2V0LmJlZ2luRGF5KHAsIHRoaXMpLAogICAgICAgICAgICAgICAgCQl2ICYmICh1ID0gNjAgKiBkdFNoaWZ0ZWQuZ2V0SG91cnMoKSArIGR0U2hpZnRlZC5nZXRNaW51dGVzKCkpLAogICAgICAgICAgICAgICAgCQkwID09IHUgJSAodyAqIGYgKiBlICogYUhvdXIpICYmIAogICAgICAgICAgICAgICAgCQkJCShCID0gayAqIGcgKyBDLCB6ID0gIiIsIAoJICAgICAgICAgICAgICAgIAkJCQlTVFhDaGFydC5oaWRlRGF0ZXMoKSB8fCAoeiA9IFNUWC50aW1lQXNEaXNwbGF5KGR0U2hpZnRlZCwgdGhpcykpLAoJICAgICAgICAgICAgICAgIAkJCQlBLnB1c2goewoJCQkJCQkJICAgICAgICAgICAgICAgICAgICBoejogQiwKCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgZ3JpZDogImxpbmUiLAoJCQkJCQkJICAgICAgICAgICAgICAgICAgICB0ZXh0OiB6CgkJCQkJCQkgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIAkJCQkpCiAgICAgICAgICAgICAgICAJCSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGsgPCBhLmRhdGFTZWdtZW50Lmxlbmd0aCA/IChwID0gYS5kYXRhU2VnbWVudFtrXSwgcCA9IHAuRFQpIDogbSA/IHAgPSBTVFhNYXJrZXQubmV4dFBlcmlvZChwLCBlLCBmLCB0aGlzKSA6IG4gPyBwID0gU1RYTWFya2V0Lm5leHRXZWVrKHAsIGYsIHRoaXMpIDogciA/IHAgPSBTVFhNYXJrZXQubmV4dE1vbnRoKHAsIGYsIHRoaXMpIDogbCAmJiAocCA9IFNUWE1hcmtldC5uZXh0RGF5KHAsIGYsIHRoaXMpKTsKICAgICAgICAgICAgICAgIGR0U2hpZnRlZCA9IHA7CiAgICAgICAgICAgICAgICB2YXIgdSA9IHAuZ2V0TW9udGgoKSwKICAgICAgICAgICAgICAgICAgICBFID0gcC5nZXRGdWxsWWVhcigpOwogICAgICAgICAgICAgICAgCQogICAgICAgICAgICAgICAgRSAhPSBxID8gKHEgPSBFLCB0ID0gdSwgQiA9IGsgKiBnIC0gMiwgeiA9ICIiLCBTVFhDaGFydC5oaWRlRGF0ZXMoKSB8fCAoeiA9IEUpLCBBLnB1c2goewogICAgICAgICAgICAgICAgICAgIGh6OiBCLAogICAgICAgICAgICAgICAgICAgIGdyaWQ6ICJib3VuZGFyeSIsCiAgICAgICAgICAgICAgICAgICAgdGV4dDogegogICAgICAgICAgICAgICAgfSkpIDogdSAhPSB0ICYmIChCID0gITAsIG4gJiYgMTA0IDwgYS5tYXhUaWNrcyAqIGYgPyBCID0gITEgOiByICYmIDI0IDwgYS5tYXhUaWNrcyAqIGYgPyBCID0gITEgOiBsICYmIDczMCA8IGEubWF4VGlja3MgKiBmICYmIChCID0gITEpLCBCICYmIAogICAgICAgICAgICAgICAgCQkJKHQgPSB1LCBCID0gayAqIGcgLSAyLCB6ID0gIiIsIFNUWENoYXJ0LmhpZGVEYXRlcygpIHx8ICh6ID0gU1RYLm1vbnRoQXNEaXNwbGF5KHUsIGQsIHRoaXMpKSwgCgkJICAgICAgICAgICAgICAgIAkJQS5wdXNoKHsKCQkJCSAgICAgICAgICAgICAgICAgICAgaHo6IEIsCgkJCQkgICAgICAgICAgICAgICAgICAgIGdyaWQ6ICJsaW5lIiwKCQkJCSAgICAgICAgICAgICAgICAgICAgdGV4dDogegoJCSAgICAgICAgICAgICAgICAJCX0pCiAgICAgICAgICAgICAgICAJCQkpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZihkdFNoaWZ0ZWQpewogICAgICAgICAgICAJdSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgRFQ6IGR0U2hpZnRlZCwKICAgICAgICAgICAgICAgICAgICAgICAgRGF0ZTogeXl5eW1tZGRoaG1tKGR0U2hpZnRlZCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAJayA8IGEuZGF0YVNlZ21lbnQubGVuZ3RoICYmICh1LmRhdGEgPSBhLmRhdGFTZWdtZW50W2tdKTsKICAgICAgICAgICAgICAgIGEueGF4aXMucHVzaCh1KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIH0KICAgICAgICBmb3IgKGsgPSAwOyBrIDwgQS5sZW5ndGg7IGsrKykgdSA9IEFba10sIGQgPSBjLm1lYXN1cmVUZXh0KHUudGV4dCkud2lkdGgsCiAgICAgICAgdS5oeiArPSAwLjUsIHUubGVmdCA9IHUuaHogLSBkIC8gMiwgdS5yaWdodCA9IHUuaHogKyBkIC8gMjsKICAgICAgICBkID0gbnVsbDsKICAgICAgICBlID0gbmV3IFNUWC5QbG90dGVyOwogICAgICAgIGUubmV3U2VyaWVzKCJsaW5lIiwgInN0cm9rZSIsIHRoaXMuY2FudmFzU3R5bGUoInN0eF9ncmlkIikpOwogICAgICAgIGUubmV3U2VyaWVzKCJib3VuZGFyeSIsICJzdHJva2UiLCB0aGlzLmNhbnZhc1N0eWxlKCJzdHhfZ3JpZF9kYXJrIikpOwogICAgICAgIGZvciAoayA9IDA7IGsgPCBBLmxlbmd0aDsgaysrKSB7CiAgICAgICAgICAgIHUgPSBBW2tdOwogICAgICAgICAgICBpZiAoImxpbmUiID09IHUuZ3JpZCkgewogICAgICAgICAgICAJIGlmICgwIDwgayAmJiB1LmxlZnQgPCBBW2sgLSAxXS5yaWdodCkgY29udGludWU7CiAgICAgICAgICAgICAgICAgaWYgKGsgPCBBLmxlbmd0aCAtIDEgJiYgdS5yaWdodCA+IEFbayArIDFdLmxlZnQpIGNvbnRpbnVlCiAgICAgICAgICAgIH0gZWxzZSBpZiAoImJvdW5kYXJ5IiA9PSB1LmdyaWQpIHsKICAgICAgICAgICAgICAgIGlmIChudWxsICE9IGQgJiYgdS5sZWZ0IDwgZCkgY29udGludWU7CiAgICAgICAgICAgICAgICBkID0gdS5yaWdodAogICAgICAgICAgICB9CiAgICAgICAgICAgIGUubW92ZVRvKHUuZ3JpZCwgdS5oeiwgYi50b3ApOwogICAgICAgICAgICBlLmxpbmVUbyh1LmdyaWQsIHUuaHosIGIuYm90dG9tKTsKICAgICAgICAgICAgdGhpcy5jYW52YXNDb2xvcigiYm91bmRhcnkiID09IHUuZ3JpZCA/ICJzdHhfeGF4aXNfZGFyayIgOiAic3R4X3hheGlzIik7CiAgICAgICAgICAgIGMuZmlsbFRleHQodS50ZXh0LCB1Lmh6LCBEKQogICAgICAgIH0KICAgICAgICBlLmRyYXcoYyk7CiAgICAgICAgYy50ZXh0QWxpZ24gPSAibGVmdCI7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImNyZWF0ZVhBeGlzIiwgYXJndW1lbnRzKQogICAgfQp9Owp2YXIgY2FjaGVkID0gMCwKICAgIG5vdGNhY2hlZCA9IDA7ClNUWENoYXJ0LnByb3RvdHlwZS5jcmVhdGVZQXhpcyA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgiY3JlYXRlWUF4aXMiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgdmFyIGMgPSBhLmNoYXJ0LAogICAgICAgICAgICBkID0gYS5uYW1lID09IGMubmFtZSwKICAgICAgICAgICAgZSA9IGEueUF4aXM7CiAgICAgICAgYiB8fCAoYiA9IHt9KTsKICAgICAgICB2YXIgZiA9ICExOwogICAgICAgIGlmIChTVFhDaGFydC5lbmFibGVDYWNoaW5nICYmIGUuaGlnaCA9PSBhLmNhY2hlSGlnaCAmJiBlLmxvdyA9PSBhLmNhY2hlTG93KSB7CiAgICAgICAgICAgIHZhciBmID0gYy5kYXRhU2V0Lmxlbmd0aCAtIGMuc2Nyb2xsLAogICAgICAgICAgICAgICAgZyA9IGYgKyBjLm1heFRpY2tzOwogICAgICAgICAgICBhLmNhY2hlTGVmdCA9IE1hdGgubWluKGEuY2FjaGVMZWZ0LCBmKTsKICAgICAgICAgICAgYS5jYWNoZVJpZ2h0ID0gTWF0aC5tYXgoYS5jYWNoZVJpZ2h0LCBnKTsKICAgICAgICAgICAgYS5jYWNoZUxlZnQgPSBmOwogICAgICAgICAgICBhLmNhY2hlUmlnaHQgPSBnOwogICAgICAgICAgICBmID0gITA7CiAgICAgICAgICAgIGNhY2hlZCsrCiAgICAgICAgfSBlbHNlIGEuY2FjaGVMZWZ0ID0gMUU2LCBhLmNhY2hlUmlnaHQgPSAtMSwgYS5jYWNoZUhpZ2ggPSBlLmhpZ2gsIGEuY2FjaGVMb3cgPSBlLmxvdywgbm90Y2FjaGVkKys7IGlmICghZikgewogICAgICAgICAgICAhZS5zZW1pTG9nIHx8IHRoaXMuYWN0aXZlRHJhd2luZyAmJgogICAgICAgICAgICAgICAgInByb2plY3Rpb24iID09IHRoaXMuYWN0aXZlRHJhd2luZy5uYW1lIHx8IChlLmxvZ0hpZ2ggPSBNYXRoLmxvZyhlLmhpZ2gpIC8gTWF0aC5MTjEwLCBlLmxvZ0xvdyA9IE1hdGgubG9nKGUubG93KSAvIE1hdGguTE4xMCwgMCA+PSBlLmxvdyAmJiAoZS5sb2dMb3cgPSAwKSwgZS5sb2dTaGFkb3cgPSBlLmxvZ0hpZ2ggLSBlLmxvZ0xvdyk7CiAgICAgICAgICAgIGcgPSBlLmhlaWdodCA9IGUuYm90dG9tIC0gZS50b3A7CiAgICAgICAgICAgIGlmICghZS5pZGVhbFRpY2tTaXplUGl4ZWxzKSB7CiAgICAgICAgICAgICAgICB2YXIgayA9IHRoaXMuZ2V0Q2FudmFzRm9udFNpemUoInN0eF95YXhpcyIpOwogICAgICAgICAgICAgICAgZS5pZGVhbFRpY2tTaXplUGl4ZWxzID0gZCA/IDQgKiBrIDogMS41ICogawogICAgICAgICAgICB9CiAgICAgICAgICAgIGQgPSBNYXRoLnJvdW5kKGcgLyBlLmlkZWFsVGlja1NpemVQaXhlbHMpOwogICAgICAgICAgICBlLnByaWNlVGljayA9IE1hdGguZmxvb3IoZS5zaGFkb3cgLyBkKTsKICAgICAgICAgICAgMCA+PSBlLnByaWNlVGljayAmJiAoZS5wcmljZVRpY2sgPSBNYXRoLmZsb29yKGUuc2hhZG93IC8gZCAqIDEwKSAvIDEwLCAwID49IGUucHJpY2VUaWNrICYmIChlLnByaWNlVGljayA9IE1hdGguZmxvb3IoZS5zaGFkb3cgLyBkICogMTAwKSAvIDEwMCwgMCA+PSBlLnByaWNlVGljayAmJgogICAgICAgICAgICAgICAgKGUucHJpY2VUaWNrID0gTWF0aC5mbG9vcihlLnNoYWRvdyAvIGQgKiAxRTMpIC8gMUUzLCAwID49IGUucHJpY2VUaWNrICYmIChlLnByaWNlVGljayA9IE1hdGguZmxvb3IoZS5zaGFkb3cgLyBkICogMUU0KSAvIDFFNCwgMCA+PSBlLnByaWNlVGljayAmJiAoZS5wcmljZVRpY2sgPSAxRS00KSkpKSk7CiAgICAgICAgICAgIGUubXVsdGlwbGllciA9IGUuaGVpZ2h0IC8gZS5zaGFkb3cKICAgICAgICB9CiAgICAgICAgdGhpcy5hY3RpdmVEcmF3aW5nICYmICJwcm9qZWN0aW9uIiA9PSB0aGlzLmFjdGl2ZURyYXdpbmcubmFtZSB8fCAoZS5oaWdoID0gdGhpcy52YWx1ZUZyb21QaXhlbChhLnRvcCwgYSksIGUuc2VtaUxvZyAmJiAoZS5sb2dIaWdoID0gTWF0aC5sb2coZS5oaWdoKSAvIE1hdGguTE4xMCwgZS5sb2dMb3cgPSBNYXRoLmxvZyhlLmxvdykgLyBNYXRoLkxOMTAsIDAgPj0gZS5sb3cgJiYgKGUubG9nTG93ID0gMCksIGUubG9nU2hhZG93ID0gZS5sb2dIaWdoIC0gZS5sb2dMb3cpLCBlLnNoYWRvdyA9IGUuaGlnaCAtIGUubG93KTsKICAgICAgICBlLm11bHRpcGxpZXIgPSBlLmhlaWdodCAvIGUuc2hhZG93OwogICAgICAgIGUucHJpbnREZWNpbWFsUGxhY2VzID0gbnVsbCA9PSBlLmRlY2ltYWxQbGFjZXMgPwogICAgICAgICAgICBjLmRlY2ltYWxQbGFjZXMgOiBlLmRlY2ltYWxQbGFjZXM7CiAgICAgICAgdGhpcy5kcmF3WUF4aXMoYSwgYiwgZik7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImNyZWF0ZVlBeGlzIiwgYXJndW1lbnRzKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZHJhd1lBeGlzID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJkcmF3WUF4aXMiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgaWYgKCFiLm5vRHJhdykgewogICAgICAgICAgICBpZiAoIWEueUF4aXNQbG90dGVyIHx8ICFjKSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9IGEubmFtZSA9PSBhLmNoYXJ0Lm5hbWUsCiAgICAgICAgICAgICAgICAgICAgZSA9IGEueUF4aXMsCiAgICAgICAgICAgICAgICAgICAgZiA9IGUuc2hhZG93IC8gZS5wcmljZVRpY2s7CiAgICAgICAgICAgICAgICBkICYmIChmID0gTWF0aC5yb3VuZChmICsgMC40OTkpKTsKICAgICAgICAgICAgICAgIGYgPSBNYXRoLnJvdW5kKGYpOwogICAgICAgICAgICAgICAgaWYgKGUuc2VtaUxvZykgdmFyIGcgPSBNYXRoLmxvZyh0aGlzLnZhbHVlRnJvbVBpeGVsKGUuYm90dG9tLCBhKSkgLyBNYXRoLkxOMTAsCiAgICAgICAgICAgICAgICBrID0gKGUubG9nSGlnaCAtIGUubG9nTG93KSAvIGY7CiAgICAgICAgICAgICAgICBhLnlBeGlzUGxvdHRlciA9IG5ldyBTVFguUGxvdHRlcjsKICAgICAgICAgICAgICAgIGEueUF4aXNQbG90dGVyLm5ld1NlcmllcygiZ3JpZCIsICJzdHJva2UiLCB0aGlzLmNhbnZhc1N0eWxlKCJzdHhfZ3JpZCIpKTsKICAgICAgICAgICAgICAgIHZhciBtID0gMDsKICAgICAgICAgICAgICAgIGQgJiYgKG0gPSBlLnByaWNlVGljayAtIE1hdGgucm91bmQoZS5sb3cgJSBlLnByaWNlVGljayAqIGEuY2hhcnQucm91bmRpdCkgLyBhLmNoYXJ0LnJvdW5kaXQpOwogICAgICAgICAgICAgICAgdGhpcy5nZXRDYW52YXNGb250U2l6ZSgic3R4X3lheGlzIik7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IGY7IGwrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBuOwogICAgICAgICAgICAgICAgICAgIG4gPSBlLnNlbWlMb2cgPyBNYXRoLnBvdygxMCwgZyArIGwgKiBrKSA6IGQgPyBlLmxvdyArIGwgKiBlLnByaWNlVGljayArIG0gOiBlLmhpZ2ggLSBsICogZS5wcmljZVRpY2sgKyBtOwogICAgICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5waXhlbEZyb21QcmljZShuLCBhKSwKICAgICAgICAgICAgICAgICAgICAgICAgcCA9IE1hdGgucm91bmQocikgKyAwLjU7CiAgICAgICAgICAgICAgICAgICAgZS5kaXNwbGF5R3JpZExpbmVzICYmIChhLnlBeGlzUGxvdHRlci5tb3ZlVG8oImdyaWQiLCAwLCBwKSwgYS55QXhpc1Bsb3R0ZXIubGluZVRvKCJncmlkIiwgdGhpcy5jaGFydC53aWR0aC03LCBwKSk7CiAgICAgICAgICAgICAgICAgICAgbiA9IGUucHJpY2VGb3JtYXR0ZXIgPyBlLnByaWNlRm9ybWF0dGVyKHRoaXMsIGEsIG4pIDogdGhpcy5mb3JtYXRZQXhpc1ByaWNlKG4sIGEpOwogICAgICAgICAgICAgICAgICAgIGEueUF4aXNQbG90dGVyLmFkZFRleHQobiwgdGhpcy5jaGFydC53aWR0aC01LCByKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2FudmFzRm9udCgic3R4X3lheGlzIik7CiAgICAgICAgICAgIHRoaXMuY2FudmFzQ29sb3IoInN0eF95YXhpcyIpOwogICAgICAgICAgICBkID0gdGhpcy5jaGFydC5jb250ZXh0OwogICAgICAgICAgICBkLnRleHRCYXNlbGluZSA9CiAgICAgICAgICAgICAgICAibWlkZGxlIjsKICAgICAgICAgICAgYS55QXhpc1Bsb3R0ZXIuZHJhdyhkKTsKICAgICAgICAgICAgZC50ZXh0QmFzZWxpbmUgPSAiYWxwaGFiZXRpYyIKICAgICAgICB9CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImRyYXdZQXhpcyIsIGFyZ3VtZW50cykKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmZvcm1hdFlBeGlzUHJpY2UgPSBmdW5jdGlvbiAoYSwgYikgewogICAgaWYgKCFhIHx8ICJ1bmRlZmluZWQiID09IHR5cGVvZiBhKSByZXR1cm4gIiI7CiAgICB2YXIgYyA9IGIueUF4aXMsCiAgICAgICAgZCA9IGMucHJpbnREZWNpbWFsUGxhY2VzOwogICAgbnVsbCA9PSBkICYmIChkID0gMC4wMSA+IGMucHJpY2VUaWNrID8gNCA6IDAuMSA+IGMucHJpY2VUaWNrID8gMyA6IDEgPj0gYy5wcmljZVRpY2sgPyAyIDogMCk7CiAgICByZXR1cm4gYi5uYW1lICE9IGIuY2hhcnQubmFtZSAmJiAoMUUzIDwgYSB8fCAtMUUzID4gYSkgPyBjb25kZW5zZUludChhKSA6IGEgPSB0aGlzLmludGVybmF0aW9uYWxpemVyID8gdGhpcy5pbnRlcm5hdGlvbmFsaXplci5wcmljZUZvcm1hdHRlcnNbZF0uZm9ybWF0KGEpIDogYS50b0ZpeGVkKGQpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5mb3JtYXRQcmljZSA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBpZiAoIWEgfHwgInVuZGVmaW5lZCIgPT0gdHlwZW9mIGEpIHJldHVybiAiIjsKICAgIGIgfHwgKGIgPSB0aGlzLmN1cnJlbnRQYW5lbCk7CiAgICB2YXIgYyA9IGIuZGVjaW1hbFBsYWNlczsKICAgIGMgfHwgMCA9PSBjIHx8IChjID0gYi5jaGFydC5kZWNpbWFsUGxhY2VzKTsKICAgIHJldHVybiBjIHx8IDAgPT0gYyA/IGEgPSB0aGlzLmludGVybmF0aW9uYWxpemVyID8gdGhpcy5pbnRlcm5hdGlvbmFsaXplci5wcmljZUZvcm1hdHRlcnNbY10uZm9ybWF0KGEpIDogYS50b0ZpeGVkKGMpIDogYQp9OwpTVFhDaGFydC5wcm90b3R5cGUuY3JlYXRlQ3Jvc3NoYWlycyA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucnVuUHJlcGVuZCgiY3JlYXRlQ3Jvc3NoYWlycyIsIGFyZ3VtZW50cykgfHwgdGhpcy5jb250cm9scy5jcm9zc1gub25tb3VzZWRvd24gfHwgKHRoaXMuY29udHJvbHMuY3Jvc3NZLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICBhIHx8IChhID0gZXZlbnQpOwogICAgICAgIGEucHJldmVudERlZmF1bHQgJiYgYS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHJldHVybiAhMQogICAgfSwgdGhpcy5jb250cm9scy5jcm9zc1gub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoYSkgewogICAgICAgIGEgfHwgKGEgPSBldmVudCk7CiAgICAgICAgYS5wcmV2ZW50RGVmYXVsdCAmJiBhLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgcmV0dXJuICExCiAgICB9LCB0aGlzLnJ1bkFwcGVuZCgiY3JlYXRlQ3Jvc3NoYWlycyIsIGFyZ3VtZW50cykpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jcmVhdGVWb2x1bWVDaGFydCA9IGZ1bmN0aW9uIChhKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgiY3JlYXRlVm9sdW1lQ2hhcnQiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgZm9yICh2YXIgYiA9IGEuZGF0YVNlZ21lbnQsIGMgPSB0aGlzLmNoYXJ0LmNvbnRleHQsIGQgPSBhLnZvbHVtZU1heCA9IDA7IGQgPD0gYS5tYXhUaWNrczsgZCsrKSB7CiAgICAgICAgICAgIHZhciBlID0gYltkXTsKICAgICAgICAgICAgbnVsbCAhPSBlICYmIGUuVm9sdW1lID4gYS52b2x1bWVNYXggJiYgKGEudm9sdW1lTWF4ID0gZS5Wb2x1bWUpCiAgICAgICAgfQogICAgICAgIGIgPSB0aGlzLnBhbmVscy52Y2hhcnQ7CiAgICAgICAgaWYgKG51bGwgIT0gYiAmJiAhMCAhPSBiLmhpZGRlbikgewogICAgICAgICAgICAwID09IGEudm9sdW1lTWF4ICYmIHRoaXMud2F0ZXJtYXJrKCJ2Y2hhcnQiLCAiY2VudGVyIiwgImJvdHRvbSIsIHRoaXMudHJhbnNsYXRlSWYoIlZvbHVtZSBOb3QgQXZhaWxhYmxlIikpOwogICAgICAgICAgICBkID0gdGhpcy5nZXRDYW52YXNGb250U2l6ZSgic3R4X3lheGlzIik7CiAgICAgICAgICAgIGIuaGVpZ2h0ID0gYi5ib3R0b20gLSBiLnRvcDsKICAgICAgICAgICAgYi5zaGFkb3cgPSBhLnZvbHVtZU1heDsKICAgICAgICAgICAgYi5taW4gPSAwOwogICAgICAgICAgICBiLm1heCA9IGEudm9sdW1lTWF4OwogICAgICAgICAgICB2YXIgZSA9IE1hdGgucm91bmQoYi5oZWlnaHQgLyAoMiAqIGQpKSwKICAgICAgICAgICAgICAgIGYgPSBiLmhlaWdodCAvIGU7CiAgICAgICAgICAgIGIubXVsdGlwbGllciA9IGEudm9sdW1lTWF4IC8gZTsKICAgICAgICAgICAgYy50ZXh0QmFzZWxpbmUgPSAibWlkZGxlIjsKICAgICAgICAgICAgZm9yIChkID0gMDsgZCA8IGU7IGQrKykgewogICAgICAgICAgICAgICAgdmFyIGcgPSBkICogZiwKICAgICAgICAgICAgICAgICAgICBrID0gY29uZGVuc2VJbnQoYi5taW4gKyBiLnNoYWRvdyAvIGIuaGVpZ2h0ICogZyk7CiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0ZvbnQoInN0eF95YXhpcyIpOwogICAgICAgICAgICAgICAgdGhpcy5jYW52YXNDb2xvcigic3R4X3lheGlzIik7CiAgICAgICAgICAgICAgICBjLmZpbGxUZXh0KGssIHRoaXMuY2hhcnQud2lkdGgsIGIuYm90dG9tIC0gZykKICAgICAgICAgICAgfQogICAgICAgICAgICBjLnRleHRCYXNlbGluZSA9ICJhbHBoYWJldGljIjsKICAgICAgICAgICAgdGhpcy5ydW5BcHBlbmQoImNyZWF0ZVZvbHVtZUNoYXJ0IiwgYXJndW1lbnRzKQogICAgICAgIH0KICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRldGVybWluZU1pbk1heCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBmb3IgKHZhciBjID0gLTJFOSwgZCA9IDJFOSwgZSA9IDA7IGUgPCBhLmxlbmd0aDsgZSsrKSB7CiAgICAgICAgdmFyIGYgPSBhW2VdOwogICAgICAgIGlmIChmKSB7CiAgICAgICAgICAgIGYudHJhbnNmb3JtICYmIChmID0gZi50cmFuc2Zvcm0pOwogICAgICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IGIubGVuZ3RoOyBnKyspIHsKICAgICAgICAgICAgICAgIHZhciBrID0gZltiW2ddXTsKICAgICAgICAgICAgICAgIGlmIChrIHx8IDAgPT0gaykgayA+IGMgJiYgKGMgPSBrKSwgayA8IGQgJiYgKGQgPSBrKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIFtkLCBjXQp9OwpTVFhDaGFydC5wcm90b3R5cGUuaW5pdGlhbGl6ZURpc3BsYXkgPSBmdW5jdGlvbiAoYSkgewogICAgaWYgKCF0aGlzLnJ1blByZXBlbmQoImluaXRpYWxpemVEaXNwbGF5IiwgYXJndW1lbnRzKSkgewogICAgICAgIHZhciBiID0gW10sCiAgICAgICAgICAgIGM7CiAgICAgICAgZm9yIChjIGluIGEuc2VyaWVzKSBhLnNlcmllc1tjXS5wYXJhbWV0ZXJzLnNoYXJlWUF4aXMgJiYgYi5wdXNoKGMpOwogICAgICAgIGEucGFuZWwgPSBwYW5lbCA9IHRoaXMucGFuZWxzW2EubmFtZV07CiAgICAgICAgYyA9IHBhbmVsLnlBeGlzOwogICAgICAgIHZhciBkID0gcGFuZWwuaGVpZ2h0LAogICAgICAgICAgICBlID0gbG93ID0gc2hhZG93ID0gbnVsbDsKICAgICAgICBjLmJvdHRvbSA9IHBhbmVsLmJvdHRvbSAtIHRoaXMueGF4aXNIZWlnaHQ7CiAgICAgICAgYy50b3AgPSBwYW5lbC50b3A7CiAgICAgICAgImxpbmUiID09IHRoaXMubGF5b3V0LmNoYXJ0VHlwZSA/IGIucHVzaCgiQ2xvc2UiKSA6IGIucHVzaCgiQ2xvc2UiLCAiSGlnaCIsICJMb3ciKTsKICAgICAgICB2YXIgYiA9IHRoaXMuZGV0ZXJtaW5lTWluTWF4KGEuZGF0YVNlZ21lbnQsIGIpLAogICAgICAgICAgICBmID0gTWF0aC5yb3VuZChNYXRoLmFicyhkIC8gNSkpOwogICAgICAgIGQgLSBNYXRoLmFicyhhLnZlcnRpY2FsU2Nyb2xsKSA8IGYgJiYgKGEudmVydGljYWxTY3JvbGwgPQogICAgICAgICAgICAoZCAtIGYpICogKDAgPiBhLnZlcnRpY2FsU2Nyb2xsID8gLTEgOiAxKSk7CiAgICAgICAgYS5sb3dWYWx1ZSA9IGJbMF07CiAgICAgICAgYS5oaWdoVmFsdWUgPSBiWzFdOwogICAgICAgIGIgPSAoYS5oaWdoVmFsdWUgLSBhLmxvd1ZhbHVlKSAvIGQ7CiAgICAgICAgMCA9PSBhLmhpZ2hWYWx1ZSAtIGEubG93VmFsdWUgPyAoZSA9IDIgKiBhLmhpZ2hWYWx1ZSwgbG93ID0gMCkgOiB0aGlzLmxheW91dC5zZW1pTG9nICYmIGUgPyAoYiA9IE1hdGgubG9nKGEubG93VmFsdWUpIC8gTWF0aC5MTjEwLCBlID0gTWF0aC5sb2coYS5oaWdoVmFsdWUpIC8gTWF0aC5MTjEwLCBkID0gKGUgLSBiKSAvIGQsIGIgKz0gYS52ZXJ0aWNhbFNjcm9sbCAqIGQsIGUgPSBNYXRoLnBvdygxMCwgZSArIGEudmVydGljYWxTY3JvbGwgKiBkKSwgbG93ID0gTWF0aC5wb3coMTAsIGIpKSA6IChlID0gYS5oaWdoVmFsdWUgKyBhLnZlcnRpY2FsU2Nyb2xsICogYiwgbG93ID0gYS5sb3dWYWx1ZSArIGEudmVydGljYWxTY3JvbGwgKiBiKTsKICAgICAgICBlICs9IChlIC0gbG93KSAqIGEuem9vbTsKICAgICAgICBsb3cgLT0gKGUgLSBsb3cpICogYS56b29tOwogICAgICAgIHNoYWRvdyA9IGUgLSBsb3c7CiAgICAgICAgYy5oaWdoID0gZTsKICAgICAgICBjLmxvdyA9IGxvdzsKICAgICAgICBjLnNoYWRvdyA9IHNoYWRvdzsKICAgICAgICBjLnNlbWlMb2cgIT0gdGhpcy5sYXlvdXQuc2VtaUxvZyAmJgogICAgICAgICAgICAodGhpcy5jbGVhclBpeGVsQ2FjaGUoKSwgYy5zZW1pTG9nID0gdGhpcy5sYXlvdXQuc2VtaUxvZyk7CiAgICAgICAgdGhpcy5jcmVhdGVZQXhpcyhwYW5lbCk7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImluaXRpYWxpemVEaXNwbGF5IiwgYXJndW1lbnRzKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuY29tcHV0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgICJ1bmRlZmluZWQiID09IHR5cGVvZiBiICYmIChiID0gMCk7CiAgICByZXR1cm4gYSAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoICsgYgp9OwpTVFhDaGFydC5wcm90b3R5cGUuY29tcHV0ZUNvbG9yID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBhIDwgYiA/ICJzdHhfY2FuZGxlX3VwIiA6IGEgPiBiID8gInN0eF9jYW5kbGVfZG93biIgOiAic3R4X2NhbmRsZV9zaGFkb3ciCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jb21wdXRlTGVuZ3RoID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHZhciBjID0gdGhpcy5waXhlbEZyb21QcmljZShhKTsKICAgIHJldHVybiB0aGlzLnBpeGVsRnJvbVByaWNlKGIpIC0gYwp9OwpTVFhDaGFydC5wcm90b3R5cGUudm9sVW5kZXJsYXkgPSBmdW5jdGlvbiAoYSkgewogICAgaWYgKDAgIT0gYS52b2x1bWVNYXgpIHsKICAgICAgICB2YXIgYiA9IGEuZGF0YVNlZ21lbnQsCiAgICAgICAgICAgIGMgPSB0aGlzLmNoYXJ0LmNvbnRleHQsCiAgICAgICAgICAgIGIgPSBhLnBhbmVsLAogICAgICAgICAgICBkID0gYi55QXhpcy5ib3R0b20sCiAgICAgICAgICAgIGUgPSAwLjI1ICogKGQgLSBiLnlBeGlzLnRvcCksCiAgICAgICAgICAgIGIgPSBhLmRhdGFTZWdtZW50OwogICAgICAgIHRoaXMuY2FudmFzQ29sb3IoInN0eF92b2x1bWVfdW5kZXJsYXkiKTsKICAgICAgICBTVFguaXNJRTggJiYgKGMuZ2xvYmFsQWxwaGEgPSAwLjIpOwogICAgICAgIGMuYmVnaW5QYXRoKCk7CiAgICAgICAgZm9yICh2YXIgZiA9IDA7IGYgPD0gYi5sZW5ndGg7IGYrKykgewogICAgICAgICAgICB2YXIgZyA9IGJbZl07CiAgICAgICAgICAgIGlmIChudWxsICE9IGcpIHsKICAgICAgICAgICAgICAgIHZhciBnID0gZCAtIGUgKyAoZSAtIGUgLyBhLnZvbHVtZU1heCAqIGcuVm9sdW1lKSwKICAgICAgICAgICAgICAgICAgICBrID0gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggLSAyOwogICAgICAgICAgICAgICAgMiA+IGsgJiYgKGsgPSAxKTsKICAgICAgICAgICAgICAgIHZhciBtID0gdGhpcy5jb21wdXRlUG9zaXRpb24oZiwgMSksCiAgICAgICAgICAgICAgICAgICAgayA9IG0gKyBrOwogICAgICAgICAgICAgICAgYy5tb3ZlVG8obSwgZyk7CiAgICAgICAgICAgICAgICBjLmxpbmVUbyhrLCBnKTsKICAgICAgICAgICAgICAgIGMubGluZVRvKGssIGQpOwogICAgICAgICAgICAgICAgYy5saW5lVG8obSwgZCk7CiAgICAgICAgICAgICAgICBjLmxpbmVUbyhtLCBnKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGMuZmlsbCgpOwogICAgICAgIGMuY2xvc2VQYXRoKCk7CiAgICAgICAgYy5nbG9iYWxBbHBoYSA9IDEKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnZvbGJhciA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBpZiAoMCAhPSB0aGlzLmNoYXJ0LnZvbHVtZU1heCkgewogICAgICAgIHZhciBjID0gdGhpcy5wYW5lbHMudmNoYXJ0OwogICAgICAgIGlmIChudWxsICE9IGMgJiYgITAgIT0gYy5oaWRkZW4pIHsKICAgICAgICAgICAgdmFyIGQgPSBjLnRvcCArIChjLmhlaWdodCAtIGMuaGVpZ2h0IC8gdGhpcy5jaGFydC52b2x1bWVNYXggKiBiLlZvbHVtZSksCiAgICAgICAgICAgICAgICBlID0gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggLSAyOwogICAgICAgICAgICAyID4gZSAmJiAoZSA9IDEpOwogICAgICAgICAgICB2YXIgZiA9IHRoaXMuY29tcHV0ZVBvc2l0aW9uKGEsIDEpLAogICAgICAgICAgICAgICAgZSA9IGYgKyBlOwogICAgICAgICAgICB0aGlzLmNoYXJ0LmNvbnRleHQubW92ZVRvKGYsIGQpOwogICAgICAgICAgICB0aGlzLmNoYXJ0LmNvbnRleHQubGluZVRvKGUsIGQpOwogICAgICAgICAgICB0aGlzLmNoYXJ0LmNvbnRleHQubGluZVRvKGUsIGMuYm90dG9tKTsKICAgICAgICAgICAgdGhpcy5jaGFydC5jb250ZXh0LmxpbmVUbyhmLCBjLmJvdHRvbSk7CiAgICAgICAgICAgIHRoaXMuY2hhcnQuY29udGV4dC5saW5lVG8oZiwgZCkKICAgICAgICB9CiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5zdGFydENsaXAgPSBmdW5jdGlvbiAoYSkgewogICAgYSB8fCAoYSA9ICJjaGFydCIpOwogICAgYSA9IHRoaXMucGFuZWxzW2FdOwogICAgdGhpcy5jaGFydC5jb250ZXh0LnNhdmUoKTsKICAgIHRoaXMuY2hhcnQuY29udGV4dC5iZWdpblBhdGgoKTsKICAgIHRoaXMuY2hhcnQuY29udGV4dC5yZWN0KDAsIGEudG9wLCB0aGlzLmNoYXJ0LndpZHRoLCBhLmJvdHRvbSAtIGEudG9wKTsKICAgIHRoaXMuY2hhcnQuY29udGV4dC5jbGlwKCkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmVuZENsaXAgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNoYXJ0LmNvbnRleHQucmVzdG9yZSgpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5kcmF3Q2FuZGxlcyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7CiAgICB2YXIgZSA9IGEuZGF0YVNlZ21lbnQsCiAgICAgICAgZiA9IHRoaXMuY2hhcnQuY29udGV4dCwKICAgICAgICBnID0gYS5wYW5lbCwKICAgICAgICBrID0gZy55QXhpcy50b3AsCiAgICAgICAgbSA9IGcueUF4aXMuYm90dG9tLAogICAgICAgIGwsIG4sIHIsIHAgPSAwOwogICAgU1RYLmlzVHJhbnNwYXJlbnQoYykgfHwgKHAgPSAwLjUpOwogICAgYSA9IGEuZGF0YVNldC5sZW5ndGggLSBhLnNjcm9sbDsKICAgIGYuYmVnaW5QYXRoKCk7CiAgICBmLmZpbGxTdHlsZSA9IGI7CiAgICBmb3IgKGIgPSAwOyBiIDw9IGUubGVuZ3RoOyBiKyspIHsKICAgICAgICB2YXIgcyA9IGVbYl07CiAgICAgICAgaWYgKG51bGwgIT0gcykgewogICAgICAgICAgICAwIDwgYiAmJiAociA9IGVbYiAtIDFdKTsKICAgICAgICAgICAgaWYgKDAgPT0gYiB8fCBudWxsID09IHIpIHIgPSBzOwogICAgICAgICAgICBpZiAoIShzLnByb2plY3Rpb24gfHwgcy5PcGVuID09IHMuQ2xvc2UgfHwgZCAmIFNUWENoYXJ0LkNBTkRMRVVQICYmIHMuT3BlbiA+PSBzLkNsb3NlIHx8IGQgJiBTVFhDaGFydC5DQU5ETEVET1dOICYmIHMuT3BlbiA8PSBzLkNsb3NlIHx8IGQgJiBTVFhDaGFydC5DTE9TRVVQICYmIHMuQ2xvc2UgPD0gci5DbG9zZSB8fCBkICYgU1RYQ2hhcnQuQ0xPU0VET1dOICYmIHMuQ2xvc2UgPj0gci5DbG9zZSkpIHsKICAgICAgICAgICAgICAgIHMudHJhbnNmb3JtICYmCiAgICAgICAgICAgICAgICAgICAgKHMgPSBzLnRyYW5zZm9ybSk7CiAgICAgICAgICAgICAgICB2YXIgdCA9IHMuY2FjaGU7CiAgICAgICAgICAgICAgICBsID0gYSArIGI7CiAgICAgICAgICAgICAgICBpZiAobCA8IGcuY2FjaGVMZWZ0IHx8IGwgPiBnLmNhY2hlUmlnaHQgfHwgIXQub3BlbikgewogICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLnBpeGVsRnJvbVByaWNlKHMuT3BlbiwgZyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHEgPSB0aGlzLnBpeGVsRnJvbVByaWNlKHMuQ2xvc2UsIGcpOwogICAgICAgICAgICAgICAgICAgIGwgPSBNYXRoLmZsb29yKE1hdGgubWluKG4sIHEpKTsKICAgICAgICAgICAgICAgICAgICBuID0gTWF0aC5tYXgobiwgcSk7CiAgICAgICAgICAgICAgICAgICAgbiA9IE1hdGguZmxvb3IobiAtIGwpOwogICAgICAgICAgICAgICAgICAgIGlmIChsIDwgaykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobCArIG4gPCBrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm9wZW4gPSBsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jbG9zZSA9IGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG4gLT0gayAtIGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBrCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGwgKyBuID4gbSAmJiAobiAtPSBsICsgbiAtIG0pOwogICAgICAgICAgICAgICAgICAgIG4gPSBNYXRoLm1heChuLCAyKTsKICAgICAgICAgICAgICAgICAgICB0Lm9wZW4gPSBsOwogICAgICAgICAgICAgICAgICAgIHQuY2xvc2UgPSB0Lm9wZW4gKyBuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0Lm9wZW4gPj0gbSB8fCB0LmJvdHRvbSA8PSBrIHx8IChuID0gTWF0aC5mbG9vcihiICogdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGgpICsgcCwgcSA9IG4gKyB0aGlzLnRtcFdpZHRoLCBzLk9wZW4gPT0gcy5DbG9zZSA/IChsID0gTWF0aC5yb3VuZCh0Lm9wZW4pICsgMC41LCBmLm1vdmVUbyhuLCBsKSwgZi5saW5lVG8ocSwgbCkpIDogKGYubW92ZVRvKG4sIHQub3BlbiksCiAgICAgICAgICAgICAgICAgICAgZi5saW5lVG8ocSArIDAuMDEsIHQub3BlbiksIGYubGluZVRvKHEsIHQuY2xvc2UpLCBmLmxpbmVUbyhuLCB0LmNsb3NlKSwgZi5saW5lVG8obiwgdC5vcGVuKSkpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBmLmZpbGwoKTsKICAgIHAgJiYgKGYubGluZVdpZHRoID0gMSwgZi5zdHJva2VTdHlsZSA9IGMsIGYuc3Ryb2tlKCkpOwogICAgZi5jbG9zZVBhdGgoKTsKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRyYXdTaGFkb3dzID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIHZhciBkID0gYS5kYXRhU2VnbWVudCwKICAgICAgICBlID0gdGhpcy5jaGFydC5jb250ZXh0LAogICAgICAgIGYgPSBhLnBhbmVsOwogICAgZS5saW5lV2lkdGggPSAxOwogICAgdmFyIGcgPSBmLnlBeGlzLnRvcCwKICAgICAgICBrID0gZi55QXhpcy5ib3R0b20sCiAgICAgICAgbSwgbCwgbiwgciA9IGEuZGF0YVNldC5sZW5ndGggLSBhLnNjcm9sbDsKICAgIGUuYmVnaW5QYXRoKCk7CiAgICBmb3IgKHZhciBwID0gMDsgcCA8PSBkLmxlbmd0aDsgcCsrKSB7CiAgICAgICAgdmFyIHMgPSBkW3BdOwogICAgICAgIGlmIChudWxsICE9IHMgJiYgIXMucHJvamVjdGlvbikgewogICAgICAgICAgICAwIDwgcCAmJiAobSA9IGRbcCAtIDFdKTsKICAgICAgICAgICAgaWYgKDAgPT0gcCB8fCBudWxsID09IG0pIG0gPSBzOwogICAgICAgICAgICBpZiAoYykKICAgICAgICAgICAgICAgIGlmIChjICYgU1RYQ2hhcnQuQ0xPU0VVUCAmJiBzLkNsb3NlIDw9IG0uQ2xvc2UpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgZWxzZSBpZiAoYyAmIFNUWENoYXJ0LkNMT1NFRE9XTiAmJiBzLkNsb3NlID49IG0uQ2xvc2UpIGNvbnRpbnVlOwogICAgICAgICAgICBlbHNlIGlmIChjICYgU1RYQ2hhcnQuQ0xPU0VFVkVOICYmIHMuQ2xvc2UgIT0gbS5DbG9zZSkgY29udGludWU7CiAgICAgICAgICAgIHMudHJhbnNmb3JtICYmIChzID0gcy50cmFuc2Zvcm0pOwogICAgICAgICAgICB2YXIgdCA9IHMuY2FjaGU7CiAgICAgICAgICAgIGwgPSByICsgcDsKICAgICAgICAgICAgaWYgKGwgPCBmLmNhY2hlTGVmdCB8fCBsID4gZi5jYWNoZVJpZ2h0IHx8ICF0LnRvcCkgewogICAgICAgICAgICAgICAgbCA9IHRoaXMucGl4ZWxGcm9tUHJpY2Uocy5IaWdoLCBmKTsKICAgICAgICAgICAgICAgIG4gPSB0aGlzLnBpeGVsRnJvbVByaWNlKHMuTG93LCBmKTsKICAgICAgICAgICAgICAgIGxlbmd0aCA9IG4gLSBsOwogICAgICAgICAgICAgICAgaWYgKGwgPCBnKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGwgKyBsZW5ndGggPCBnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHQudG9wID0gbDsKICAgICAgICAgICAgICAgICAgICAgICAgdC5ib3R0b20gPSBsOwogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsZW5ndGggLT0gZyAtIGw7CiAgICAgICAgICAgICAgICAgICAgbCA9IGcKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGwgKyBsZW5ndGggPiBrICYmIChsZW5ndGggLT0gbCArIGxlbmd0aCAtIGspOwogICAgICAgICAgICAgICAgdC50b3AgPSBsOwogICAgICAgICAgICAgICAgdC5ib3R0b20gPSB0LnRvcCArIGxlbmd0aAogICAgICAgICAgICB9CiAgICAgICAgICAgIHQudG9wID49IGsgfHwgdC5ib3R0b20gPD0gZyB8fCAobCA9IE1hdGguZmxvb3IocCAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoICsgdGhpcy5vZmZzZXQpICsgMC41LCBlLm1vdmVUbyhsLCB0LnRvcCksIGUubGluZVRvKGwsIHQuYm90dG9tKSwgcy5PcGVuID09IHMuQ2xvc2UgJiYgKHQgPSBsIC0gdGhpcy5vZmZzZXQsIGwgKz0gdGhpcy5vZmZzZXQsIHMgPSB0aGlzLnBpeGVsRnJvbVByaWNlKHMuT3BlbiwgYS5wYW5lbCksIGUubW92ZVRvKHQsIHMpLCBlLmxpbmVUbyhsLCBzKSkpCiAgICAgICAgfQogICAgfQogICAgdGhpcy5jYW52YXNDb2xvcihiKTsKICAgIGUuc3Ryb2tlKCk7CiAgICBlLmNsb3NlUGF0aCgpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5zY2F0dGVyID0gZnVuY3Rpb24gKGEpIHsKICAgIHZhciBiID0gYS5kYXRhU2VnbWVudCwKICAgICAgICBjID0gdGhpcy5jaGFydC5jb250ZXh0OwogICAgYy5iZWdpblBhdGgoKTsKICAgIGMubGluZVdpZHRoID0gNDsKICAgIGZvciAodmFyIGQgPSBhLnBhbmVsLnlBeGlzLnRvcCwgZSA9IGEucGFuZWwueUF4aXMuYm90dG9tLCBmID0gMDsgZiA8PSBiLmxlbmd0aDsgZisrKSB7CiAgICAgICAgdmFyIGcgPSBiW2ZdOwogICAgICAgIGlmIChudWxsICE9IGcgJiYgIWcucHJvamVjdGlvbikgewogICAgICAgICAgICBnLnRyYW5zZm9ybSAmJiAoZyA9IGcudHJhbnNmb3JtKTsKICAgICAgICAgICAgdmFyIGsgPSBbZy5DbG9zZV07CiAgICAgICAgICAgICJTY2F0dGVyIiBpbiBnICYmIChrID0gZy5TY2F0dGVyKTsKICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IGsubGVuZ3RoOyBnKyspIHsKICAgICAgICAgICAgICAgIHZhciBtID0gdGhpcy5waXhlbEZyb21QcmljZShrW2ddLCBhLnBhbmVsKTsKICAgICAgICAgICAgICAgIGlmICghKG0gPCBkIHx8IG0gPiBlKSkgewogICAgICAgICAgICAgICAgICAgIHZhciBsID0gZiAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoICsgdGhpcy5vZmZzZXQ7CiAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8obCAtIDIsIG0pOwogICAgICAgICAgICAgICAgICAgIGMubGluZVRvKGwgKyAyLCBtKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgdGhpcy5jYW52YXNDb2xvcigic3R4X3NjYXR0ZXJfY2hhcnQiKTsKICAgIGMuc3Ryb2tlKCk7CiAgICBjLmNsb3NlUGF0aCgpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5kcmF3QmFyQ2hhcnQgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgdmFyIGQgPSBhLmRhdGFTZWdtZW50LAogICAgICAgIGUgPSBhLnBhbmVsLAogICAgICAgIGYgPSBhLmNvbnRleHQ7CiAgICBmLmJlZ2luUGF0aCgpOwogICAgZi5saW5lV2lkdGggPSAxOwogICAgdmFyIGcgPSBlLnlBeGlzLnRvcCwKICAgICAgICBrID0gZS55QXhpcy5ib3R0b20sCiAgICAgICAgbSwgbDsKICAgIGEgPSBhLmRhdGFTZXQubGVuZ3RoIC0gYS5zY3JvbGw7CiAgICBmb3IgKHZhciBuLCByID0gMDsgciA8PSBkLmxlbmd0aDsgcisrKSB7CiAgICAgICAgdmFyIHAgPSBkW3JdOwogICAgICAgIGlmIChudWxsICE9IHApIHsKICAgICAgICAgICAgaWYgKHAucHJvamVjdGlvbikgYnJlYWs7CiAgICAgICAgICAgIDAgPCByICYmIChuID0gZFtyIC0gMV0pOwogICAgICAgICAgICBpZiAoMCA9PSByIHx8IG51bGwgPT0gbikgbiA9IHA7CiAgICAgICAgICAgIGlmIChjKQogICAgICAgICAgICAgICAgaWYgKGMgJiBTVFhDaGFydC5DTE9TRVVQICYmIHAuQ2xvc2UgPD0gbi5DbG9zZSkgY29udGludWU7CiAgICAgICAgICAgICAgICBlbHNlIGlmIChjICYgU1RYQ2hhcnQuQ0xPU0VET1dOICYmIHAuQ2xvc2UgPj0gbi5DbG9zZSkgY29udGludWU7CiAgICAgICAgICAgIGVsc2UgaWYgKGMgJiBTVFhDaGFydC5DTE9TRUVWRU4gJiYgcC5DbG9zZSAhPSBuLkNsb3NlKSBjb250aW51ZTsKICAgICAgICAgICAgcC50cmFuc2Zvcm0gJiYgKHAgPSBwLnRyYW5zZm9ybSk7CiAgICAgICAgICAgIHZhciBzID0gcC5jYWNoZTsKICAgICAgICAgICAgbSA9IGEgKyByOwogICAgICAgICAgICBpZiAobSA8IGUuY2FjaGVMZWZ0IHx8IG0gPiBlLmNhY2hlUmlnaHQgfHwgIXMudG9wKSB7CiAgICAgICAgICAgICAgICBtID0gdGhpcy5waXhlbEZyb21QcmljZShwLkhpZ2gsIGUpOwogICAgICAgICAgICAgICAgbCA9IHRoaXMucGl4ZWxGcm9tUHJpY2UocC5Mb3csIGUpOwogICAgICAgICAgICAgICAgbCAtPSBtOwogICAgICAgICAgICAgICAgcy5vcGVuID0gdGhpcy5waXhlbEZyb21QcmljZShwLk9wZW4sIGUpOwogICAgICAgICAgICAgICAgcy5jbG9zZSA9IHRoaXMucGl4ZWxGcm9tUHJpY2UocC5DbG9zZSwgZSk7CiAgICAgICAgICAgICAgICBpZiAobSA8IGcpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobSArIGwgPCBnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHMudG9wID0gbTsKICAgICAgICAgICAgICAgICAgICAgICAgcy5ib3R0b20gPSBtOwogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsIC09IGcgLSBtOwogICAgICAgICAgICAgICAgICAgIG0gPSBnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBtICsgbCA+IGsgJiYgKGwgLT0gbSArIGwgLSBrKTsKICAgICAgICAgICAgICAgIHMudG9wID0gbTsKICAgICAgICAgICAgICAgIHMuYm90dG9tID0gbSArIGwKICAgICAgICAgICAgfQogICAgICAgICAgICBwID0gciAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoOwogICAgICAgICAgICBtID0gcCArIHRoaXMub2Zmc2V0OwogICAgICAgICAgICBzLnRvcCA8IGsgJiYgcy5ib3R0b20gPiBnICYmIChsID0gTWF0aC5yb3VuZChtKSArIDAuNSwgZi5tb3ZlVG8obCwgcy50b3ApLCBmLmxpbmVUbyhsLCBzLmJvdHRvbSkpOwogICAgICAgICAgICBzLm9wZW4gPiBnICYmIHMub3BlbiA8IGsgJiYgKGYubW92ZVRvKHAsIHMub3BlbiksIGYubGluZVRvKG0sIHMub3BlbikpOwogICAgICAgICAgICBzLmNsb3NlID4gZyAmJiBzLmNsb3NlIDwgayAmJiAoZi5tb3ZlVG8obSwKICAgICAgICAgICAgICAgIHMuY2xvc2UpLCBmLmxpbmVUbyhtICsgdGhpcy5vZmZzZXQsIHMuY2xvc2UpKQogICAgICAgIH0KICAgIH0KICAgIHRoaXMuY2FudmFzQ29sb3IoYik7CiAgICBmLnN0cm9rZSgpOwogICAgZi5jbG9zZVBhdGgoKQp9OwpTVFhDaGFydC5wcm90b3R5cGUucGxvdExpbmVDaGFydCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7CiAgICB2YXIgZSA9ICExLAogICAgICAgIGYgPSAhMTsKICAgIGQgJiYgKGUgPSBkLnNraXBQcm9qZWN0aW9ucywgZiA9IGQuc2tpcFRyYW5zZm9ybSk7CiAgICB2YXIgZyA9IGEuY2hhcnQsCiAgICAgICAgayA9IHRoaXMuY2hhcnQuY29udGV4dDsKICAgIGsuYmVnaW5QYXRoKCk7CiAgICBmb3IgKHZhciBtID0gITAsIGwgPSAhMSwgbiA9IGEueUF4aXMsIHIgPSBuLnRvcCwgcCA9IG4uYm90dG9tLCBnID0gZy5kYXRhU2V0Lmxlbmd0aCAtIGcuc2Nyb2xsLCBzID0gbnVsbCwgdCA9IDA7IHQgPD0gYi5sZW5ndGg7IHQrKykgewogICAgICAgIHZhciBxID0gYlt0XTsKICAgICAgICBpZiAobnVsbCAhPSBxKSB7CiAgICAgICAgICAgIGlmIChlICYmIHEucHJvamVjdGlvbikgYnJlYWs7CiAgICAgICAgICAgICFmICYmIHEudHJhbnNmb3JtICYmIChxID0gcS50cmFuc2Zvcm0pOwogICAgICAgICAgICB2YXIgeSA9IHEuY2FjaGUsCiAgICAgICAgICAgICAgICB2ID0gZyArIHQ7CiAgICAgICAgICAgIGlmIChxW2NdIHx8IDAgPT0gcVtjXSkgewogICAgICAgICAgICAgICAgcyA9IHFbY107CiAgICAgICAgICAgICAgICBpZiAodiA8IGEuY2FjaGVMZWZ0IHx8IHYgPiBhLmNhY2hlUmlnaHQgfHwgIXlbY10pIHlbY10gPSB0aGlzLnBpeGVsRnJvbVByaWNlKHMsIGEpOwogICAgICAgICAgICAgICAgdmFyIHEgPSB0ICogdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggKyB0aGlzLm9mZnNldCwKICAgICAgICAgICAgICAgICAgICB3ID0KICAgICAgICAgICAgICAgICAgICAgICAgeVtjXTsKICAgICAgICAgICAgICAgIGlmICh3IDwgcikgewogICAgICAgICAgICAgICAgICAgIHcgPSByOwogICAgICAgICAgICAgICAgICAgIGlmIChsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGsubW92ZVRvKHEsIHcpOwogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsID0gITAKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodyA+IHApIHsKICAgICAgICAgICAgICAgICAgICB3ID0gcDsKICAgICAgICAgICAgICAgICAgICBpZiAobCkgewogICAgICAgICAgICAgICAgICAgICAgICBrLm1vdmVUbyhxLCB3KTsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbCA9ICEwCiAgICAgICAgICAgICAgICB9IGVsc2UgbCA9ICExOwogICAgICAgICAgICAgICAgbSA/IChtID0gITEsIGsubW92ZVRvKHEsIHcpKSA6IGsubGluZVRvKHEsIHcpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBrLnN0cm9rZSgpOwogICAgay5jbG9zZVBhdGgoKTsKICAgIAogICAgCgp9OwpTVFhDaGFydC5wcm90b3R5cGUucGxvdE1vdW50YWluQ2hhcnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgewogICAgdmFyIGUgPSAhMSwKICAgICAgICBmID0gITE7CiAgICBkICYmIChlID0gZC5za2lwUHJvamVjdGlvbnMsIGYgPSBkLnNraXBUcmFuc2Zvcm0pOwogICAgdmFyIGcgPSBhLmNoYXJ0OwogICAgZCA9IHRoaXMuY2hhcnQuY29udGV4dDsKICAgIGQuYmVnaW5QYXRoKCk7CiAgICBmb3IgKHZhciBrID0gITAsIG0gPSAhMSwgbCA9IGEueUF4aXMudG9wLCBuID0gYS55QXhpcy5ib3R0b20sIGcgPSBnLmRhdGFTZXQubGVuZ3RoIC0gZy5zY3JvbGwsIHIgPSBudWxsLCBwID0gbnVsbCwgcyA9IDA7IHMgPD0gYi5sZW5ndGg7IHMrKykgewogICAgICAgIHZhciB0ID0gYltzXTsKICAgICAgICBpZiAobnVsbCAhPSB0KSB7CiAgICAgICAgICAgIGlmIChlICYmIHQucHJvamVjdGlvbikgYnJlYWs7CiAgICAgICAgICAgICFmICYmIHQudHJhbnNmb3JtICYmICh0ID0gdC50cmFuc2Zvcm0pOwogICAgICAgICAgICB2YXIgcSA9IHQuY2FjaGUsCiAgICAgICAgICAgICAgICB5ID0gZyArIHM7CiAgICAgICAgICAgIGlmICh5IDwgYS5jYWNoZUxlZnQgfHwgeSA+IGEuY2FjaGVSaWdodCB8fCAhcVtjXSkgewogICAgICAgICAgICAgICAgaWYgKCF0W2NdICYmIDAgIT0gdFtjXSkgY29udGludWU7CiAgICAgICAgICAgICAgICBxW2NdID0gdGhpcy5waXhlbEZyb21QcmljZSh0W2NdLCBhKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB2ID0gcyAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoICsKICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0OwogICAgICAgICAgICBudWxsID09IHIgJiYgKHIgPSB2KTsKICAgICAgICAgICAgdCA9IHFbY107CiAgICAgICAgICAgIG51bGwgPT0gcCAmJiAocCA9IHQpOwogICAgICAgICAgICBpZiAodCA8IGwpIHsKICAgICAgICAgICAgICAgIHQgPSBsOwogICAgICAgICAgICAgICAgaWYgKG0pIHsKICAgICAgICAgICAgICAgICAgICBkLmxpbmVUbyh2LCB0KTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbSA9ICEwCiAgICAgICAgICAgIH0gZWxzZSBpZiAodCA+IG4pIHsKICAgICAgICAgICAgICAgIHQgPSBuOwogICAgICAgICAgICAgICAgaWYgKG0pIHsKICAgICAgICAgICAgICAgICAgICBkLmxpbmVUbyh2LCB0KTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbSA9ICEwCiAgICAgICAgICAgIH0gZWxzZSBtID0gITE7CiAgICAgICAgICAgIGsgPyAoayA9ICExLCBkLm1vdmVUbyh2LCB0KSkgOiBkLmxpbmVUbyh2LCB0KQogICAgICAgIH0KICAgIH0KICAgIGQubGluZVRvKHYsIG4pOwogICAgZC5saW5lVG8ociwgbik7CiAgICBwID4gbiAmJiAocCA9IG4pOwogICAgZC5saW5lVG8ociwgcCk7CiAgICBkLmZpbGwoKTsKICAgIGQuY2xvc2VQYXRoKCkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRyYXdMaW5lQ2hhcnQgPSBmdW5jdGlvbiAoYSkgewogICAgdmFyIGIgPSB0aGlzLmNoYXJ0LmNvbnRleHQsCiAgICAgICAgYyA9IHRoaXMuY2FudmFzU3R5bGUoInN0eF9saW5lX2NoYXJ0Iik7CiAgICBjLndpZHRoICYmIChiLmxpbmVXaWR0aCA9IHN0cmlwUFgoYy53aWR0aCkpOwogICAgdGhpcy5jYW52YXNDb2xvcigic3R4X2xpbmVfY2hhcnQiKTsKICAgIHRoaXMucGxvdExpbmVDaGFydChhLnBhbmVsLCBhLmRhdGFTZWdtZW50LCAiQ2xvc2UiLCB7CiAgICAgICAgc2tpcFByb2plY3Rpb25zOiAhMAogICAgfSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRyYXdNb3VudGFpbkNoYXJ0ID0gZnVuY3Rpb24gKGEpIHsKICAgIHZhciBiID0gdGhpcy5jaGFydC5jb250ZXh0LAogICAgICAgIGMgPSB0aGlzLmNhbnZhc1N0eWxlKCJzdHhfbW91bnRhaW5fY2hhcnQiKTsKICAgIGMud2lkdGggJiYgKGIubGluZVdpZHRoID0gc3RyaXBQWChjLndpZHRoKSk7CiAgICB2YXIgZCA9IHRoaXMuY2hhcnQucGFuZWwsCiAgICAgICAgZSA9IHRoaXMucGl4ZWxGcm9tUHJpY2UodGhpcy5jaGFydC5oaWdoVmFsdWUsIGQpLAogICAgICAgIGYgPSBjLmJhY2tncm91bmRDb2xvciwKICAgICAgICBnID0gYy5jb2xvcjsKICAgIGcgJiYgInRyYW5zcGFyZW50IiAhPSBnID8gKGUgPSBiLmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIGUsIDAsIGQueUF4aXMuYm90dG9tKSwgZS5hZGRDb2xvclN0b3AoMCwgZiksIGUuYWRkQ29sb3JTdG9wKDEsIGcpLCBiLmZpbGxTdHlsZSA9IGUpIDogYi5maWxsU3R5bGUgPSBmOwogICAgdGhpcy5wbG90TW91bnRhaW5DaGFydChkLCBhLmRhdGFTZWdtZW50LCAiQ2xvc2UiLCB7CiAgICAgICAgc2tpcFByb2plY3Rpb25zOiAhMAogICAgfSk7CiAgICAoYyA9IGMuYm9yZGVyVG9wQ29sb3IpICYmICJ0cmFuc3BhcmVudCIgIT0gYyAmJiAoYi5zdHJva2VTdHlsZSA9CiAgICAgICAgYywgdGhpcy5wbG90TGluZUNoYXJ0KGQsIGEuZGF0YVNlZ21lbnQsICJDbG9zZSIsIHsKICAgICAgICAgICAgc2tpcFByb2plY3Rpb25zOiAhMAogICAgICAgIH0pKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZHJhd1dhdmVDaGFydCA9IGZ1bmN0aW9uIChhKSB7CiAgICB2YXIgYiA9IGEuZGF0YVNlZ21lbnQsCiAgICAgICAgYyA9IGEucGFuZWw7CiAgICBhID0gdGhpcy5jaGFydC5jb250ZXh0OwogICAgYS5iZWdpblBhdGgoKTsKICAgIGZvciAodmFyIGQgPSAhMSwgZSA9ICExLCBmID0gYy55QXhpcy50b3AsIGcgPSBjLnlBeGlzLmJvdHRvbSwgayA9IDA7IGsgPD0gYi5sZW5ndGg7IGsrKykgewogICAgICAgIHZhciBtID0gYltrXTsKICAgICAgICBpZiAobnVsbCAhPSBtKSB7CiAgICAgICAgICAgIGlmIChtLnByb2plY3Rpb24pIGJyZWFrOwogICAgICAgICAgICBtLnRyYW5zZm9ybSAmJiAobSA9IG0udHJhbnNmb3JtKTsKICAgICAgICAgICAgdmFyIGwgPSBrICogdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggKyB0aGlzLm9mZnNldCwKICAgICAgICAgICAgICAgIG4gPSB0aGlzLnBpeGVsRnJvbVByaWNlKG0uT3BlbiwgYyk7CiAgICAgICAgICAgIGlmIChuIDwgZikgewogICAgICAgICAgICAgICAgbiA9IGY7CiAgICAgICAgICAgICAgICBpZiAoZSkgewogICAgICAgICAgICAgICAgICAgIGEubW92ZVRvKGwsIG4pOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlID0gITAKICAgICAgICAgICAgfSBlbHNlIGlmIChuID4gZykgewogICAgICAgICAgICAgICAgbiA9IGc7CiAgICAgICAgICAgICAgICBpZiAoZSkgewogICAgICAgICAgICAgICAgICAgIGEubW92ZVRvKGwsIG4pOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlID0gITAKICAgICAgICAgICAgfSBlbHNlIGUgPSAhMTsKICAgICAgICAgICAgZCA/IGEubGluZVRvKGwsIG4pIDogKGQgPSAhMCwgYS5tb3ZlVG8obCwgbikpOwogICAgICAgICAgICBsICs9IHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC8KICAgICAgICAgICAgICAgIDQ7CiAgICAgICAgICAgIG0uT3BlbiA8IG0uQ2xvc2UgPyAobiA9IHRoaXMucGl4ZWxGcm9tUHJpY2UobS5Mb3csIGMpLCBuIDwgZiAmJiAobiA9IGYpLCBuID4gZyAmJiAobiA9IGcpLCBhLmxpbmVUbyhsLCBuKSwgbCArPSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAvIDQsIG4gPSB0aGlzLnBpeGVsRnJvbVByaWNlKG0uSGlnaCwgYykpIDogKG4gPSB0aGlzLnBpeGVsRnJvbVByaWNlKG0uSGlnaCwgYyksIG4gPCBmICYmIChuID0gZiksIG4gPiBnICYmIChuID0gZyksIGEubGluZVRvKGwsIG4pLCBsICs9IHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC8gNCwgbiA9IHRoaXMucGl4ZWxGcm9tUHJpY2UobS5Mb3csIGMpKTsKICAgICAgICAgICAgbiA8IGYgJiYgKG4gPSBmKTsKICAgICAgICAgICAgbiA+IGcgJiYgKG4gPSBnKTsKICAgICAgICAgICAgYS5saW5lVG8obCwgbik7CiAgICAgICAgICAgIGwgKz0gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggLyA0OwogICAgICAgICAgICBuID0gdGhpcy5waXhlbEZyb21QcmljZShtLkNsb3NlLCBjKTsKICAgICAgICAgICAgbiA8IGYgJiYgKG4gPSBmKTsKICAgICAgICAgICAgbiA+IGcgJiYgKG4gPSBnKTsKICAgICAgICAgICAgYS5saW5lVG8obCwgbikKICAgICAgICB9CiAgICB9CiAgICBiID0gdGhpcy5jYW52YXNTdHlsZSgic3R4X2xpbmVfY2hhcnQiKTsKICAgIGIud2lkdGggJiYgKGEubGluZVdpZHRoID0gc3RyaXBQWChiLndpZHRoKSk7CiAgICB0aGlzLmNhbnZhc0NvbG9yKCJzdHhfbGluZV9jaGFydCIpOwogICAgYS5zdHJva2UoKTsKICAgIGEuY2xvc2VQYXRoKCkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmhlYWRzVXBIUiA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJoZWFkc1VwSFIiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgdmFyIGEgPSB0aGlzLmN1cnJlbnRQYW5lbDsKICAgICAgICBpZiAoYSkgewogICAgICAgICAgICB2YXIgYiA9IGEuY2hhcnQsCiAgICAgICAgICAgICAgICBjID0gdGhpcy5jeTsKICAgICAgICAgICAgInZjaGFydCIgPT0gYS5uYW1lID8gCiAgICAgICAgICAgIAkJdGhpcy5jb250cm9scy5mbG9hdEhSLmlubmVySFRNTCA9IGNvbmRlbnNlSW50KGEubWluICsgYS5zaGFkb3cgLyBhLmhlaWdodCAqIChhLmJvdHRvbSAtIGMpKQogICAgICAgICAgICAJCTogKGMgPSB0aGlzLnZhbHVlRnJvbVBpeGVsKGMsIGEpLCBjID0gdGhpcy5mb3JtYXRZQXhpc1ByaWNlKGMsIGEpLCB0aGlzLmNvbnRyb2xzLmZsb2F0SFIuaW5uZXJIVE1MID0gYyk7CiAgICAgICAgICAgCiAgICAgICAgICAgIAkJaWYodGhpcy5jb250cm9scy5mbG9hdERhdGUpewogICAgICAgICAgICAJCQlhID0gdGhpcy50aWNrRnJvbVBpeGVsKHRoaXMuY3gsIGIpOwogICAgICAgICAgICAJCQkKICAgICAgICAgICAgCQkJaWYoYSA+IGIuZGF0YVNldC5sZW5ndGggLTEgfHwgYSA8IDApCiAgICAgICAgICAgIAkJCQlyZXR1cm47CiAgICAgICAgICAgIAkJCQogICAgICAgICAgICAJCQliID0gYi5kYXRhU2V0W2FdOwogICAgICAgICAgICAJCQlpZih0aGlzLmludGVybmF0aW9uYWxpemVyICl7CiAgICAgICAgCQkJCQlhID0gdGhpcy5pbnRlcm5hdGlvbmFsaXplci5tb250aERheS5mb3JtYXQoYi5EVCk7CiAgICAgICAgCQkJCQlhICs9ICIgIiArIHRoaXMuaW50ZXJuYXRpb25hbGl6ZXIuaG91ck1pbnV0ZS5mb3JtYXQoYi5EVCk7ICAKICAgICAgICAJCQkJCSB0aGlzLmNvbnRyb2xzLmZsb2F0RGF0ZS5pbm5lckhUTUwgPSBhOwogICAgICAgIAkJCQl9ZWxzZXsKICAgICAgICAJCQkJCXRoaXMuY29udHJvbHMuZmxvYXREYXRlLmlubmVySFRNTCA9IG1tZGRoaG1tKGIuRGF0ZSk7CiAgICAgICAgCQkJCX0KICAgICAgICAgICAgCQl9CiAgICAgICAgICAgIAkJCiAgICAgICAgICAgIHRoaXMucnVuQXBwZW5kKCJoZWFkc1VwSFIiLCBhcmd1bWVudHMpCiAgICAgICAgfQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuc2V0Q3Jvc3NoYWlyQ29sb3JzID0gZnVuY3Rpb24gKCkge307ClNUWENoYXJ0LnByb3RvdHlwZS5tYWduZXRpemUgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm1hZ25ldGl6ZWRQcmljZSA9IG51bGw7CiAgICBpZiAoISh0aGlzLnJ1blByZXBlbmQoIm1hZ25ldGl6ZSIsIGFyZ3VtZW50cykgfHwgImFubm90YXRpb24iID09IFNUWENoYXJ0LnZlY3RvclR5cGUgJiYgU1RYQ2hhcnQuZHJhd2luZ0xpbmUgfHwgInByb2plY3Rpb24iID09IFNUWENoYXJ0LnZlY3RvclR5cGUpKSB7CiAgICAgICAgdmFyIGEgPSB0aGlzLmN1cnJlbnRQYW5lbDsKICAgICAgICBpZiAoYS5uYW1lID09IGEuY2hhcnQubmFtZSkgewogICAgICAgICAgICB2YXIgYiA9IGEuY2hhcnQsCiAgICAgICAgICAgICAgICBjID0gdGhpcy50aWNrRnJvbVBpeGVsKFNUWENoYXJ0LmNyb3NzaGFpclggLSB0aGlzLmNoYXJ0LmxlZnQsIGIpOwogICAgICAgICAgICAibWludXRlIiAhPSB0aGlzLmxheW91dC5pbnRlcnZhbCAmJiAoYyAvPSB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSk7CiAgICAgICAgICAgIGlmIChjID4gYi5kYXRhU2V0Lmxlbmd0aCkgcmV0dXJuOwogICAgICAgICAgICB2YXIgZCA9IGIuZGF0YVNldFtjXTsKICAgICAgICAgICAgaWYgKG51bGwgPT0gZCkgcmV0dXJuOwogICAgICAgICAgICBhID0gdGhpcy52YWx1ZUZyb21QaXhlbCh0aGlzLmN5LCBhKTsKICAgICAgICAgICAgdGhpcy5tYWduZXRpemVkUHJpY2UgPQogICAgICAgICAgICAgICAgZC5DbG9zZTsKICAgICAgICAgICAgaWYgKCJiYXIiID09IHRoaXMubGF5b3V0LmNoYXJ0VHlwZSB8fCAiY2FuZGxlIiA9PSB0aGlzLmxheW91dC5jaGFydFR5cGUgfHwgImNvbG9yZWRfYmFyIiA9PSB0aGlzLmxheW91dC5jaGFydFR5cGUpCiAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gWyJPcGVuIiwgIkhpZ2giLCAiTG93IiwgIkNsb3NlIl0sIGYgPSAxRTksIGcgPSAwOyBnIDwgZS5sZW5ndGg7IGcrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBrID0gZFtlW2ddXTsKICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhhIC0gaykgPCBmICYmIChmID0gTWF0aC5hYnMoYSAtIGspLCB0aGlzLm1hZ25ldGl6ZWRQcmljZSA9IGspCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGIgPSB0aGlzLnBpeGVsRnJvbVRpY2soYywgYik7CiAgICAgICAgICAgIGMgPSB0aGlzLnBpeGVsRnJvbVByaWNlKHRoaXMubWFnbmV0aXplZFByaWNlLCB0aGlzLmN1cnJlbnRQYW5lbCk7CiAgICAgICAgICAgIGQgPSB0aGlzLmNoYXJ0LnRlbXBDYW52YXMuY29udGV4dDsKICAgICAgICAgICAgZC5iZWdpblBhdGgoKTsKICAgICAgICAgICAgZC5saW5lV2lkdGggPSAxOwogICAgICAgICAgICBhID0gTWF0aC5tYXgodGhpcy5sYXlvdXQuY2FuZGxlV2lkdGgsIDgpIC8gMjsKICAgICAgICAgICAgZC5hcmMoYiwgYywgYSwgMCwgTWF0aC5QSSAvIDE4MCAqIDM2MCwgITEpOwogICAgICAgICAgICBkLmZpbGxTdHlsZSA9ICIjRkZGRkZGIjsKICAgICAgICAgICAgZC5zdHJva2VTdHlsZSA9CiAgICAgICAgICAgICAgICAiIzAwMDAwMCI7CiAgICAgICAgICAgIGQuZmlsbCgpOwogICAgICAgICAgICBkLnN0cm9rZSgpOwogICAgICAgICAgICBkLmNsb3NlUGF0aCgpCiAgICAgICAgfQogICAgICAgIHRoaXMucnVuQXBwZW5kKCJtYWduZXRpemUiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5kb0Rpc3BsYXlDcm9zc2hhaXJzID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5ydW5QcmVwZW5kKCJkb0Rpc3BsYXlDcm9zc2hhaXJzIiwgYXJndW1lbnRzKSB8fCAKICAgICh0aGlzLmRpc3BsYXlJbml0aWFsaXplZCAmJiAoCiAgICAJCXRoaXMubGF5b3V0LmNyb3NzaGFpciB8fCAiIiAhPSBTVFhDaGFydC52ZWN0b3JUeXBlIAogICAgCQkJCT8oIiIgIT0gdGhpcy5jb250cm9scy5jcm9zc1guc3R5bGUuZGlzcGxheSAmJiAoCiAgICAJCQkJCQl0aGlzLmNvbnRyb2xzLmNyb3NzWC5zdHlsZS5kaXNwbGF5ID0gIiIsIAogICAgCQkJCQkJdGhpcy5jb250cm9scy5jcm9zc1kuc3R5bGUuZGlzcGxheSA9ICIiLCAKICAgIAkJCQkJCXRoaXMuY29udHJvbHMuZmxvYXRIUi5zdHlsZS5kaXNwbGF5ID0gIiIsIAogICAgCQkJCQkJZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSB0aGlzLnByZWZlcmVuY2VzLm1hZ25ldCAmJiAiIiAhPSBTVFhDaGFydC52ZWN0b3JUeXBlID8gIm5vbmUiIDogImNyb3NzaGFpciIKICAgIAkJCQkJCQkpLCB0aGlzLmNvbnRyb2xzLmZsb2F0RGF0ZSAmJiAodGhpcy5jb250cm9scy5mbG9hdERhdGUuc3R5bGUuZGlzcGxheSA9ICJibG9jayIpKSAKICAgIAkJCQk6dGhpcy51bmRpc3BsYXlDcm9zc2hhaXJzKCkKICAgICAgICksIHRoaXMucnVuQXBwZW5kKCJkb0Rpc3BsYXlDcm9zc2hhaXJzIiwgYXJndW1lbnRzKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnVuZGlzcGxheUNyb3NzaGFpcnMgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJ1blByZXBlbmQoInVuZGlzcGxheUNyb3NzaGFpcnMiLCBhcmd1bWVudHMpIHx8IChudWxsICE9IHRoaXMuY29udHJvbHMuY3Jvc3NYICYmICJub25lIiAhPSB0aGlzLmNvbnRyb2xzLmNyb3NzWC5zdHlsZS5kaXNwbGF5ICYmICh0aGlzLmNvbnRyb2xzLmNyb3NzWC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCB0aGlzLmNvbnRyb2xzLmNyb3NzWS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCB0aGlzLmNvbnRyb2xzLmZsb2F0SFIuc3R5bGUuZGlzcGxheSA9ICJub25lIiksIHRoaXMuZGlzcGxheUluaXRpYWxpemVkICYmIHRoaXMuY29udHJvbHMuZmxvYXREYXRlICYmICh0aGlzLmNvbnRyb2xzLmZsb2F0RGF0ZS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiKSwgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAiYXV0byIsIHRoaXMucnVuQXBwZW5kKCJ1bmRpc3BsYXlDcm9zc2hhaXJzIiwgYXJndW1lbnRzKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLm1vZGFsQmVnaW4gPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm9wZW5EaWFsb2cgPSAibW9kYWwiOwogICAgdGhpcy51bmRpc3BsYXlDcm9zc2hhaXJzKCkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLm1vZGFsRW5kID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5jYW5jZWxUb3VjaFNpbmdsZUNsaWNrID0gITA7CiAgICB0aGlzLm9wZW5EaWFsb2cgPSAiIjsKICAgIHRoaXMuZG9EaXNwbGF5Q3Jvc3NoYWlycygpCn07ClNUWENoYXJ0LnByb3RvdHlwZS51cGRhdGVDaGFydEFjY2Vzc29yaWVzID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5hY2Nlc3NvcnlUaW1lciA9IG51bGw7CiAgICB0aGlzLmxhc3RBY2Nlc3NvcnlVcGRhdGUgPSAobmV3IERhdGUpLmdldFRpbWUoKTsKICAgIHZhciBhID0gZ2V0UG9zKHRoaXMuY29udHJvbHMuZmxvYXRIUi5wYXJlbnROb2RlKTsKICAgIHRoaXMuY29udHJvbHMuZmxvYXRIUi5zdHlsZS50b3AgPSBTVFhDaGFydC5jcm9zc2hhaXJZIC0gYS55IC0gdGhpcy5jb250cm9scy5mbG9hdEhSLm9mZnNldEhlaWdodCAvIDIgKyAicHgiOwogICAgaWYgKGEgPSB0aGlzLmNvbnRyb2xzLmZsb2F0RGF0ZSkgewogICAgICAgIHZhciBiID0gdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQ7CiAgICAgICAgYS5zdHlsZS5sZWZ0ID0gdGhpcy5iYWNrT3V0WChTVFhDaGFydC5jcm9zc2hhaXJYKSAtIGEub2Zmc2V0V2lkdGggLyAyICsgInB4IjsKICAgICAgICBhLnN0eWxlLmJvdHRvbSA9IHRoaXMuY2hhcnQuY2FudmFzSGVpZ2h0IC0gYi5wYW5lbC5ib3R0b20gKyAicHgiCiAgICB9CiAgICB0aGlzLmhlYWRzVXBIUigpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5tb3VzZW1vdmUgPSBmdW5jdGlvbiAoYSkgewogICAgYSB8fCAoYSA9IGV2ZW50KTsKICAgIGEucGFnZVggfHwgKGEucGFnZVggPSBhLmNsaWVudFggKyBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCwgYS5wYWdlWSA9IGEuY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCk7CiAgICBTVFhDaGFydC5jcm9zc2hhaXJYID0gYS5wYWdlWDsKICAgIFNUWENoYXJ0LmNyb3NzaGFpclkgPSBhLnBhZ2VZOwogICAgIXRoaXMucnVuUHJlcGVuZCgibW91c2Vtb3ZlIiwgYXJndW1lbnRzKSAmJiB0aGlzLmRpc3BsYXlJbml0aWFsaXplZCAmJiAiIiA9PSB0aGlzLm9wZW5EaWFsb2cgJiYgKHRoaXMubW91c2Vtb3ZlaW5uZXIoYS5wYWdlWCwgYS5wYWdlWSksIHRoaXMucnVuQXBwZW5kKCJtb3VzZW1vdmUiLCBhcmd1bWVudHMpKQp9OwpTVFhDaGFydC5wcm90b3R5cGUubW91c2Vtb3ZlaW5uZXIgPSBmdW5jdGlvbiAoYSwgYikgewogICAgaWYgKFNUWC5pc0FuZHJvaWQgfHwgdGhpcy5jaGFydC5jYW52YXMuaGVpZ2h0ID09IE1hdGguZmxvb3IodGhpcy5kZXZpY2VQaXhlbFJhdGlvICogdGhpcy5jaGFydC5jb250YWluZXIuY2xpZW50SGVpZ2h0KSAmJiB0aGlzLmNoYXJ0LmNhbnZhcy53aWR0aCA9PSBNYXRoLmZsb29yKHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyAqIHRoaXMuY2hhcnQuY29udGFpbmVyLmNsaWVudFdpZHRoKSkgewogICAgICAgIFNUWENoYXJ0LmNyb3NzaGFpclggPSBhOwogICAgICAgIFNUWENoYXJ0LmNyb3NzaGFpclkgPSBiOwogICAgICAgIHZhciBjID0gdGhpcy5jeSA9IHRoaXMuYmFja091dFkoU1RYQ2hhcnQuY3Jvc3NoYWlyWSk7CiAgICAgICAgdGhpcy5jeCA9IHRoaXMuYmFja091dFgoU1RYQ2hhcnQuY3Jvc3NoYWlyWCk7CiAgICAgICAgdGhpcy5jdXJyZW50UGFuZWwgPSB0aGlzLndoaWNoUGFuZWwoYyk7CiAgICAgICAgdGhpcy5jdXJyZW50UGFuZWwgfHwgKHRoaXMuY3VycmVudFBhbmVsID0gdGhpcy5jaGFydC5wYW5lbCk7CiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhbmVsKSB7CiAgICAgICAgICAgIHZhciBkID0KICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0OwogICAgICAgICAgICBkLmRhdGFTZXQgJiYgKHRoaXMuY3Jvc3NoYWlyVGljayA9IHRoaXMudGlja0Zyb21QaXhlbCh0aGlzLmJhY2tPdXRYKFNUWENoYXJ0LmNyb3NzaGFpclgpLCBkKSAvIHRoaXMubGF5b3V0LnBlcmlvZGljaXR5LCB0aGlzLmNyb3NzaGFpclZhbHVlID0gdGhpcy5hZGp1c3RJZk5lY2Vzc2FyeSh0aGlzLmN1cnJlbnRQYW5lbCwgdGhpcy5jcm9zc2hhaXJUaWNrLCB0aGlzLnZhbHVlRnJvbVBpeGVsKGMsIHRoaXMuY3VycmVudFBhbmVsKSkpOwogICAgICAgICAgICAKICAgICAgICAgICAgU1RYQ2hhcnQuaW5zaWRlQ2hhcnQgPSBTVFhDaGFydC5jcm9zc2hhaXJYID49IHRoaXMuY2hhcnQubGVmdCAmJiBTVFhDaGFydC5jcm9zc2hhaXJYIDw9IHRoaXMuY2hhcnQucmlnaHQgJiYgU1RYQ2hhcnQuY3Jvc3NoYWlyWSA+PSB0aGlzLmNoYXJ0LnRvcCAmJiBTVFhDaGFydC5jcm9zc2hhaXJZIDw9IHRoaXMuY2hhcnQuYm90dG9tID8gITAgOiAhMTsKICAgICAgICAgICAgaWYgKFNUWENoYXJ0Lmluc2lkZUNoYXJ0IHx8IHRoaXMuZ3JhYmJpbmdTY3JlZW4pCiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNwbGF5Q3Jvc3NoYWlycyB8fAogICAgICAgICAgICAgICAgICAgIG51bGwgIT0gU1RYQ2hhcnQucmVzaXppbmdQYW5lbCkKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmFiYmluZ1NjcmVlbiAmJiAhU1RYQ2hhcnQucmVzaXppbmdQYW5lbCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbnlIaWdobGlnaHRlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgU1RYLmNsZWFyQ2FudmFzKHRoaXMuY2hhcnQudGVtcENhbnZhcywgdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFueUhpZ2hsaWdodGVkID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlIGluIHRoaXMub3ZlcmxheXMpIHRoaXMub3ZlcmxheXNbZV0uaGlnaGxpZ2h0ID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgaW4gZC5zZXJpZXMpIGQuc2VyaWVzW2VdLmhpZ2hsaWdodCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3RpY2t5KCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZWZlcmVuY2VzLm1hZ25ldCAmJiAiIiAhPSBTVFhDaGFydC52ZWN0b3JUeXBlICYmIFNUWC5jbGVhckNhbnZhcyh0aGlzLmNoYXJ0LnRlbXBDYW52YXMsIHRoaXMpOyAtIDEgPT0gdGhpcy5ncmFiU3RhcnRYICYmICh0aGlzLmdyYWJTdGFydFggPSBTVFhDaGFydC5jcm9zc2hhaXJYLCB0aGlzLmdyYWJTdGFydFNjcm9sbFggPSBkLnNjcm9sbCk7IC0gMSA9PSB0aGlzLmdyYWJTdGFydFkgJiYgKHRoaXMuZ3JhYlN0YXJ0WSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTVFhDaGFydC5jcm9zc2hhaXJZLCB0aGlzLmdyYWJTdGFydFNjcm9sbFkgPSBkLnZlcnRpY2FsU2Nyb2xsKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IFNUWENoYXJ0LmNyb3NzaGFpclggLSB0aGlzLmdyYWJTdGFydFg7CiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBTVFhDaGFydC5jcm9zc2hhaXJZIC0gdGhpcy5ncmFiU3RhcnRZOwogICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhjKSA8IHRoaXMueVRvbGVyYW5jZSA/IHRoaXMueVRvbGVyYW5jZUJyb2tlbiB8fCAoYyA9IDApIDogdGhpcy55VG9sZXJhbmNlQnJva2VuID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwICE9IGUgfHwgMCAhPSBjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1IDwgTWF0aC5hYnMoZSkgKyBNYXRoLmFicyhjKSAmJiAodGhpcy5ncmFiT3ZlcnJpZGVDbGljayA9ICEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN0cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc2Nyb2xsIDwgZC5tYXhUaWNrcyAmJiAoZiA9ICExKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5ncmFiU3RhcnRDYW5kbGVXaWR0aCArIGUgLyAyNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjI1ID4gZSAmJiAoZSA9IDAuMjUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnID0gKHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC0gZSkgLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjEgPCBnID8gZSA9IDAuOSAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIDogLTAuMSA+IGcgJiYgKGUgPSAxLjEgKiB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFNUWC5pcGFkICYmIE1hdGgucm91bmQodGhpcy5jaGFydC53aWR0aCAvIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC0gMC40OTkpIC0gMSA8IFNUWENoYXJ0LmlwYWRNYXhUaWNrcyAmJiBNYXRoLnJvdW5kKHRoaXMuY2hhcnQud2lkdGggLyBlIC0gMC40OTkpIC0gMSA+IFNUWENoYXJ0LmlwYWRNYXhUaWNrcykgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGluY2hpbmdDZW50ZXIgPyAoZyA9IHRoaXMuYmFja091dFgodGhpcy5waW5jaGluZ0NlbnRlciksIGYgPSB0aGlzLnRpY2tGcm9tUGl4ZWwoZywgZCksIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoID0gZSwgMCA+PSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAmJiAodGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggPSAxKSwgdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQubWF4VGlja3MgPSBNYXRoLnJvdW5kKHRoaXMuY2hhcnQud2lkdGggLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAtIDAuNDk5KSAtIDEsIGUgPSB0aGlzLnRpY2tGcm9tUGl4ZWwoZywgZCksIGQuc2Nyb2xsICs9IE1hdGguZmxvb3IoKGUgLSBmKSAvIHRoaXMubGF5b3V0LnBlcmlvZGljaXR5KSkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID8gKHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoID0gZSwgMCA+PSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAmJiAodGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggPSAxKSwgZSA9IGQuc2Nyb2xsIC0gZC5tYXhUaWNrcyAvIDIsIGQubWF4VGlja3MgPSBNYXRoLnJvdW5kKHRoaXMuY2hhcnQud2lkdGggLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAtIDAuNDk5KSAtIDEsIGQuc2Nyb2xsICs9IE1hdGgucm91bmQoZSAtIChkLnNjcm9sbCAtIGQubWF4VGlja3MgLyAyKSkpIDogKHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoID0gZSwgMCA+PSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAmJiAodGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggPSAxKSwgZC5tYXhUaWNrcyA9IE1hdGgucm91bmQodGhpcy5jaGFydC53aWR0aCAvIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC0gMC40OTkpIC0gMSwgZSA9IE1hdGgucm91bmQodGhpcy5wcmVmZXJlbmNlcy53aGl0ZXNwYWNlIC8gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGgpLCBkLnNjcm9sbCA9IGQubWF4VGlja3MgLSBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxheW91dC5zcGFuID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gTWF0aC5yb3VuZChjIC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzApIC8gMzA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC56b29tID0gdGhpcy5ncmFiU3RhcnRab29tICsgYzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjggPCBkLnpvb20gJiYgKGQuem9vbSA9IDAuOCk7IC0gMC40ID4gZC56b29tICYmIChkLnpvb20gPSAtMC40KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGUgPSBNYXRoLnJvdW5kKGUgLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCksIHRoaXMuc2hpZnQgJiYgKGUgKj0gNSksIGQuc2Nyb2xsID0gdGhpcy5ncmFiU3RhcnRTY3JvbGxYICsgZSwgMSA+IGQuc2Nyb2xsICYmIChkLnNjcm9sbCA9IDEpLCB0aGlzLnByZWZlcmVuY2VzLndoaXRlc3BhY2UgPSBkLnNjcm9sbCA+PSBkLm1heFRpY2tzID8gMzAgOiAoZC5tYXhUaWNrcyAtIGQuc2Nyb2xsKSAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoLCB0aGlzLmN1cnJlbnRQYW5lbC5uYW1lID09IGQubmFtZSAmJiAodGhpcy5jaGFydC52ZXJ0aWNhbFNjcm9sbCA9IHRoaXMuZ3JhYlN0YXJ0U2Nyb2xsWSArIGMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5kcmF3KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKFNUWENoYXJ0LnVzZUFuaW1hdGlvbiB8fCBTVFguaXNBbmRyb2lkKSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGQodGhpcykpIDogdGhpcy5kcmF3KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZURyYXdpbmcgJiYgKFNUWC5jbGVhckNhbnZhcyh0aGlzLmNoYXJ0LnRlbXBDYW52YXMsIHRoaXMpLCB0aGlzLmFjdGl2ZURyYXdpbmcucmVuZGVyKHRoaXMuY2hhcnQudGVtcENhbnZhcy5jb250ZXh0KSwgdGhpcy5hY3RpdmVEcmF3aW5nLm1lYXN1cmUoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuZGlzcGxheUNyb3NzaGFpcnMoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlewogICAgICAgICAgICAgICAgICAgIAlmID0gdGhpcy50aWNrRnJvbVBpeGVsKHRoaXMuYmFja091dFgoU1RYQ2hhcnQuY3Jvc3NoYWlyWCksIGQpLAoJICAgICAgICAgICAgICAgICAgICBmIC89IHRoaXMubGF5b3V0LnBlcmlvZGljaXR5LAoJICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmNyb3NzWC5zdHlsZS5sZWZ0ID0gdGhpcy5waXhlbEZyb21UaWNrKGYsIGQpIC0gMC41ICsgInB4IiwgCgkgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHMuY3Jvc3NZLnN0eWxlLnRvcCA9IHRoaXMuYmFja091dFkoU1RYQ2hhcnQuY3Jvc3NoYWlyWSkgKyAicHgiLAoJICAgICAgICAgICAgICAgICAgICAKCSAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDcm9zc2hhaXJDb2xvcnMoKSwgCgkgICAgICAgICAgICAgICAgICAgIAoJICAgICAgICAgICAgICAgICAgICBmID4gdGhpcy5jaGFydC5kYXRhU2V0Lmxlbmd0aCAtMSA/IHRoaXMudW5kaXNwbGF5Q3Jvc3NoYWlycygpOgoJICAgICAgICAgICAgICAgICAgICBTVFhDaGFydC5pbnNpZGVDaGFydCAmJgogICAgICAgICAgICAgICAgICAgICAgICBudWxsID09IFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwgPyAodGhpcy5kb0Rpc3BsYXlDcm9zc2hhaXJzKCksIG51bGwgIT0gdGhpcy5hY2Nlc3NvcnlUaW1lciAmJiBjbGVhclRpbWVvdXQodGhpcy5hY2Nlc3NvcnlUaW1lciksIFNUWENoYXJ0LmRyYXdpbmdMaW5lID8gdGhpcy51cGRhdGVDaGFydEFjY2Vzc29yaWVzKCkgOiAoMTAwIDwgKG5ldyBEYXRlKS5nZXRUaW1lKCkgLSB0aGlzLmxhc3RBY2Nlc3NvcnlVcGRhdGUgJiYgdGhpcy51cGRhdGVDaGFydEFjY2Vzc29yaWVzKCksIHRoaXMuYWNjZXNzb3J5VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEudXBkYXRlQ2hhcnRBY2Nlc3NvcmllcygpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0odGhpcyksIDEwKSkpIDogKHRoaXMudW5kaXNwbGF5Q3Jvc3NoYWlycygpLCBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICJhdXRvIiksIFNUWENoYXJ0LmRyYXdpbmdMaW5lID8gdGhpcy5hY3RpdmVEcmF3aW5nICYmIChkID0gdGhpcy5wYW5lbHNbdGhpcy5hY3RpdmVEcmF3aW5nLnBhbmVsTmFtZV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gdGhpcy5hZGp1c3RJZk5lY2Vzc2FyeShkLCB0aGlzLmNyb3NzaGFpclRpY2ssIHRoaXMudmFsdWVGcm9tUGl4ZWxVbnRyYW5zZm9ybSh0aGlzLmJhY2tPdXRZKFNUWENoYXJ0LmNyb3NzaGFpclkpLCBkKSksIHRoaXMucHJlZmVyZW5jZXMubWFnbmV0ICYmIHRoaXMubWFnbmV0aXplZFByaWNlICYmIGQubmFtZSA9PSBkLmNoYXJ0Lm5hbWUgJiYgKGMgPSB0aGlzLmFkanVzdElmTmVjZXNzYXJ5KGQsIHRoaXMuY3Jvc3NoYWlyVGljaywgdGhpcy5tYWduZXRpemVkUHJpY2UpKSwgU1RYLmNsZWFyQ2FudmFzKHRoaXMuY2hhcnQudGVtcENhbnZhcywgdGhpcyksIHRoaXMuYWN0aXZlRHJhd2luZy5tb3ZlKHRoaXMuY2hhcnQudGVtcENhbnZhcy5jb250ZXh0LCB0aGlzLmNyb3NzaGFpclRpY2ssIGMpLCB0aGlzLmFjdGl2ZURyYXdpbmcubWVhc3VyZSAmJiB0aGlzLmFjdGl2ZURyYXdpbmcubWVhc3VyZSgpKSA6IG51bGwgIT0gU1RYQ2hhcnQucmVzaXppbmdQYW5lbCA/ICh0aGlzLnJlc2l6ZVBhbmVscygpLCB0aGlzLmRyYXdUZW1wb3JhcnlQYW5lbCgpKSA6CiAgICAgICAgICAgICAgICAgICAgICAgIFNUWENoYXJ0Lmluc2lkZUNoYXJ0ICYmIHRoaXMuZmluZEhpZ2hsaWdodHMoKSwgdGhpcy5wcmVmZXJlbmNlcy5tYWduZXQgJiYgIiIgIT0gU1RYQ2hhcnQudmVjdG9yVHlwZSAmJiAoU1RYQ2hhcnQuZHJhd2luZ0xpbmUgfHwgdGhpcy5hbnlIaWdobGlnaHRlZCB8fCBTVFguY2xlYXJDYW52YXModGhpcy5jaGFydC50ZW1wQ2FudmFzKSwgdGhpcy5tYWduZXRpemUoKSk7CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIH1lbHNlIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gImF1dG8iLCB0aGlzLnVuZGlzcGxheUNyb3NzaGFpcnMoKTsKICAgICAgICAgICAgICAgICAgICBlbHNlIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gImF1dG8iLCB0aGlzLnVuZGlzcGxheUNyb3NzaGFpcnMoKQogICAgICAgIH0KICAgIH0gZWxzZSB0aGlzLnJlc2l6ZUNoYXJ0KCkKICAgIHRoaXMuZGlzcGxheVN0dWR5VmFsdWUodHJ1ZSk7Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5maW5kSGlnaGxpZ2h0cyA9IGZ1bmN0aW9uIChhKSB7CiAgICB2YXIgYiA9IDEwOwogICAgYSAmJiAoYiA9IDMwKTsKICAgIGEgPSB0aGlzLmN5OwogICAgdmFyIGMgPSB0aGlzLmN4OwogICAgaWYgKHRoaXMuY3VycmVudFBhbmVsKSB7CiAgICAgICAgdmFyIGQgPSB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydDsKICAgICAgICB0aGlzLmFueUhpZ2hsaWdodGVkID0gITE7CiAgICAgICAgdGhpcy5wcmVmZXJlbmNlcy5tYWduZXQgJiYgIiIgIT0gU1RYQ2hhcnQudmVjdG9yVHlwZSAmJiBTVFguY2xlYXJDYW52YXModGhpcy5jaGFydC50ZW1wQ2FudmFzLCB0aGlzKTsKICAgICAgICBmb3IgKHZhciBlID0gITEsIGYgPSB7CiAgICAgICAgICAgICAgICAgICAgeDA6IHRoaXMudGlja0Zyb21QaXhlbChjIC0gYiwgZCkgLyB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSwKICAgICAgICAgICAgICAgICAgICB4MTogdGhpcy50aWNrRnJvbVBpeGVsKGMgKyBiLCBkKSAvIHRoaXMubGF5b3V0LnBlcmlvZGljaXR5LAogICAgICAgICAgICAgICAgICAgIHkwOiB0aGlzLnZhbHVlRnJvbVBpeGVsVW50cmFuc2Zvcm0oYSAtIGIsIHRoaXMuY3VycmVudFBhbmVsKSwKICAgICAgICAgICAgICAgICAgICB5MTogdGhpcy52YWx1ZUZyb21QaXhlbFVudHJhbnNmb3JtKGEgKyBiLCB0aGlzLmN1cnJlbnRQYW5lbCkKICAgICAgICAgICAgICAgIH0sIGcgPSAwOyBnIDwKICAgICAgICAgICAgdGhpcy5kcmF3aW5nT2JqZWN0cy5sZW5ndGg7IGcrKykgewogICAgICAgICAgICB2YXIgayA9IHRoaXMuZHJhd2luZ09iamVjdHNbZ107CiAgICAgICAgICAgIGlmICghay5wZXJtYW5lbnQpIHsKICAgICAgICAgICAgICAgIHZhciBtID0gay5wYW5lbE5hbWUgPT0gdGhpcy5jdXJyZW50UGFuZWwubmFtZTsKICAgICAgICAgICAgICAgIChtID0gbSAmJiBrLmludGVyc2VjdGVkKHRoaXMuY3Jvc3NoYWlyVGljaywgdGhpcy5jcm9zc2hhaXJWYWx1ZSwgZikpID8gKGsuaGlnaGxpZ2h0KCEwKSAmJiAoay5tZWFzdXJlKCksIGUgPSAhMCksIHRoaXMuc2V0VHJhc2hDYW4oKSwgdGhpcy5hbnlIaWdobGlnaHRlZCA9ICEwKSA6IGsuaGlnaGxpZ2h0KCExKSAmJiAoZSA9ICEwKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGUgJiYgdGhpcy5kcmF3KCk7CiAgICAgICAgZm9yICh2YXIgbCBpbiB0aGlzLm92ZXJsYXlzKSBlID0gdGhpcy5vdmVybGF5c1tsXSwgZS5wcmV2ID0gZS5oaWdobGlnaHQsIGUuaGlnaGxpZ2h0ID0gITE7CiAgICAgICAgZm9yIChsIGluIGQuc2VyaWVzKSBlID0gZC5zZXJpZXNbbF0sIGUucHJldiA9IGUuaGlnaGxpZ2h0LCBlLmhpZ2hsaWdodCA9ICExOwogICAgICAgIGMgPSB0aGlzLmJhckZyb21QaXhlbChjKTsKICAgICAgICBpZiAoYyA8IGQuZGF0YVNlZ21lbnQubGVuZ3RoKSB7CiAgICAgICAgICAgIGZvciAobCBpbiB0aGlzLm92ZXJsYXlzKQogICAgICAgICAgICAgICAgaWYgKGUgPQogICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheXNbbF0sIGUucGFuZWwgPT0gdGhpcy5jdXJyZW50UGFuZWwubmFtZSAmJiAoZiA9IGQuZGF0YVNlZ21lbnRbY10pKSBnID0gZltTVFguZmlyc3QodGhpcy5vdmVybGF5c1tsXS5vdXRwdXRNYXApXSwgZiA9IDAsIGYgPSB0aGlzLnBpeGVsRnJvbVByaWNlKGcsIHRoaXMuY3VycmVudFBhbmVsKSwgYSAtIGIgPCBmICYmIGEgKyBiID4gZiAmJiAodGhpcy5hbnlIaWdobGlnaHRlZCA9IGUuaGlnaGxpZ2h0ID0gITApOwogICAgICAgICAgICBmb3IgKGwgaW4gZC5zZXJpZXMpKGUgPSBkLnNlcmllc1tsXSwgZiA9IGUueVZhbHVlQ2FjaGVbY10sIGEgLSBiIDwgZiAmJiBhICsgYiA+IGYpID8gdGhpcy5hbnlIaWdobGlnaHRlZCA9IGUuaGlnaGxpZ2h0ID0gITAgOiBlLmlzU3RlcCAmJiAwIDwgYyAmJiAoZyA9IGUueVZhbHVlQ2FjaGVbYyAtIDFdLCBhID4gZiAmJiBhIDwgZyB8fCBhIDwgZiAmJiBhID4gZykgJiYgKHRoaXMuYW55SGlnaGxpZ2h0ZWQgPSBlLmhpZ2hsaWdodCA9ICEwKQogICAgICAgIH0KICAgICAgICBmb3IgKGwgaW4gdGhpcy5vdmVybGF5cykKICAgICAgICAgICAgaWYgKGUgPSB0aGlzLm92ZXJsYXlzW2xdLCBlLnByZXYgIT0gZS5oaWdobGlnaHQpIHsKICAgICAgICAgICAgICAgIGUuaGlnaGxpZ2h0ICYmICh0aGlzLmFueUhpZ2hsaWdodGVkID0gITAsIHRoaXMuZGlzcGxheVN0aWNreShlLm5hbWUpKTsKICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpOwogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgIGZvciAobCBpbiBkLnNlcmllcykKICAgICAgICAgICAgaWYgKGUgPSBkLnNlcmllc1tsXSwgZS5wcmV2ICE9IGUuaGlnaGxpZ2h0KSB7CiAgICAgICAgICAgICAgICBlLmhpZ2hsaWdodCAmJiAodGhpcy5hbnlIaWdobGlnaHRlZCA9ICEwLCB0aGlzLmRpc3BsYXlTdGlja3koZS5kaXNwbGF5LCBlLnBhcmFtZXRlcnMuY29sb3IpKTsKICAgICAgICAgICAgICAgIHRoaXMuZHJhdygpOwogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgIHRoaXMuYW55SGlnaGxpZ2h0ZWQgfHwgdGhpcy5zZXRNZWFzdXJlKCkKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnBvc2l0aW9uU3RpY2t5ID0gZnVuY3Rpb24gKGEpIHsKICAgIHZhciBiID0gTWF0aC5tYXgodGhpcy5iYWNrT3V0WShTVFhDaGFydC5jcm9zc2hhaXJZKSAtIGEub2Zmc2V0SGVpZ2h0IC0gNjAsIDApLAogICAgICAgIGMgPSBNYXRoLm1pbih0aGlzLmNoYXJ0LmNhbnZhc1dpZHRoIC0gKHRoaXMuYmFja091dFgoU1RYQ2hhcnQuY3Jvc3NoYWlyWCkgLSA1MCksIHRoaXMuY2hhcnQuY2FudmFzV2lkdGggLSBhLm9mZnNldFdpZHRoKTsKICAgIGEuc3R5bGUudG9wID0gYiArICJweCI7CiAgICBhLnN0eWxlLnJpZ2h0ID0gYyArICJweCIKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRpc3BsYXlTdGlja3kgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIGMgPSB0aGlzLmNvbnRyb2xzLm1TdGlja3k7CiAgICBpZiAoYykgewogICAgICAgIHZhciBkID0gYy5jaGlsZHJlblswXTsKICAgICAgICBpZiAoZCkgewogICAgICAgICAgICB2YXIgZSA9IGMuY2hpbGRyZW5bMV07CiAgICAgICAgICAgIG51bGwgPT0gYSB8fCAiIiA9PSBhID8gKGQuaW5uZXJIVE1MID0gIiIsIGMuc3R5bGUuZGlzcGxheSA9ICJub25lIiwgU1RYLnRvdWNoRGV2aWNlICYmIGUgJiYgKGUuc3R5bGUuZGlzcGxheSA9ICJub25lIikpIDogKGQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYiA/IGIgOiAiIiwgZC5pbm5lckhUTUwgPSBhLCBjLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIiwgdGhpcy5wb3NpdGlvblN0aWNreShjKSwgU1RYLnRvdWNoRGV2aWNlICYmIGUgJiYgKGUuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtYmxvY2siKSkKICAgICAgICB9CiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5zZXRNZWFzdXJlID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIGUpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJzZXRNZWFzdXJlIiwgYXJndW1lbnRzKSAmJiAhdGhpcy5hY3RpdmVEcmF3aW5nKSB7CiAgICAgICAgdmFyIGYgPSB0aGlzLmNvbnRyb2xzLm1TdGlja3k7CiAgICAgICAgaWYgKGYpCiAgICAgICAgICAgIGlmIChlKSB7CiAgICAgICAgICAgICAgICBmLnN0eWxlLmRpc3BsYXkgPSAiaW5saW5lLWJsb2NrIjsKICAgICAgICAgICAgICAgIGYuY2hpbGRyZW5bMF0uc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtYmxvY2siOwogICAgICAgICAgICAgICAgaWYgKGEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0LAogICAgICAgICAgICAgICAgICAgICAgICBrID0gTWF0aC5yb3VuZChNYXRoLmFicyhhIC0gYikgKiBnLnJvdW5kaXQpIC8gZy5yb3VuZGl0LAogICAgICAgICAgICAgICAgICAgICAgICBnID0gIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGcgPSB0aGlzLmludGVybmF0aW9uYWxpemVyID8gZyArIHRoaXMuaW50ZXJuYXRpb25hbGl6ZXIubnVtYmVycy5mb3JtYXQoaykgOiBnICsgaywKICAgICAgICAgICAgICAgICAgICAgICAgayA9IChiIC0gYSkgLyBhLAogICAgICAgICAgICAgICAgICAgICAgICBrID0gMC4xIDwgTWF0aC5hYnMoaykgPyBNYXRoLnJvdW5kKDEwMCAqIGspIDogMC4wMSA8IE1hdGguYWJzKGspID8gTWF0aC5yb3VuZCgxRTMgKiBrKSAvIDEwIDogTWF0aC5yb3VuZCgxRTQgKiBrKSAvIDEwMCwKICAgICAgICAgICAgICAgICAgICAgICAgayA9IHRoaXMuaW50ZXJuYXRpb25hbGl6ZXIgPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hdGlvbmFsaXplci5wZXJjZW50LmZvcm1hdChrIC8gMTAwKSA6IGsgKyAiJSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBnICsgKCIgKCIgKyBrICsgIikiKSwKICAgICAgICAgICAgICAgICAgICAgICAgayA9IE1hdGguYWJzKGQgLSBjKTsKICAgICAgICAgICAgICAgICAgICAibWludXRlIiAhPSB0aGlzLmxheW91dC5pbnRlcnZhbCAmJiAoayAvPSB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSBNYXRoLnJvdW5kKGspICsgMSwKICAgICAgICAgICAgICAgICAgICAgICAgbSA9ICJiYXJzIjsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uQ2FsbGJhY2sgJiYgKG0gPSB0aGlzLnRyYW5zbGF0aW9uQ2FsbGJhY2sobSkpOwogICAgICAgICAgICAgICAgICAgIGYuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gZyArICgiICIgKyBrICsgIiAiICsgbSk7CiAgICAgICAgICAgICAgICAgICAgZi5jaGlsZHJlblsxXS5zdHlsZS5kaXNwbGF5ID0gU1RYLnRvdWNoRGV2aWNlID8gImlubGluZS1ibG9jayIgOiAibm9uZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25TdGlja3koZikKICAgICAgICAgICAgfSBlbHNlIGYuc3R5bGUuZGlzcGxheSA9ICJub25lIiwgZi5jaGlsZHJlblswXS5pbm5lckhUTUwgPSAiIgogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZHJhd1RlbXBvcmFyeVBhbmVsID0gZnVuY3Rpb24gKCkgewogICAgU1RYLmNsZWFyQ2FudmFzKHRoaXMuY2hhcnQudGVtcENhbnZhcywgdGhpcyk7CiAgICB2YXIgYSA9IFNUWENoYXJ0LmNyb3NzaGFpclkgLSB0aGlzLmNoYXJ0LnRvcDsKICAgIHRoaXMucGxvdExpbmUoMCwgMTAsIGEsIGEsIHRoaXMuY2FudmFzU3R5bGUoInN0eF9wYW5lbF9kcmFnIiksICJsaW5lIiwgdGhpcy5jaGFydC50ZW1wQ2FudmFzLmNvbnRleHQsICExLCB7fSk7CiAgICBTVFhDaGFydC5yZXNpemluZ1BhbmVsLmhhbmRsZS5zdHlsZS50b3AgPSBhIC0gU1RYQ2hhcnQucmVzaXppbmdQYW5lbC5oYW5kbGUub2Zmc2V0SGVpZ2h0IC8gMiArICJweCIKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmhpZ2hsaWdodFBhbmVsID0gZnVuY3Rpb24gKGEpIHsKICAgIFNUWC5jbGVhckNhbnZhcyh0aGlzLmNoYXJ0LnRlbXBDYW52YXMsIHRoaXMpOwogICAgdGhpcy5wbG90TGluZSgwLCAxMCwgYS50b3AsIGEudG9wLCB0aGlzLmNhbnZhc1N0eWxlKCJzdHhfcGFuZWxfaGlnaGxpZ2h0IiksICJsaW5lIiwgdGhpcy5jaGFydC50ZW1wQ2FudmFzLmNvbnRleHQsICExKTsKICAgIGEuaGlnaGxpZ2h0ZWQgPSAhMAp9OwpTVFhDaGFydC5wcm90b3R5cGUudW5oaWdobGlnaHRQYW5lbCA9IGZ1bmN0aW9uIChhKSB7CiAgICBTVFguY2xlYXJDYW52YXModGhpcy5jaGFydC50ZW1wQ2FudmFzLCB0aGlzKTsKICAgIGEuaGlnaGxpZ2h0ZWQgPSAhMQp9OwpTVFhDaGFydC5wcm90b3R5cGUuc2V0VHJhc2hDYW4gPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoU1RYLnRvdWNoRGV2aWNlKSB7CiAgICAgICAgdmFyIGEgPSB0aGlzLmNvbnRyb2xzLm1TdGlja3k7CiAgICAgICAgYSAmJiAoYS5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayIsIGEuY2hpbGRyZW5bMF0uc3R5bGUuZGlzcGxheSA9ICJub25lIiwgYS5jaGlsZHJlblsxXS5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayIsIGEuc3R5bGUudG9wID0gdGhpcy5iYWNrT3V0WShTVFhDaGFydC5jcm9zc2hhaXJZKSAtIDYwICsgInB4IiwgYS5zdHlsZS5yaWdodCA9IHRoaXMuY2hhcnQuY2FudmFzV2lkdGggLSAodGhpcy5iYWNrT3V0WChTVFhDaGFydC5jcm9zc2hhaXJYKSAtIDUwKSArICJweCIpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5waXhlbEZyb21CYXIgPSBmdW5jdGlvbiAoYSkgewogICAgcmV0dXJuIE1hdGgucm91bmQoYSAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoICsgdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggLyAzKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuYmFyRnJvbVBpeGVsID0gZnVuY3Rpb24gKGEpIHsKICAgIHJldHVybiBNYXRoLmZsb29yKGEgLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnRpY2tGcm9tUGl4ZWwgPSBmdW5jdGlvbiAoYSwgYikgewogICAgYiB8fCAoYiA9IHRoaXMuY2hhcnQpOwogICAgdmFyIGMgPSBNYXRoLnJvdW5kKChhICsgKGIuZGF0YVNldC5sZW5ndGggLSBiLnNjcm9sbCkgKiB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCkgLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAtIDAuNDk5KTsKICAgIHJldHVybiBjICo9IHRoaXMubGF5b3V0LnBlcmlvZGljaXR5Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5waXhlbEZyb21UaWNrID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGIgfHwgKGIgPSB0aGlzLmNoYXJ0KTsKICAgIHJldHVybiAoYSAtIGIuZGF0YVNldC5sZW5ndGggKyBiLnNjcm9sbCkgKiB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCArIHRoaXMub2Zmc2V0Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5waXhlbEZyb21EYXRlID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiB0aGlzLnBpeGVsRnJvbVRpY2sodGhpcy50aWNrRnJvbURhdGUoYSwgYiksIGIpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5wcmljZUZyb21QaXhlbCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBiIHx8IChiID0gdGhpcy5jaGFydC5wYW5lbCk7CiAgICB2YXIgYyA9IGIuY2hhcnQsCiAgICAgICAgZCA9IGIueUF4aXM7CiAgICBhID0gZC5ib3R0b20gLSBhOwogICAgdmFyIGUgPSBkLmxvdyArIGEgLyBkLm11bHRpcGxpZXIsCiAgICAgICAgZSA9IE1hdGgucm91bmQoZSAqIGMucm91bmRpdCkgLyBjLnJvdW5kaXQ7CiAgICBkLnNlbWlMb2cgJiYgKGUgPSBNYXRoLnBvdygxMCwgZC5sb2dMb3cgKyBhICogZC5sb2dTaGFkb3cgLyBkLmhlaWdodCkpOwogICAgcmV0dXJuIGUKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnZhbHVlRnJvbVBpeGVsID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGIgfHwgKGIgPSB0aGlzLndoaWNoUGFuZWwoYSkpOwogICAgcmV0dXJuIHRoaXMucHJpY2VGcm9tUGl4ZWwoYSwgYikKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnZhbHVlRnJvbVBpeGVsVW50cmFuc2Zvcm0gPSBmdW5jdGlvbiAoYSwgYikgewogICAgYiB8fCAoYiA9IHRoaXMud2hpY2hQYW5lbChhKSk7CiAgICB2YXIgYyA9IHRoaXMucHJpY2VGcm9tUGl4ZWwoYSwgYik7CiAgICBiLmNoYXJ0LnVudHJhbnNmb3JtRnVuYyAmJiBiLm5hbWUgPT0gYi5jaGFydC5uYW1lICYmIChjID0gYi5jaGFydC51bnRyYW5zZm9ybUZ1bmModGhpcywgYi5jaGFydCwgYykpOwogICAgcmV0dXJuIGMKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnBpeGVsRnJvbVByaWNlVHJhbnNmb3JtID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGIuY2hhcnQudHJhbnNmb3JtRnVuYyAmJiAoYSA9IGIuY2hhcnQudHJhbnNmb3JtRnVuYyh0aGlzLCBiLmNoYXJ0LCBhKSk7CiAgICByZXR1cm4gdGhpcy5waXhlbEZyb21QcmljZShhLCBiKQp9OwpTVFhDaGFydC5wcm90b3R5cGUucGl4ZWxGcm9tUHJpY2UgPSBmdW5jdGlvbiAoYSwgYikgewogICAgYiB8fCAoYiA9IHRoaXMuY2hhcnQucGFuZWwpOwogICAgdmFyIGMgPSBiLnlBeGlzLAogICAgICAgIGQgPSAoYy5oaWdoIC0gYSkgKiBjLm11bHRpcGxpZXI7CiAgICBpZiAoYy5zZW1pTG9nKSB7CiAgICAgICAgZCA9IE1hdGgubG9nKGEpIC8gTWF0aC5MTjEwOwogICAgICAgIDAgPj0gYSAmJiAoZCA9IDApOwogICAgICAgIHZhciBlID0gYy5oZWlnaHQsCiAgICAgICAgICAgIGQgPSBlIC0gZSAqIChkIC0gYy5sb2dMb3cpIC8gYy5sb2dTaGFkb3cKICAgIH0KICAgIHJldHVybiBkICs9IGMudG9wCn07ClNUWENoYXJ0LnByb3RvdHlwZS5waXhlbEZyb21WYWx1ZUFkanVzdGVkID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIGlmICh0aGlzLmxheW91dC5hZGogfHwgIXRoaXMuY2hhcnRzW2EubmFtZV0pIHJldHVybiB0aGlzLnBpeGVsRnJvbVByaWNlVHJhbnNmb3JtKGMsIGEpOwogICAgYiA9IE1hdGgucm91bmQoYik7CiAgICByZXR1cm4gMCA8IGIgJiYgYiA8IGEuY2hhcnQuZGF0YVNldC5sZW5ndGggJiYgKHJhdGlvID0gYS5jaGFydC5kYXRhU2V0W2JdLnJhdGlvKSA/IAogICAgCQl0aGlzLnBpeGVsRnJvbVByaWNlVHJhbnNmb3JtKGMgKiByYXRpbywgYSkgOgogICAgCQkJdGhpcy5waXhlbEZyb21QcmljZVRyYW5zZm9ybShjLCBhKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuYWRqdXN0SWZOZWNlc3NhcnkgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgaWYgKHRoaXMubGF5b3V0LmFkaiB8fCAhYSB8fCAhdGhpcy5jaGFydHNbYS5uYW1lXSkgcmV0dXJuIGM7CiAgICBiID0gTWF0aC5yb3VuZChiKTsKICAgIHJldHVybiAwIDwgYiAmJiBiIDwgYS5jaGFydC5kYXRhU2V0Lmxlbmd0aCAmJiAocmF0aW8gPSBhLmNoYXJ0LmRhdGFTZXRbYl0ucmF0aW8pID8gYyAvIHJhdGlvIDogYwp9OwpTVFhDaGFydC5wcm90b3R5cGUuc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIGEudHJhbnNmb3JtRnVuYyA9IGI7CiAgICBhLnVudHJhbnNmb3JtRnVuYyA9IGMKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnVuc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gKGEpIHsKICAgIGRlbGV0ZSBhLnRyYW5zZm9ybUZ1bmM7CiAgICBkZWxldGUgYS51bnRyYW5zZm9ybUZ1bmM7CiAgICBmb3IgKHZhciBiID0gMDsgYiA8IGEuZGF0YVNldC5sZW5ndGg7IGIrKykgYS5kYXRhU2V0W2JdLnRyYW5zZm9ybSA9IG51bGwKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnVuZG8gPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnJ1blByZXBlbmQoInVuZG8iLCBhcmd1bWVudHMpIHx8ICh0aGlzLmFjdGl2ZURyYXdpbmcgJiYgKHRoaXMuYWN0aXZlRHJhd2luZy5hYm9ydCgpLCB0aGlzLmFjdGl2ZURyYXdpbmcgPSBudWxsLCBTVFguY2xlYXJDYW52YXModGhpcy5jaGFydC50ZW1wQ2FudmFzLCB0aGlzKSwgdGhpcy5kcmF3KCksIFNUWC5zd2FwQ2xhc3NOYW1lKHRoaXMuY29udHJvbHMuY3Jvc3NYLCAic3R4X2Nyb3NzaGFpciIsICJzdHhfY3Jvc3NoYWlyX2RyYXdpbmciKSwgU1RYLnN3YXBDbGFzc05hbWUodGhpcy5jb250cm9scy5jcm9zc1ksICJzdHhfY3Jvc3NoYWlyIiwgInN0eF9jcm9zc2hhaXJfZHJhd2luZyIpLCBTVFhDaGFydC5kcmF3aW5nTGluZSA9ICExKSwgdGhpcy5ydW5BcHBlbmQoInVuZG8iLCBhcmd1bWVudHMpKQp9OwpTVFhDaGFydC5wcm90b3R5cGUudW5kb1N0YW1wID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy51bmRvU3RhbXBzLnB1c2goU1RYLnNoYWxsb3dDbG9uZSh0aGlzLmRyYXdpbmdPYmplY3RzKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnVuZG9MYXN0ID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5hY3RpdmVEcmF3aW5nID8gdGhpcy51bmRvKCkgOiB0aGlzLnVuZG9TdGFtcHMubGVuZ3RoICYmICh0aGlzLmRyYXdpbmdPYmplY3RzID0gdGhpcy51bmRvU3RhbXBzLnBvcCgpLCB0aGlzLmRyYXcoKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmFkZERyYXdpbmcgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy51bmRvU3RhbXAoKTsKICAgIHRoaXMuZHJhd2luZ09iamVjdHMucHVzaChhKQp9OwpTVFhDaGFydC5wcm90b3R5cGUucGxvdExpbmUgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSwgZiwgZywgaywgbSkgewogICAgbSB8fCAobSA9IHt9KTsKICAgIGlmICgibm9uZSIgIT0gbS5wYXR0ZXJuKSB7CiAgICAgICAgITAgPT0gayAmJiAoayA9IHRoaXMuY2hhcnQucGFuZWwpOwogICAgICAgIGlmIChudWxsID09IGcgfHwgInVuZGVmaW5lZCIgPT0gdHlwZW9mIGcpIGcgPSB0aGlzLmNoYXJ0LmNvbnRleHQ7CiAgICAgICAgaWYgKCEoaXNOYU4oYSkgfHwgaXNOYU4oYikgfHwgaXNOYU4oYykgfHwgaXNOYU4oZCkpKSB7CiAgICAgICAgICAgIHZhciBsID0gMCwKICAgICAgICAgICAgICAgIG4gPSB0aGlzLmNoYXJ0LmNhbnZhc0hlaWdodCwKICAgICAgICAgICAgICAgIHIgPSB0aGlzLmNoYXJ0LndpZHRoOwogICAgICAgICAgICBrICYmIChuID0gay55QXhpcy5ib3R0b20sIGwgPSBrLnlBeGlzLnRvcCk7CiAgICAgICAgICAgIGlmICgicmF5IiA9PSBmKSB7CiAgICAgICAgICAgICAgICBrID0gMUU3OwogICAgICAgICAgICAgICAgYiA8IGEgJiYgKGsgPSAtMUU3KTsKICAgICAgICAgICAgICAgIHZhciBwID0gewogICAgICAgICAgICAgICAgICAgIHgwOiBhLAogICAgICAgICAgICAgICAgICAgIHgxOiBiLAogICAgICAgICAgICAgICAgICAgIHkwOiBjLAogICAgICAgICAgICAgICAgICAgIHkxOiBkCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZCA9IHlJbnRlcnNlY3Rpb24ocCwgayk7CiAgICAgICAgICAgICAgICBiID0gawogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgibGluZSIgPT0gZiB8fCAiaG9yaXpvbnRhbCIgPT0gZiB8fCAidmVydGljYWwiID09IGYpIGsgPSAxRTcsIHAgPSB7CiAgICAgICAgICAgICAgICB4MDogYSwKICAgICAgICAgICAgICAgIHgxOiBiLAogICAgICAgICAgICAgICAgeTA6IGMsCiAgICAgICAgICAgICAgICB5MTogZAogICAgICAgICAgICB9LCBkID0geUludGVyc2VjdGlvbihwLCBrKSwgYyA9IHlJbnRlcnNlY3Rpb24ocCwgLTFFNyksIGEgPSAtMUU3LCBiID0gazsKICAgICAgICAgICAgdmFyIHMgPSAwOwogICAgICAgICAgICBrID0gMTsKICAgICAgICAgICAgdmFyIHQgPSBiIC0gYTsKICAgICAgICAgICAgYiA9IGQgLSBjOwogICAgICAgICAgICBmb3IgKHZhciBxLCB5LCB2LCB3ID0gMDsgNCA+IHc7IHcrKykgewogICAgICAgICAgICAgICAgMCA9PSB3ICYmIChxID0gLXQsIHkgPSAtKDAgLSBhKSk7CiAgICAgICAgICAgICAgICAxID09IHcgJiYgKHEgPSB0LCB5ID0gciAtIGEpOwogICAgICAgICAgICAgICAgMiA9PSB3ICYmIChxID0gLWIsIHkgPSAtKGwgLSBjKSk7CiAgICAgICAgICAgICAgICAzID09IHcgJiYgKHEgPSBiLCB5ID0gbiAtIGMpOwogICAgICAgICAgICAgICAgdiA9IHkgLyBxOwogICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZCAmJiAwID09IHEgJiYgMCA+IHkpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgIGlmICgwID4gcSkgewogICAgICAgICAgICAgICAgICAgIGlmICh2ID4gaykgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgIHYgPiBzICYmIChzID0gdikKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA8IHEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodiA8IHMpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICB2IDwgayAmJiAoayA9IHYpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcSA9IGEgKyBzICogdDsKICAgICAgICAgICAgeSA9IGMgKyBzICogYjsKICAgICAgICAgICAgYSArPSBrICogdDsKICAgICAgICAgICAgayA9IGMgKyBrICogYjsKICAgICAgICAgICAgaWYgKG51bGwgPT0gZCAmJiBudWxsID09IGMpIHsKICAgICAgICAgICAgICAgIGlmICh5ID0gbCwgayA9IG4sIGEgPSBxID0gcC54MCwgcC54MCA+IHIgfHwgMCA+IHAueDApIHJldHVybiAhMQogICAgICAgICAgICB9IGVsc2UgaWYgKG51bGwgPT0gZCAmJiAoayA9IHAueTAgPCBwLnkxID8gbiA6IGwsIGEgPSBxID0gcC54MCwgcC54MCA+IHIgfHwgMCA+IHAueDApKSByZXR1cm4gITE7CiAgICAgICAgICAgIGcubGluZVdpZHRoID0gMS4xOwogICAgICAgICAgICAib2JqZWN0IiA9PSB0eXBlb2YgZSA/IChnLnN0cm9rZVN0eWxlID0gZS5jb2xvciwgZy5nbG9iYWxBbHBoYSA9CiAgICAgICAgICAgICAgICBlLm9wYWNpdHkgPyBlLm9wYWNpdHkgOiAxLCBnLmxpbmVXaWR0aCA9IHBhcnNlSW50KHN0cmlwUFgoZS53aWR0aCkpKSA6IG51bGwgPT0gZSB8fCAiYXV0byIgPT0gZSB8fCBTVFguaXNUcmFuc3BhcmVudChlKSA/IGcuc3Ryb2tlU3R5bGUgPSB0aGlzLmRlZmF1bHRDb2xvciA6IGcuc3Ryb2tlU3R5bGUgPSBlOwogICAgICAgICAgICBtLm9wYWNpdHkgJiYgKGcuZ2xvYmFsQWxwaGEgPSBtLm9wYWNpdHkpOwogICAgICAgICAgICBtLmxpbmVXaWR0aCAmJiAoZy5saW5lV2lkdGggPSBtLmxpbmVXaWR0aCk7CiAgICAgICAgICAgICJ6aWcgemFnIiA9PSBmICYmIChnLmxpbmVXaWR0aCA9IDUpOwogICAgICAgICAgICBnLmJlZ2luUGF0aCgpOwogICAgICAgICAgICBlID0gbnVsbDsKICAgICAgICAgICAgbS5wYXR0ZXJuICYmIChlID0gbS5wYXR0ZXJuLCAic29saWQiID09IGUgPyBlID0gbnVsbCA6ICJkb3R0ZWQiID09IGUgPyBlID0gW2cubGluZVdpZHRoLCBnLmxpbmVXaWR0aF0gOiAiZGFzaGVkIiA9PSBlICYmIChlID0gWzUgKiBnLmxpbmVXaWR0aCwgNSAqIGcubGluZVdpZHRoXSkpOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZy5zdHhMaW5lKHEsIHksIGEsIGssIGcuc3Ryb2tlU3R5bGUsIGcuZ2xvYmFsQWxwaGEsIGcubGluZVdpZHRoLCBlKQogICAgICAgICAgICB9IGNhdGNoIChEKSB7fQogICAgICAgICAgICBnLnN0cm9rZSgpOwogICAgICAgICAgICBnLmNsb3NlUGF0aCgpOwogICAgICAgICAgICBnLmdsb2JhbEFscGhhID0gMQogICAgICAgIH0KICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRyYXdpbmdDbGljayA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICBpZiAoIXRoaXMuYWN0aXZlRHJhd2luZykgewogICAgICAgIGlmICghYSkgcmV0dXJuOwogICAgICAgIHZhciBkID0gU1RYQ2hhcnQuZHJhd2luZ1Rvb2xzW1NUWENoYXJ0LnZlY3RvclR5cGVdOwogICAgICAgICFkICYmIFNUWC5EcmF3aW5nW1NUWENoYXJ0LnZlY3RvclR5cGVdICYmIChkID0gU1RYLkRyYXdpbmdbU1RYQ2hhcnQudmVjdG9yVHlwZV0sIFNUWENoYXJ0LnJlZ2lzdGVyRHJhd2luZ1Rvb2woU1RYQ2hhcnQudmVjdG9yVHlwZSwgZCkpOwogICAgICAgIGlmIChkICYmICh0aGlzLmFjdGl2ZURyYXdpbmcgPSBuZXcgZCwgdGhpcy5hY3RpdmVEcmF3aW5nLmNvbnN0cnVjdCh0aGlzLCBhKSwgIXRoaXMuY2hhcnRzW2EubmFtZV0gJiYgdGhpcy5hY3RpdmVEcmF3aW5nLmNoYXJ0c09ubHkpKSB7CiAgICAgICAgICAgIHRoaXMuYWN0aXZlRHJhd2luZyA9IG51bGw7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLmFjdGl2ZURyYXdpbmcgPyAoYiA9IHRoaXMudGlja0Zyb21QaXhlbChiLCBhLmNoYXJ0KSAvIHRoaXMubGF5b3V0LnBlcmlvZGljaXR5LCBhID0KICAgICAgICB0aGlzLnBhbmVsc1t0aGlzLmFjdGl2ZURyYXdpbmcucGFuZWxOYW1lXSwgYyA9IHRoaXMuYWRqdXN0SWZOZWNlc3NhcnkoYSwgYiwgdGhpcy52YWx1ZUZyb21QaXhlbFVudHJhbnNmb3JtKGMsIGEpKSwgdGhpcy5wcmVmZXJlbmNlcy5tYWduZXQgJiYgdGhpcy5tYWduZXRpemVkUHJpY2UgJiYgKGMgPSB0aGlzLmFkanVzdElmTmVjZXNzYXJ5KGEsIGIsIHRoaXMubWFnbmV0aXplZFByaWNlKSksIHRoaXMuYWN0aXZlRHJhd2luZy5jbGljayh0aGlzLmNoYXJ0LnRlbXBDYW52YXMuY29udGV4dCwgYiwgYykgPyB0aGlzLmFjdGl2ZURyYXdpbmcgJiYgKFNUWENoYXJ0LmRyYXdpbmdMaW5lID0gITEsIFNUWC5jbGVhckNhbnZhcyh0aGlzLmNoYXJ0LnRlbXBDYW52YXMsIHRoaXMpLCB0aGlzLmFkZERyYXdpbmcodGhpcy5hY3RpdmVEcmF3aW5nKSwgdGhpcy5hY3RpdmVEcmF3aW5nID0gbnVsbCwgdGhpcy5kcmF3KCksIHRoaXMuY2hhbmdlT2NjdXJyZWQoInZlY3RvciIpLCBTVFguc3dhcENsYXNzTmFtZSh0aGlzLmNvbnRyb2xzLmNyb3NzWCwgInN0eF9jcm9zc2hhaXIiLAogICAgICAgICAgICAic3R4X2Nyb3NzaGFpcl9kcmF3aW5nIiksIFNUWC5zd2FwQ2xhc3NOYW1lKHRoaXMuY29udHJvbHMuY3Jvc3NZLCAic3R4X2Nyb3NzaGFpciIsICJzdHhfY3Jvc3NoYWlyX2RyYXdpbmciKSkgOiAodGhpcy5jaGFuZ2VPY2N1cnJlZCgiZHJhd2luZyIpLCBTVFhDaGFydC5kcmF3aW5nTGluZSA9ICEwLCBTVFguc3dhcENsYXNzTmFtZSh0aGlzLmNvbnRyb2xzLmNyb3NzWCwgInN0eF9jcm9zc2hhaXJfZHJhd2luZyIsICJzdHhfY3Jvc3NoYWlyIiksIFNUWC5zd2FwQ2xhc3NOYW1lKHRoaXMuY29udHJvbHMuY3Jvc3NZLCAic3R4X2Nyb3NzaGFpcl9kcmF3aW5nIiwgInN0eF9jcm9zc2hhaXIiKSksICEwKSA6ICExCn07ClNUWENoYXJ0LnByb3RvdHlwZS53aGljaFBhbmVsID0gZnVuY3Rpb24gKGEpIHsKICAgIGZvciAodmFyIGIgaW4gdGhpcy5wYW5lbHMpIHsKICAgICAgICB2YXIgYyA9IHRoaXMucGFuZWxzW2JdOwogICAgICAgIGlmICghYy5oaWRkZW4gJiYgYSA+IGMudG9wICYmIGEgPCBjLmJvdHRvbSkgcmV0dXJuIGMKICAgIH0KICAgIHJldHVybiBudWxsCn07ClNUWENoYXJ0LnByb3RvdHlwZS5tb3VzZXVwID0gZnVuY3Rpb24gKGEpIHsKICAgIGlmICh0aGlzLmRpc3BsYXlJbml0aWFsaXplZCAmJiAodGhpcy5ncmFiYmluZ1NjcmVlbiA9ICExLCAiIiA9PSB0aGlzLm9wZW5EaWFsb2cpKQogICAgICAgIGlmICh0aGlzLmdyYWJPdmVycmlkZUNsaWNrKSB1bmFwcGVuZENsYXNzTmFtZShkb2N1bWVudC5ib2R5LCAiZ3JhYiIpLCB0aGlzLmdyYWJPdmVycmlkZUNsaWNrID0gITE7CiAgICAgICAgZWxzZSBpZiAodGhpcy5kaXNwbGF5Q3Jvc3NoYWlycykKICAgICAgICBpZiAoU1RYQ2hhcnQuaW5zaWRlQ2hhcnQgJiYgdW5hcHBlbmRDbGFzc05hbWUoZG9jdW1lbnQuYm9keSwgImdyYWIiKSwgbnVsbCAhPSBTVFhDaGFydC5yZXNpemluZ1BhbmVsKSBTVFguY2xlYXJDYW52YXModGhpcy5jaGFydC50ZW1wQ2FudmFzLCB0aGlzKSwgdGhpcy5yZXNpemVQYW5lbHMoKSwgU1RYQ2hhcnQucmVzaXppbmdQYW5lbCA9IG51bGw7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGEgfHwgKGEgPSBldmVudCk7CiAgICAgICAgICAgIGlmIChhLndoaWNoICYmIDIgPD0gYS53aGljaCB8fCBhLmJ1dHRvbiAmJiAyIDw9IGEuYnV0dG9uKSByZXR1cm4gdGhpcy5hbnlIaWdobGlnaHRlZCA/CiAgICAgICAgICAgICAgICAodGhpcy5kZWxldGVIaWdobGlnaHRlZCgpLCBhLnByZXZlbnREZWZhdWx0ICYmIGEucHJldmVudERlZmF1bHQoKSwgITEpIDogITA7CiAgICAgICAgICAgIGEucGFnZVggfHwgKGEucGFnZVggPSBhLmNsaWVudFggKyBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCwgYS5wYWdlWSA9IGEuY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCk7CiAgICAgICAgICAgIGlmICghKGEucGFnZVggPCB0aGlzLmNoYXJ0LmxlZnQgfHwgYS5wYWdlWCA+IHRoaXMuY2hhcnQucmlnaHQgfHwgYS5wYWdlWSA8IHRoaXMuY2hhcnQudG9wIHx8IGEucGFnZVkgPiB0aGlzLmNoYXJ0LmJvdHRvbSB8fCB0aGlzLnJ1blByZXBlbmQoIm1vdXNldXAiLCBhcmd1bWVudHMpKSkgewogICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLmJhY2tPdXRZKGEucGFnZVkpLAogICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLmJhY2tPdXRYKGEucGFnZVgpOwogICAgICAgICAgICAgICAgdGhpcy5kcmF3aW5nQ2xpY2sodGhpcy5jdXJyZW50UGFuZWwsIGMsIGIpOwogICAgICAgICAgICAgICAgdGhpcy5ydW5BcHBlbmQoIm1vdXNldXAiLAogICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cykKICAgICAgICAgICAgfQogICAgICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmdyYWJiaW5nSGFuZCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZ3JhYmJpbmdTY3JlZW4gJiYgKFNUWC50b3VjaERldmljZSB8fCBhcHBlbmRDbGFzc05hbWUoZG9jdW1lbnQuYm9keSwgImdyYWIiKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLm1vdXNlZG93biA9IGZ1bmN0aW9uIChhKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgibW91c2Vkb3duIiwgYXJndW1lbnRzKSAmJiAodGhpcy5tYW5hZ2VUb3VjaEFuZE1vdXNlICYmIGEgJiYgYS5wcmV2ZW50RGVmYXVsdCAmJiBhLnByZXZlbnREZWZhdWx0KCksIHRoaXMuZ3JhYk92ZXJyaWRlQ2xpY2sgPSAhMSwgdGhpcy5kaXNwbGF5SW5pdGlhbGl6ZWQgJiYgdGhpcy5kaXNwbGF5Q3Jvc3NoYWlycyAmJiBTVFhDaGFydC5pbnNpZGVDaGFydCAmJiAoYSB8fCAoYSA9IGV2ZW50KSwgIShhLndoaWNoICYmIDIgPD0gYS53aGljaCB8fCBhLmJ1dHRvbiAmJiAyIDw9IGEuYnV0dG9uKSkpKSB7CiAgICAgICAgZm9yICh2YXIgYiBpbiB0aGlzLnBhbmVscykgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMucGFuZWxzW2JdOwogICAgICAgICAgICBpZiAoYy5oaWdobGlnaHRlZCkgewogICAgICAgICAgICAgICAgU1RYQ2hhcnQucmVzaXppbmdQYW5lbCA9IGM7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLmdyYWJiaW5nU2NyZWVuID0gITA7CiAgICAgICAgdGhpcy55VG9sZXJhbmNlQnJva2VuID0gITE7CiAgICAgICAgYSB8fCAoYSA9IGV2ZW50KTsKICAgICAgICBhLnBhZ2VYIHx8IChhLnBhZ2VYID0gYS5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0ICsKICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsIGEucGFnZVkgPSBhLmNsaWVudFkgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApOwogICAgICAgIGIgPSB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydDsKICAgICAgICB0aGlzLmdyYWJTdGFydFggPSBhLnBhZ2VYOwogICAgICAgIHRoaXMuZ3JhYlN0YXJ0WSA9IGEucGFnZVk7CiAgICAgICAgdGhpcy5ncmFiU3RhcnRTY3JvbGxYID0gYi5zY3JvbGw7CiAgICAgICAgdGhpcy5ncmFiU3RhcnRTY3JvbGxZID0gYi52ZXJ0aWNhbFNjcm9sbDsKICAgICAgICB0aGlzLmdyYWJTdGFydENhbmRsZVdpZHRoID0gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGg7CiAgICAgICAgdGhpcy5ncmFiU3RhcnRab29tID0gYi56b29tOwogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGEuZ3JhYmJpbmdIYW5kKCkKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyksIDEwMCk7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoIm1vdXNlZG93biIsIGFyZ3VtZW50cykKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmNoYW5nZVZlY3RvclR5cGUgPSBmdW5jdGlvbiAoYSkgewogICAgU1RYQ2hhcnQudmVjdG9yVHlwZSA9IGE7CiAgICAiIiA9PSBhICYmIFNUWENoYXJ0LmRyYXdpbmdMaW5lICYmIHRoaXMudW5kbygpOwogICAgdGhpcy5zZXRDcm9zc2hhaXJDb2xvcnMoKTsKICAgIFNUWENoYXJ0Lmluc2lkZUNoYXJ0ICYmIHRoaXMuZG9EaXNwbGF5Q3Jvc3NoYWlycygpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5yZW1vdmVPdmVybGF5ID0gZnVuY3Rpb24gKGEpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJyZW1vdmVPdmVybGF5IiwgYXJndW1lbnRzKSkgewogICAgICAgIGZvciAodmFyIGIgaW4gdGhpcy5vdmVybGF5cykgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMub3ZlcmxheXNbYl07CiAgICAgICAgICAgIGMuZmllbGQgPT0gYSAmJiB0aGlzLnJlbW92ZU92ZXJsYXkoYy5uYW1lKTsKICAgICAgICAgICAgaWYodGhpcy5tYTA1X3N0dWR5ICYmICF0aGlzLm1hMDVfc3R1ZHkuY2FuY2VsbGVkICYmIGMubmFtZSA9PSB0aGlzLm1hMDVfc3R1ZHkubmFtZSl7CiAgICAgICAgICAgIAl0aGlzLm1hMDVfc3R1ZHkuY2FuY2VsbGVkID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZih0aGlzLm1hMTBfc3R1ZHkgJiYgIXRoaXMubWExMF9zdHVkeS5jYW5jZWxsZWQgJiYgYy5uYW1lID09IHRoaXMubWExMF9zdHVkeS5uYW1lKXsKICAgICAgICAgICAgCXRoaXMubWExMF9zdHVkeS5jYW5jZWxsZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKHRoaXMubWEyMF9zdHVkeSAmJiAhdGhpcy5tYTIwX3N0dWR5LmNhbmNlbGxlZCAmJiBjLm5hbWUgPT0gdGhpcy5tYTIwX3N0dWR5Lm5hbWUpewogICAgICAgICAgICAJdGhpcy5tYTIwX3N0dWR5LmNhbmNlbGxlZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYodGhpcy5tYTMwX3N0dWR5ICYmICF0aGlzLm1hMzBfc3R1ZHkuY2FuY2VsbGVkICYmIGMubmFtZSA9PSB0aGlzLm1hMzBfc3R1ZHkubmFtZSl7CiAgICAgICAgICAgIAl0aGlzLm1hMzBfc3R1ZHkuY2FuY2VsbGVkID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZih0aGlzLm1hNjBfc3R1ZHkgJiYgIXRoaXMubWE2MF9zdHVkeS5jYW5jZWxsZWQgJiYgYy5uYW1lID09IHRoaXMubWE2MF9zdHVkeS5uYW1lKXsKICAgICAgICAgICAgCXRoaXMubWE2MF9zdHVkeS5jYW5jZWxsZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAKICAgICAgICAKICAgICAgICBkZWxldGUgdGhpcy5sYXlvdXQuc3R1ZGllc1thXTsKICAgICAgICBkZWxldGUgdGhpcy5vdmVybGF5c1thXTsKICAgICAgICB0aGlzLmRpc3BsYXlTdGlja3koIiIpOwogICAgICAgIHRoaXMuY3JlYXRlRGF0YVNldCgpOwogICAgICAgIHRoaXMuY2hhbmdlT2NjdXJyZWQoImxheW91dCIpOwogICAgICAgIHRoaXMucnVuQXBwZW5kKCJyZW1vdmVPdmVybGF5IiwgYXJndW1lbnRzKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuYWRkU2VyaWVzID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJhZGRTZXJpZXMiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgYiB8fCAoYiA9IHt9KTsKICAgICAgICBiLmNoYXJ0TmFtZSB8fCAoYi5jaGFydE5hbWUgPSB0aGlzLmNoYXJ0Lm5hbWUpOwogICAgICAgIHZhciBjID0gewogICAgICAgICAgICBwYXJhbWV0ZXJzOiBjbG9uZShiKSwKICAgICAgICAgICAgeVZhbHVlQ2FjaGU6IFtdLAogICAgICAgICAgICBkaXNwbGF5OiBhLAogICAgICAgICAgICBpc1N0ZXA6IGIudHlwZSAmJiAic3RlcCIgPT0gYi50eXBlCiAgICAgICAgfTsKICAgICAgICAiZGlzcGxheSIgaW4gYy5wYXJhbWV0ZXJzICYmIChjLmRpc3BsYXkgPSBjLnBhcmFtZXRlcnMuZGlzcGxheSk7CiAgICAgICAgdmFyIGQgPSB0aGlzLmNoYXJ0c1tiLmNoYXJ0TmFtZV07CiAgICAgICAgZCAmJiAoZC5zZXJpZXNbYV0gPSBjKTsKICAgICAgICB0aGlzLnJ1bkFwcGVuZCgiYWRkU2VyaWVzIiwgYXJndW1lbnRzKTsKICAgICAgICByZXR1cm4gYwogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUucmVtb3ZlU2VyaWVzID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHRoaXMucnVuUHJlcGVuZCgicmVtb3ZlU2VyaWVzIiwgYXJndW1lbnRzKSB8fCAoYiB8fCAoYiA9IHRoaXMuY2hhcnQpLCBkZWxldGUgYi5zZXJpZXNbYV0sIHRoaXMucnVuQXBwZW5kKCJyZW1vdmVTZXJpZXMiLCBhcmd1bWVudHMpKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZHJhd0xlZ2VuZEl0ZW0gPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgewogICAgYiA9IGFbMF07CiAgICBhID0gYVsxXTsKICAgIHZhciBlID0gdGhpcy5jaGFydC5jb250ZXh0OwogICAgZS5maWxsU3R5bGUgPSBkOwogICAgZS5maWxsUmVjdChiLCBhLCAxMCwgMTApOwogICAgYiArPSAxMjsKICAgIGUuZmlsbFN0eWxlID0gdGhpcy5kZWZhdWx0Q29sb3I7CiAgICBlLmZpbGxUZXh0KGMsIGIsIGEpOwogICAgYiArPSBlLm1lYXN1cmVUZXh0KGMpLndpZHRoICsgNjsKICAgIHJldHVybiBbYiwgYV0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRyYXdMZWdlbmQgPSBmdW5jdGlvbiAoYSwgYikgewogICAgaWYgKCF0aGlzLnJ1blByZXBlbmQoImRyYXdMZWdlbmQiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgdmFyIGMgPSBhLnBhbmVsOwogICAgICAgIHRoaXMuY2hhcnQuY29udGV4dC50ZXh0QmFzZWxpbmUgPSAidG9wIjsKICAgICAgICB2YXIgZCA9IFthLmxlZ2VuZC54LCBhLmxlZ2VuZC55XSwKICAgICAgICAgICAgZSA9IHRoaXMuY2FudmFzQ29sb3IoInN0eF9saW5lX2NoYXJ0Iik7CiAgICAgICAgaWYgKCJtb3VudGFpbiIgPT0gdGhpcy5sYXlvdXQuY2hhcnRUeXBlKSB7CiAgICAgICAgICAgIHZhciBmID0gdGhpcy5jYW52YXNTdHlsZSgic3R4X21vdW50YWluX2NoYXJ0IikuYm9yZGVyVG9wQ29sb3I7CiAgICAgICAgICAgIGYgJiYgInRyYW5zcGFyZW50IiAhPSBmICYmIChlID0gZikKICAgICAgICB9CiAgICAgICAgdmFyIGQgPSB0aGlzLmRyYXdMZWdlbmRJdGVtKGQsIGMsIGEuc3ltYm9sLCBlKSwKICAgICAgICAgICAgZzsKICAgICAgICBmb3IgKGcgaW4gYikgZCA9IHRoaXMuZHJhd0xlZ2VuZEl0ZW0oZCwgYywgZywgYltnXSk7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImRyYXdMZWdlbmQiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5kcmF3U2VyaWVzID0gZnVuY3Rpb24gKGEpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJkcmF3U2VyaWVzIiwgYXJndW1lbnRzKSkgewogICAgICAgIHZhciBiID0gYS5kYXRhU2VnbWVudCwKICAgICAgICAgICAgYyA9IHt9LCBkOwogICAgICAgIGZvciAoZCBpbiBhLnNlcmllcykgewogICAgICAgICAgICB2YXIgZSA9IGEuc2VyaWVzW2RdLAogICAgICAgICAgICAgICAgZiA9IGUucGFyYW1ldGVycywKICAgICAgICAgICAgICAgIGcgPSBhLnBhbmVsOwogICAgICAgICAgICBmLnBhbmVsICYmIChnID0gdGhpcy5wYW5lbHNbZi5wYW5lbF0pOwogICAgICAgICAgICBpZiAoZykgewogICAgICAgICAgICAgICAgdmFyIGsgPSBnLnlBeGlzLAogICAgICAgICAgICAgICAgICAgIG0gPSBnLmJvdHRvbSwKICAgICAgICAgICAgICAgICAgICBsID0gU1RYLm1pbk1heChiLCBkKSwKICAgICAgICAgICAgICAgICAgICBuID0gbFswXSwKICAgICAgICAgICAgICAgICAgICByID0gZy50b3AsCiAgICAgICAgICAgICAgICAgICAgbSA9IGcuYm90dG9tLAogICAgICAgICAgICAgICAgICAgIHAgPSBtIC0gciwKICAgICAgICAgICAgICAgICAgICBzID0gZi5tYXJnaW5Ub3AsCiAgICAgICAgICAgICAgICAgICAgdCA9IGYubWFyZ2luQm90dG9tOwogICAgICAgICAgICAgICAgcyAmJiAociA9IDEgPCBzID8gciArIHMgOiByICsgcCAqIHMpOwogICAgICAgICAgICAgICAgdCAmJiAobSA9IDEgPCB0ID8gbSAtIHQgOiBtIC0gcCAqIHQpOwogICAgICAgICAgICAgICAgdmFyIGwgPSAobSAtIHIpIC8gKGxbMV0gLSBuKSwKICAgICAgICAgICAgICAgICAgICBwID0gITEsCiAgICAgICAgICAgICAgICAgICAgcSA9IHggPSB6ID0gcHggPSBweSA9IHMgPSBudWxsLAogICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCwKICAgICAgICAgICAgICAgICAgICB5ID0gdGhpcy5vZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuY2hhcnQuY29udGV4dCwKICAgICAgICAgICAgICAgICAgICB3ID0gZS5pc1N0ZXA7CiAgICAgICAgICAgICAgICB2LmJlZ2luUGF0aCgpOwogICAgICAgICAgICAgICAgZS55VmFsdWVDYWNoZS5sZW5ndGggIT0KICAgICAgICAgICAgICAgICAgICBiLmxlbmd0aCAmJiAoZS55VmFsdWVDYWNoZSA9IEFycmF5KGIubGVuZ3RoKSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBEID0gZS55VmFsdWVDYWNoZSwgQyA9ICExLCBBID0gbnVsbCwgdSA9IDA7IHUgPCBiLmxlbmd0aDsgdSsrKQogICAgICAgICAgICAgICAgICAgIGlmIChxID0gYlt1XSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEudHJhbnNmb3JtICYmIGUucGFyYW1ldGVycy5zaGFyZVlBeGlzICYmIChxID0gcS50cmFuc2Zvcm0pLCAocSA9IHFbZF0pIHx8IDAgPT0gcSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgQSA9IHE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdyAmJiBzICYmIHMgIT0gdSAtIDEgPyAocHggPSB4LCBweSA9IHopIDogcHggPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IE1hdGguZmxvb3IodSAqIHQpICsgeTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgJiYgcCAmJiB2LmxpbmVUbyh4LCB6KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHogPSBlLnBhcmFtZXRlcnMuc2hhcmVZQXhpcyA/IHRoaXMucGl4ZWxGcm9tUHJpY2UocSwgZykgOiBtIC0gKHEgLSBuKSAqIGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBweCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgwOiBweCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDE6IHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkwOiBweSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IHoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyBzICE9IHU7IHMrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgQiA9IHlJbnRlcnNlY3Rpb24ocSwgTWF0aC5mbG9vcihzICogdCkgKyB5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRFtzXSA9IEIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEW3VdID0gejsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh6IDwgcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHogPSByOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYubW92ZVRvKHgsIHopOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDID0gITAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeiA+IG0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6ID0gbTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Lm1vdmVUbyh4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEMgPSAhMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIEMgPSAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPyB2LmxpbmVUbyh4LCB6KSA6IChwID0gITAsIHYubW92ZVRvKHgsIHopKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB1CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB3ICYmIChEW3VdID0geik7CiAgICAgICAgICAgICAgICB2LmxpbmVXaWR0aCA9IDE7CiAgICAgICAgICAgICAgICBmLndpZHRoICYmICh2LmxpbmVXaWR0aCA9IGYud2lkdGgpOwogICAgICAgICAgICAgICAgZS5oaWdobGlnaHQgJiYgKHYubGluZVdpZHRoICo9IDIpOwogICAgICAgICAgICAgICAgdi5zdHJva2VTdHlsZSA9IHRoaXMuZGVmYXVsdENvbG9yOwogICAgICAgICAgICAgICAgZi5jb2xvciAmJiAodi5zdHJva2VTdHlsZSA9IGYuY29sb3IpOwogICAgICAgICAgICAgICAgdi5zdHJva2UoKTsKICAgICAgICAgICAgICAgIHYuY2xvc2VQYXRoKCk7CiAgICAgICAgICAgICAgICBpZiAoZS5wYXJhbWV0ZXJzLnNoYXJlWUF4aXMpIHsKICAgICAgICAgICAgICAgICAgICB0eHQgPSBrLnByaWNlRm9ybWF0dGVyID8gay5wcmljZUZvcm1hdHRlcih0aGlzLCBnLCBBKSA6IHRoaXMuZm9ybWF0WUF4aXNQcmljZShBLCBnKTsKICAgICAgICAgICAgICAgICAgICB2YXIgeiA9IHRoaXMucGl4ZWxGcm9tUHJpY2UoQSwgZyk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVZQXhpc0xhYmVsKGcsIHR4dCwgeiwgdi5zdHJva2VTdHlsZSwgIiNGRkZGRkYiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY1tkXSA9IHYuc3Ryb2tlU3R5bGUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBhLmxlZ2VuZCAmJiBlICYmIHRoaXMuZHJhd0xlZ2VuZChhLCBjKTsKICAgICAgICB0aGlzLnJ1bkFwcGVuZCgiZHJhd1NlcmllcyIsCiAgICAgICAgICAgIGFyZ3VtZW50cykKICAgIH0KfTsKU1RYQ2hhcnQuaXNEYWlseUludGVydmFsID0gZnVuY3Rpb24gKGEpIHsKICAgIHJldHVybiAiZGF5IiA9PSBhIHx8ICJ3ZWVrIiA9PSBhIHx8ICJtb250aCIgPT0gYSA/ICEwIDogITEKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmlzRGFpbHlJbnRlcnZhbCA9IGZ1bmN0aW9uIChhKSB7CiAgICByZXR1cm4gImRheSIgPT0gYSB8fCAid2VlayIgPT0gYSB8fCAibW9udGgiID09IGEgPyAhMCA6ICExCn07ClNUWENoYXJ0LnByb3RvdHlwZS5zZXRQZXJpb2RpY2l0eVYyID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJzZXRQZXJpb2RpY2l0eVYyIiwgYXJndW1lbnRzKSkgewogICAgICAgIGlmIChiKSB7CiAgICAgICAgICAgIHZhciBjID0gITE7CiAgICAgICAgICAgIHRoaXMuaXNEYWlseUludGVydmFsKGIpICE9IHRoaXMuaXNEYWlseUludGVydmFsKHRoaXMubGF5b3V0LmludGVydmFsKSAmJiAoYyA9ICEwKTsKICAgICAgICAgICAgdGhpcy5pc0RhaWx5SW50ZXJ2YWwodGhpcy5sYXlvdXQuaW50ZXJ2YWwpIHx8IHRoaXMubGF5b3V0LmludGVydmFsICE9IGIgJiYgKGMgPSAhMCk7CiAgICAgICAgICAgIGlmIChjKSB7CiAgICAgICAgICAgICAgICB0aGlzLmxheW91dC5pbnRlcnZhbCA9IGI7CiAgICAgICAgICAgICAgICB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSA9IGE7CiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZU9jY3VycmVkKCJsYXlvdXQiKTsKICAgICAgICAgICAgICAgIHRoaXMuZGF0YUNhbGxiYWNrICYmIHRoaXMuZGF0YUNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmxheW91dC5pbnRlcnZhbCA9IGIKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgZCBpbiB0aGlzLmNoYXJ0cykgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMuY2hhcnRzW2RdLAogICAgICAgICAgICAgICAgZSwgZiA9IE1hdGgucm91bmQoYy5tYXhUaWNrcyAvIDIpLAogICAgICAgICAgICAgICAgZyA9IG51bGw7CiAgICAgICAgICAgIGMubWF4VGlja3MgPSBNYXRoLnJvdW5kKHRoaXMuY2hhcnQud2lkdGggLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAtIDAuNDk5KSAtIDE7CiAgICAgICAgICAgIHZhciBrID0gITAsCiAgICAgICAgICAgICAgICBnID0gITE7CiAgICAgICAgICAgIGMuc2Nyb2xsIDwgYy5tYXhUaWNrcyA/IGsgPSAhMSA6IGMuZGF0YVNlZ21lbnQgJiYgIWMuZGF0YVNlZ21lbnRbZl0gJiYgKGsgPSAhMSwgZyA9IGMuc2Nyb2xsIC0gYy5kYXRhU2V0Lmxlbmd0aCk7CiAgICAgICAgICAgIGsgJiYgYy5kYXRhU2VnbWVudCAmJiAwIDwgYy5kYXRhU2VnbWVudC5sZW5ndGggJiYgKGMubWF4VGlja3MgPCAoTWF0aC5yb3VuZCh0aGlzLmNoYXJ0LndpZHRoIC8gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggLSAwLjQ5OSkgLSAxKSAvIDIgJiYgKGYgPSBjLmRhdGFTZWdtZW50Lmxlbmd0aCAtIDEpLCBmID49IGMuZGF0YVNlZ21lbnQubGVuZ3RoID8gKGUgPSBjLmRhdGFTZWdtZW50W2MuZGF0YVNlZ21lbnQubGVuZ3RoIC0gMV0uRFQsIGYgPSBjLmRhdGFTZWdtZW50Lmxlbmd0aCAtIDEpIDogZSA9IGMuZGF0YVNlZ21lbnRbZl0uRFQpOwogICAgICAgICAgICB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSA9IGE7CiAgICAgICAgICAgIHRoaXMuY3JlYXRlRGF0YVNldCgpOwogICAgICAgICAgICBpZiAoaykgewogICAgICAgICAgICAgICAgaWYgKGMuZGF0YVNlZ21lbnQgJiYKICAgICAgICAgICAgICAgICAgICAwIDwgYy5kYXRhU2VnbWVudC5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgZm9yIChnID0gYy5kYXRhU2V0Lmxlbmd0aCAtIDE7IDAgPD0gZzsgZy0tKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5kYXRhU2V0W2ddLkRULmdldFRpbWUoKSA8IGUuZ2V0VGltZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnNjcm9sbCA9IGMuZGF0YVNldC5sZW5ndGggLSBnICsgZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGcgPyBjLnNjcm9sbCA9IGMuZGF0YVNldC5sZW5ndGggKyBnIDogKGYgPSBNYXRoLnJvdW5kKHRoaXMucHJlZmVyZW5jZXMud2hpdGVzcGFjZSAvIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoKSwgYy5zY3JvbGwgPSBjLm1heFRpY2tzIC0gZikKICAgICAgICB9CiAgICAgICAgdGhpcy5kcmF3KCk7CiAgICAgICAgdGhpcy5jaGFuZ2VPY2N1cnJlZCgibGF5b3V0Iik7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoInNldFBlcmlvZGljaXR5VjIiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5kcmF3VmVjdG9ycyA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghdGhpcy52ZWN0b3JzU2hvd2luZyAmJiAhdGhpcy5ydW5QcmVwZW5kKCJkcmF3VmVjdG9ycyIsIGFyZ3VtZW50cykpIHsKICAgICAgICB0aGlzLnZlY3RvcnNTaG93aW5nID0gITA7CiAgICAgICAgaWYgKCF0aGlzLmNoYXJ0LmhpZGVEcmF3aW5ncykgewogICAgICAgICAgICBmb3IgKHZhciBhID0ge30sIGIgPSAwOyBiIDwgdGhpcy5kcmF3aW5nT2JqZWN0cy5sZW5ndGg7IGIrKykgewogICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmRyYXdpbmdPYmplY3RzW2JdLAogICAgICAgICAgICAgICAgICAgIGQgPSBjLnBhbmVsTmFtZTsKICAgICAgICAgICAgICAgIHRoaXMucGFuZWxzW2MucGFuZWxOYW1lXSAmJiAoYVtkXSB8fCAoYVtkXSA9IFtdKSwgYVtkXS5wdXNoKGMpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoZCBpbiBhKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0Q2xpcChkKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSBhW2RdLCBiID0gMDsgYiA8IGUubGVuZ3RoOyBiKyspIGMgPSBlW2JdLCBjLnJlbmRlcih0aGlzLmNoYXJ0LmNvbnRleHQpOwogICAgICAgICAgICAgICAgdGhpcy5lbmRDbGlwKCkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnJ1bkFwcGVuZCgiZHJhd1ZlY3RvcnMiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5jb25zb2xpZGF0ZWRRdW90ZSA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCBlKSB7CiAgICBmdW5jdGlvbiBmKGIsIGMpIHsKICAgICAgICBiLmxheW91dC5hZGogJiYgbnVsbCAhPSBhW2NdLlNwbGl0X0Nsb3NlICYmIChtID0gYVtjXS5TcGxpdF9DbG9zZSAvIGFbY10uQ2xvc2UpOwogICAgICAgICJIaWdoIiBpbiBhW2NdICYmIGFbY10uSGlnaCAqIG0gPiBuLkhpZ2ggJiYgKG4uSGlnaCA9IGFbY10uSGlnaCAqIG0pOwogICAgICAgICJMb3ciIGluIGFbY10gJiYgYVtjXS5Mb3cgKiBtIDwgbi5Mb3cgJiYgKG4uTG93ID0gYVtjXS5Mb3cgKiBtKTsKICAgICAgICBuLlZvbHVtZSArPSBhW2NdLlZvbHVtZTsKICAgICAgICAiQ2xvc2UiIGluIGFbY10gJiYgbnVsbCAhPSBhW2NdLkNsb3NlICYmIChuLkNsb3NlID0gYVtjXS5DbG9zZSAqIG0pOwogICAgICAgIG4ucmF0aW8gPSBtCiAgICB9CgogICAgZnVuY3Rpb24gZyhiLCBjKSB7CiAgICAgICAgdmFyIGQgPSBhW2IgLSAxXS5EVCwKICAgICAgICAgICAgZSA9IGFbYl0uRFQ7CiAgICAgICAgaWYgKCJ3ZWVrIiA9PSBjKSB7CiAgICAgICAgICAgIGlmIChlLmdldERheSgpIDwgZC5nZXREYXkoKSkgcmV0dXJuICEwCiAgICAgICAgfSBlbHNlIGlmICgibW9udGgiID09IGMpIHsKICAgICAgICAgICAgaWYgKGUuZ2V0TW9udGgoKSAhPSBkLmdldE1vbnRoKCkpIHJldHVybiAhMAogICAgICAgIH0gZWxzZSBpZiAoZS5nZXREYXkoKSAhPQogICAgICAgICAgICBkLmdldERheSgpKSByZXR1cm4gITA7CiAgICAgICAgcmV0dXJuICExCiAgICB9CgogICAgZnVuY3Rpb24gayhiLCBjLCBkLCBlKSB7CiAgICAgICAgZCAqPSBlOwogICAgICAgIGIgPSBuZXcgRGF0ZShhW2JdLkRUKTsKICAgICAgICBiLnNldE1pbnV0ZXMoYi5nZXRNaW51dGVzKCkgKyBkKTsKICAgICAgICByZXR1cm4gYVtjXS5EVC5nZXRUaW1lKCkgPj0gYi5nZXRUaW1lKCkgPyAhMCA6ICExCiAgICB9CiAgICBpZiAoMCA+IGIgfHwgdGhpcy5ydW5QcmVwZW5kKCJjb25zb2xpZGF0ZWRRdW90ZSIsIGFyZ3VtZW50cykpIHJldHVybiBudWxsOwogICAgIWUgJiYgdGhpcy5kb250Um9sbCAmJiAoZSA9ICEwKTsKICAgIHZhciBtID0gMTsKICAgIHRoaXMubGF5b3V0LmFkaiAmJiBudWxsICE9IGFbYl0uU3BsaXRfQ2xvc2UgPyBtID0gYVtiXS5TcGxpdF9DbG9zZSAvIGFbYl0uQ2xvc2UgOiB0aGlzLmxheW91dC5hZGogJiYgbnVsbCAhPSBhW2JdLkFkal9DbG9zZSAmJiAobSA9IGFbYl0uQWRqX0Nsb3NlIC8gYVtiXS5DbG9zZSk7CiAgICB2YXIgbCA9IGFbYl0sCiAgICAgICAgbiA9IHt9LCByOwogICAgZm9yIChyIGluIGwpIG5bcl0gPSBsW3JdOwogICAgIk9wZW4iIGluIG4gJiYgKG4uT3BlbiA9IGwuT3BlbiAqIG0pOwogICAgIkNsb3NlIiBpbiBuICYmIG51bGwgIT0gbi5DbG9zZSAmJiAobi5DbG9zZSA9IGwuQ2xvc2UgKgogICAgICAgIG0pOwogICAgIkhpZ2giIGluIG4gJiYgKG4uSGlnaCA9IGwuSGlnaCAqIG0pOwogICAgIkxvdyIgaW4gbiAmJiAobi5Mb3cgPSBsLkxvdyAqIG0pOwogICAgbCA9IGI7CiAgICBpZiAoIndlZWsiICE9IGQgJiYgIm1vbnRoIiAhPSBkIHx8IGUpCiAgICAgICAgaWYgKCF0aGlzLmlzRGFpbHlJbnRlcnZhbChkKSAmJiAxIDwgYykKICAgICAgICAgICAgZm9yIChyID0gMTsgciA8IGM7IHIrKykgewogICAgICAgICAgICAgICAgbCA9IGIgKyByOwogICAgICAgICAgICAgICAgaWYgKGwgPCBhLmxlbmd0aCAmJiBrKGIsIGwsIGMsIGQpKSB7CiAgICAgICAgICAgICAgICAgICAgbC0tOwogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAwIDw9IGwgJiYgbCA8IGEubGVuZ3RoICYmIGYodGhpcywgbCkKICAgICAgICAgICAgfSBlbHNlCiAgICAgICAgICAgICAgICBmb3IgKHIgPSAxOyByIDwgYzsgcisrKSBsID0gYiArIHIsIDAgPD0gbCAmJiBsIDwgYS5sZW5ndGggJiYgZih0aGlzLCBsKTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIGZvciAociA9IDE7IHIgPD0gYzsgcisrKSB7CiAgICAgICAgICAgICAgICBmb3IgKDsgbCArIDEgPCBhLmxlbmd0aCAmJiAhZyhsICsgMSwgZCk7KSBsKyssIGYodGhpcywgbCk7CiAgICAgICAgICAgICAgICByICE9IGMgJiYgKGwrKywgbCA8IGEubGVuZ3RoICYmIGYodGhpcywgbCkpCiAgICAgICAgICAgIH0KICAgICAgICBmb3IgKHIgaW4gdGhpcy5wbHVnaW5zKSB7CiAgICAgICAgICAgIHZhciBwID0gdGhpcy5wbHVnaW5zW3JdOwogICAgICAgICAgICBwLmNvbnNvbGlkYXRlICYmIHAuY29uc29saWRhdGUoYSwgYiwgbCwgbikKICAgICAgICB9CiAgICB0aGlzLnJ1bkFwcGVuZCgiY29uc29saWRhdGVkUXVvdGUiLCBhcmd1bWVudHMpOwogICAgcmV0dXJuIHsKICAgICAgICBxdW90ZTogbiwKICAgICAgICBwb3NpdGlvbjogbCArIDEKICAgIH0KfTsKU1RYQ2hhcnQuTk9ORSA9IDA7ClNUWENoYXJ0LkNMT1NFVVAgPSAxOwpTVFhDaGFydC5DTE9TRURPV04gPSAyOwpTVFhDaGFydC5DTE9TRUVWRU4gPSA0OwpTVFhDaGFydC5DQU5ETEVVUCA9IDg7ClNUWENoYXJ0LkNBTkRMRURPV04gPSAxNjsKU1RYQ2hhcnQuQ0FORExFRVZFTiA9IDMyOwpTVFhDaGFydC5wcm90b3R5cGUuZGlzcGxheUNoYXJ0ID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMudG1wV2lkdGggPSBNYXRoLnJvdW5kKDAuNzUgKiB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCk7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgiZGlzcGxheUNoYXJ0IiwgYXJndW1lbnRzKSkgewogICAgICAgIGlmICgibGluZSIgPT0gdGhpcy5sYXlvdXQuY2hhcnRUeXBlKSB0aGlzLmRyYXdMaW5lQ2hhcnQoYSk7CiAgICAgICAgZWxzZSBpZiAoIm1vdW50YWluIiA9PSB0aGlzLmxheW91dC5jaGFydFR5cGUpIHRoaXMuZHJhd01vdW50YWluQ2hhcnQoYSk7CiAgICAgICAgZWxzZSBpZiAoIndhdmUiID09IHRoaXMubGF5b3V0LmNoYXJ0VHlwZSkgdGhpcy5kcmF3V2F2ZUNoYXJ0KGEpOwogICAgICAgIGVsc2UgaWYgKCJiYXIiID09IHRoaXMubGF5b3V0LmNoYXJ0VHlwZSkgdGhpcy5kcmF3QmFyQ2hhcnQoYSwgInN0eF9saW5lX2NoYXJ0Iik7CiAgICAgICAgZWxzZSBpZiAoImNvbG9yZWRfYmFyIiA9PSB0aGlzLmxheW91dC5jaGFydFR5cGUpIHRoaXMuZHJhd0JhckNoYXJ0KGEsICJzdHhfYmFyX3VwIiwgU1RYQ2hhcnQuQ0xPU0VVUCksIHRoaXMuZHJhd0JhckNoYXJ0KGEsCiAgICAgICAgICAgICJzdHhfYmFyX2Rvd24iLCBTVFhDaGFydC5DTE9TRURPV04pLCB0aGlzLmRyYXdCYXJDaGFydChhLCAic3R4X2NhbmRsZV9zaGFkb3ciLCBTVFhDaGFydC5DTE9TRUVWRU4pOwogICAgICAgIGVsc2UgaWYgKCJob2xsb3dfY2FuZGxlIiA9PSB0aGlzLmxheW91dC5jaGFydFR5cGUpIHsKICAgICAgICAgICAgdGhpcy5kcmF3U2hhZG93cyhhLCAic3R4X2hvbGxvd19jYW5kbGVfdXAiLCBTVFhDaGFydC5DTE9TRVVQKTsKICAgICAgICAgICAgdGhpcy5kcmF3U2hhZG93cyhhLCAic3R4X2hvbGxvd19jYW5kbGVfZG93biIsIFNUWENoYXJ0LkNMT1NFRE9XTik7CiAgICAgICAgICAgIHZhciBiID0gdGhpcy5nZXRDYW52YXNDb2xvcigic3R4X2hvbGxvd19jYW5kbGVfdXAiKSwKICAgICAgICAgICAgICAgIGMgPSB0aGlzLmdldENhbnZhc0NvbG9yKCJzdHhfaG9sbG93X2NhbmRsZV9kb3duIik7CiAgICAgICAgICAgIHRoaXMuZHJhd0NhbmRsZXMoYSwgYiwgInRyYW5zcGFyZW50IiwgU1RYQ2hhcnQuQ0xPU0VVUCB8IFNUWENoYXJ0LkNBTkRMRURPV04pOwogICAgICAgICAgICB0aGlzLmRyYXdDYW5kbGVzKGEsIGMsICJ0cmFuc3BhcmVudCIsIFNUWENoYXJ0LkNMT1NFRE9XTiB8IFNUWENoYXJ0LkNBTkRMRURPV04pOwogICAgICAgICAgICB0aGlzLmRyYXdDYW5kbGVzKGEsIHRoaXMuY29udGFpbmVyQ29sb3IsIGIsIFNUWENoYXJ0LkNMT1NFVVAgfCBTVFhDaGFydC5DQU5ETEVVUCk7CiAgICAgICAgICAgIHRoaXMuZHJhd0NhbmRsZXMoYSwgdGhpcy5jb250YWluZXJDb2xvciwgYywgU1RYQ2hhcnQuQ0xPU0VET1dOIHwgU1RYQ2hhcnQuQ0FORExFVVApCiAgICAgICAgfSBlbHNlICJjYW5kbGUiID09IHRoaXMubGF5b3V0LmNoYXJ0VHlwZSA/ICh0aGlzLmRyYXdTaGFkb3dzKGEsICJzdHhfY2FuZGxlX3NoYWRvdyIpLCBiID0gdGhpcy5jYW52YXNTdHlsZSgic3R4X2NhbmRsZV91cCIpLCAoYyA9IGJbImJvcmRlci1sZWZ0LWNvbG9yIl0pIHx8IChjID0gYi5ib3JkZXJMZWZ0Q29sb3IpLCB0aGlzLmRyYXdDYW5kbGVzKGEsIHRoaXMuZ2V0Q2FudmFzQ29sb3IoInN0eF9jYW5kbGVfdXAiKSwgYywgU1RYQ2hhcnQuQ0FORExFVVApLCBiID0gdGhpcy5jYW52YXNTdHlsZSgic3R4X2NhbmRsZV9kb3duIiksIChjID0gYlsiYm9yZGVyLWxlZnQtY29sb3IiXSkgfHwgKGMgPSBiLmJvcmRlckxlZnRDb2xvciksIHRoaXMuZHJhd0NhbmRsZXMoYSwKICAgICAgICAgICAgdGhpcy5nZXRDYW52YXNDb2xvcigic3R4X2NhbmRsZV9kb3duIiksIGMsIFNUWENoYXJ0LkNBTkRMRURPV04pKSA6ICJzY2F0dGVycGxvdCIgPT0gdGhpcy5sYXlvdXQuY2hhcnRUeXBlICYmIHRoaXMuc2NhdHRlcihhKTsKICAgICAgICB0aGlzLmxheW91dC52b2x1bWVVbmRlcmxheSAmJiAoMCA9PSBhLnZvbHVtZU1heCA/IHRoaXMud2F0ZXJtYXJrKCJjaGFydCIsICJjZW50ZXIiLCAiYm90dG9tIiwgdGhpcy50cmFuc2xhdGVJZigiVm9sdW1lIE5vdCBBdmFpbGFibGUiKSkgOiB0aGlzLnZvbFVuZGVybGF5KGEpKTsKICAgICAgICBpZiAodGhpcy5wYW5lbHMudmNoYXJ0ICYmICF0aGlzLnBhbmVscy52Y2hhcnQuaGlkZGVuKSB7CiAgICAgICAgICAgIGIgPSB0aGlzLmNoYXJ0LmRhdGFTZWdtZW50OwogICAgICAgICAgICB0aGlzLmNoYXJ0LmNvbnRleHQuYmVnaW5QYXRoKCk7CiAgICAgICAgICAgIHRoaXMuY2FudmFzQ29sb3IoInN0eF92b2x1bWVfdXAiKTsKICAgICAgICAgICAgZm9yIChjID0gMDsgYyA8PSBiLmxlbmd0aDsgYysrKSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9IGJbY107CiAgICAgICAgICAgICAgICBudWxsICE9IGQgJiYgKGQuQ2xvc2UgPD0gZC5PcGVuIHx8IHRoaXMudm9sYmFyKGMsIGQpKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuY2hhcnQuY29udGV4dC5maWxsKCk7CiAgICAgICAgICAgIHRoaXMuY2hhcnQuY29udGV4dC5jbG9zZVBhdGgoKTsKICAgICAgICAgICAgdGhpcy5jaGFydC5jb250ZXh0LmJlZ2luUGF0aCgpOwogICAgICAgICAgICB0aGlzLmNhbnZhc0NvbG9yKCJzdHhfdm9sdW1lX2Rvd24iKTsKICAgICAgICAgICAgZm9yIChjID0gMDsgYyA8PSBiLmxlbmd0aDsgYysrKSBkID0gYltjXSwgbnVsbCAhPSBkICYmIChkLkNsb3NlID4gZC5PcGVuIHx8IHRoaXMudm9sYmFyKGMsIGQpKTsKICAgICAgICAgICAgdGhpcy5jaGFydC5jb250ZXh0LmZpbGwoKTsKICAgICAgICAgICAgdGhpcy5jaGFydC5jb250ZXh0LmNsb3NlUGF0aCgpCiAgICAgICAgfQogICAgICAgIHRoaXMucnVuQXBwZW5kKCJkaXNwbGF5Q2hhcnQiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS50dXJ0bGUgPSBmdW5jdGlvbiAoYSkgewogICAgZm9yICh2YXIgYiA9IDAsIGMgPSAxOyBjIDwgYS5kYXRhU2V0Lmxlbmd0aDsgYysrKSB7CiAgICAgICAgdmFyIGQgPSBhLmRhdGFTZXRbY10sCiAgICAgICAgICAgIGUgPSBhLmRhdGFTZXRbYyAtIDFdLAogICAgICAgICAgICBlID0gTWF0aC5tYXgoTWF0aC5tYXgoZC5IaWdoIC0gZC5Mb3csIGQuSGlnaCAtIGUuQ2xvc2UpLCBlLkNsb3NlIC0gZC5Mb3cpLAogICAgICAgICAgICBiID0gYiArIGU7CiAgICAgICAgMjAgPCBjICYmIChiIC09IGEuZGF0YVNldFtjIC0gMjBdLnRydWVSYW5nZSk7CiAgICAgICAgZC50cnVlUmFuZ2UgPSBlOwogICAgICAgIGQuYXRyID0gYiAvIDIwCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5jdXJyZW50UXVvdGUgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciBhID0gdGhpcy5jaGFydC5kYXRhU2VnbWVudC5sZW5ndGggLSAxOyAwIDw9IGE7IGEtLSkKICAgICAgICBpZiAobnVsbCAhPSB0aGlzLmNoYXJ0LmRhdGFTZWdtZW50W2FdKSByZXR1cm4gdGhpcy5jaGFydC5kYXRhU2VnbWVudFthXTsKICAgIHJldHVybiBudWxsCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jb3JyZWN0SWZPZmZFZGdlID0gZnVuY3Rpb24gKGEpIHsKICAgIGlmICghdGhpcy5ydW5QcmVwZW5kKCJjb3JyZWN0SWZPZmZFZGdlIiwgYXJndW1lbnRzKSkgewogICAgICAgIGZvciAodmFyIGIgaW4gdGhpcy5jaGFydHMpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmNoYXJ0c1tiXSwKICAgICAgICAgICAgICAgIGQgPSBNYXRoLnJvdW5kKGMubWF4VGlja3MpOwogICAgICAgICAgICBkID4gYy5kYXRhU2V0Lmxlbmd0aCAmJiAoZCA9IGMuZGF0YVNldC5sZW5ndGgpOwogICAgICAgICAgICBpZiAoYy5hbGxvd1Njcm9sbFBhc3QpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gYy5tYXhUaWNrcyAtIGQ7CiAgICAgICAgICAgICAgICBjLm1heFRpY2tzIC0gZSA+IGMuZGF0YVNldC5sZW5ndGggJiYgKGUgPSBjLm1heFRpY2tzIC0gYy5kYXRhU2V0Lmxlbmd0aCk7CiAgICAgICAgICAgICAgICBjLnNjcm9sbCAtIGUgPiBjLmRhdGFTZXQubGVuZ3RoICYmIChjLnNjcm9sbCA9IGMuZGF0YVNldC5sZW5ndGggKyBlKTsKICAgICAgICAgICAgICAgIGMuc2Nyb2xsIDwgZCAmJiAoYy5zY3JvbGwgPSBkKQogICAgICAgICAgICB9IGVsc2UgYy5zY3JvbGwgPCBkICYmIChjLnNjcm9sbCA9IGQpLCBjLnNjcm9sbCA+IGMuZGF0YVNldC5sZW5ndGggJiYgKGMuc2Nyb2xsID0gYy5kYXRhU2V0Lmxlbmd0aCkKICAgICAgICB9CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImNvcnJlY3RJZk9mZkVkZ2UiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5jcmVhdGVEYXRhU2VnbWVudCA9IGZ1bmN0aW9uIChhKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgiY3JlYXRlRGF0YVNlZ21lbnQiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgZm9yICh2YXIgYiBpbiB0aGlzLmNoYXJ0cykgewogICAgICAgICAgICB2YXIgYyA9IHRoaXMuY2hhcnRzW2JdOwogICAgICAgICAgICBhICYmIChjID0gYSk7CiAgICAgICAgICAgIHZhciBkID0gTWF0aC5yb3VuZChjLm1heFRpY2tzKTsKICAgICAgICAgICAgZCA+IGMuZGF0YVNldC5sZW5ndGggJiYgKGQgPSBjLmRhdGFTZXQubGVuZ3RoKTsKICAgICAgICAgICAgaWYgKGMuYWxsb3dTY3JvbGxQYXN0KSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IGMubWF4VGlja3MgLSBkOwogICAgICAgICAgICAgICAgYy5tYXhUaWNrcyAtIGUgPiBjLmRhdGFTZXQubGVuZ3RoICYmIChlID0gYy5tYXhUaWNrcyAtIGMuZGF0YVNldC5sZW5ndGgpOwogICAgICAgICAgICAgICAgYy5zY3JvbGwgLSBlID4gYy5kYXRhU2V0Lmxlbmd0aCAmJiAoYy5zY3JvbGwgPSBjLmRhdGFTZXQubGVuZ3RoICsgZSk7CiAgICAgICAgICAgICAgICBjLnNjcm9sbCA8IGQgJiYgKGMuc2Nyb2xsID0gZCkKICAgICAgICAgICAgfSBlbHNlIGMuc2Nyb2xsIDwgZCAmJiAoYy5zY3JvbGwgPSBkKSwgYy5zY3JvbGwgPiBjLmRhdGFTZXQubGVuZ3RoICYmIChjLnNjcm9sbCA9IGMuZGF0YVNldC5sZW5ndGgpOwogICAgICAgICAgICBjLmRhdGFTZWdtZW50ID0gW107CiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgKGQgPSAwOyBkIDw9IGMubWF4VGlja3M7IGQrKyl7CiAgICAgICAgICAgIAlwb3NpdGlvbiA9IGMuZGF0YVNldC5sZW5ndGggLSBjLnNjcm9sbCArIGQ7CiAgICAgICAgICAgIAlpZihwb3NpdGlvbiA8IGMuZGF0YVNldC5sZW5ndGggJiYgMCA8PSBwb3NpdGlvbiApewogICAgICAgICAgICAJCWMuZGF0YVNlZ21lbnQucHVzaChjLmRhdGFTZXRbcG9zaXRpb25dKTsKICAgICAgICAgICAgCX0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYSkgYnJlYWsKICAgICAgICB9CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImNyZWF0ZURhdGFTZWdtZW50IiwgYXJndW1lbnRzKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUubGVmdFRpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5jaGFydC5kYXRhU2V0Lmxlbmd0aCAtIHRoaXMuY2hhcnQuc2Nyb2xsCn07ClNUWENoYXJ0LnByb3RvdHlwZS5nZXRTdGFydERhdGUgPSBmdW5jdGlvbiAoKSB7CiAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGFTZWdtZW50WzBdLkRUCn07ClNUWENoYXJ0LnByb3RvdHlwZS5zZXRTdGFydERhdGUgPSBmdW5jdGlvbiAoYSkgewogICAgZm9yICh2YXIgYiA9IDA7IGIgPCB0aGlzLmNoYXJ0LmRhdGFTZXQubGVuZ3RoOyBiKyspCiAgICAgICAgaWYgKHRoaXMuY2hhcnQuZGF0YVNldFtiXS5EVC5nZXRUaW1lKCkgPT0gYS5nZXRUaW1lKCkpIHsKICAgICAgICAgICAgdGhpcy5jaGFydC5zY3JvbGwgPSB0aGlzLmNoYXJ0LmRhdGFTZXQubGVuZ3RoIC0gYjsKICAgICAgICAgICAgdGhpcy5kcmF3KCk7CiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuY2xlYXJQaXhlbENhY2hlID0gZnVuY3Rpb24gKCkgewogICAgZm9yICh2YXIgYSBpbiB0aGlzLnBhbmVscykgewogICAgICAgIHZhciBiID0gdGhpcy5wYW5lbHNbYV07CiAgICAgICAgYi5jYWNoZUhpZ2ggPSBudWxsOwogICAgICAgIGIuY2FjaGVMb3cgPSBudWxsOwogICAgICAgIGIuY2FjaGVMZWZ0ID0gMUU2OwogICAgICAgIGIuY2FjaGVSaWdodCA9IC0xCiAgICB9CiAgICBmb3IgKHZhciBjIGluIHRoaXMuY2hhcnRzKQogICAgICAgIGlmIChhID0gdGhpcy5jaGFydHNbY10sIGEuZGF0YVNldCkKICAgICAgICAgICAgZm9yIChiID0gMDsgYiA8IGEuZGF0YVNldC5sZW5ndGg7IGIrKykgYS5kYXRhU2V0W2JdLmNhY2hlID0ge30KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmNyZWF0ZVlBeGlzTGFiZWwgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkgewogICAgdmFyIGYgPSB0aGlzLmNoYXJ0LmNvbnRleHQsCiAgICAgICAgZyA9IHRoaXMuZ2V0Q2FudmFzRm9udFNpemUoInN0eF95YXhpcyIpICsgNiwKICAgICAgICBrID0gZi5tZWFzdXJlVGV4dChiKS53aWR0aCArIDYsCiAgICAgICAgbSA9IHRoaXMuY2hhcnQuY2FudmFzV2lkdGggLSB0aGlzLnlheGlzV2lkdGggLSAzOwogICAgYyArIGcgLyAyID4gYS5ib3R0b20gJiYgKGMgPSBhLmJvdHRvbSAtIGcgLyAyKTsKICAgIGMgLSBnIC8gMiA8IGEudG9wICYmIChjID0gYS50b3AgKyBnIC8gMik7CiAgICBmLmZpbGxTdHlsZSA9IGQ7CiAgICByb3VuZFJlY3QoZiAsIG0tNSwgYyAtIGcgLyAyLCBrLCBnLCAzLCBkLCAhMSk7CiAgICBmLmZpbGxTdHlsZSA9IGUgPyBlIDogIiNGRkZGRkYiOwogICAgZi50ZXh0QmFzZWxpbmUgPSAibWlkZGxlIjsKICAgIHRoaXMuY2FudmFzRm9udCgic3R4X3lheGlzIiwgZik7CiAgICBmLmZpbGxUZXh0KGIgLCBtICsgMyAtNSwgYyk7CiAgICAKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmRyYXdDdXJyZW50SFIgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgiZHJhd0N1cnJlbnRIUiIsIGFyZ3VtZW50cykpIHsKICAgICAgICB2YXIgYSwgYiwgYzsKICAgICAgICBmb3IgKGMgaW4gdGhpcy5jaGFydHMpIHsKICAgICAgICAgICAgYSA9IHRoaXMuY2hhcnRzW2NdOwogICAgICAgICAgICB2YXIgZCA9IGEucGFuZWwsCiAgICAgICAgICAgICAgICBlID0gZC55QXhpczsKICAgICAgICAgICAgKGIgPSBlLndoaWNoU2V0KSB8fCAoYiA9ICJkYXRhU2V0Iik7CiAgICAgICAgICAgIHZhciBmID0gYVtiXS5sZW5ndGg7CiAgICAgICAgICAgIGlmIChmKSB7CiAgICAgICAgICAgICAgICB2YXIgZyA9IGFbYl1bZiAtIDFdLAogICAgICAgICAgICAgICAgICAgIGsgPSBjbG9zZTsKICAgICAgICAgICAgICAgIDIgPD0gYS5kYXRhU2V0Lmxlbmd0aCAmJiAoayA9IGFbYl1bZiAtIDJdLkNsb3NlKTsKICAgICAgICAgICAgICAgIGNsb3NlIDwgayA/IChhID0gdGhpcy5jYW52YXNTdHlsZSgic3R4X2N1cnJlbnRfaHJfZG93biIpLmJhY2tncm91bmRDb2xvciwgYiA9IHRoaXMuY2FudmFzU3R5bGUoInN0eF9jdXJyZW50X2hyX2Rvd24iKS5jb2xvcikgOiAoYSA9IHRoaXMuY2FudmFzU3R5bGUoInN0eF9jdXJyZW50X2hyX3VwIikuYmFja2dyb3VuZENvbG9yLCBiID0gdGhpcy5jYW52YXNTdHlsZSgic3R4X2N1cnJlbnRfaHJfdXAiKS5jb2xvcik7CiAgICAgICAgICAgICAgICBnLnRyYW5zZm9ybSAmJiAoZyA9IGcudHJhbnNmb3JtKTsKICAgICAgICAgICAgICAgIGUgPSBlLnByaWNlRm9ybWF0dGVyID8gZS5wcmljZUZvcm1hdHRlcih0aGlzLCBkLCBnLkNsb3NlKSA6IHRoaXMuZm9ybWF0WUF4aXNQcmljZShnLkNsb3NlLCBkKTsKICAgICAgICAgICAgICAgIGcgPSB0aGlzLnBpeGVsRnJvbVByaWNlKGcuQ2xvc2UsIGQpOwogICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVZQXhpc0xhYmVsKGQsIGUsIGcsIGEsIGIpCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImRyYXdDdXJyZW50SFIiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5nZXREZWZhdWx0Q29sb3IgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmRlZmF1bHRDb2xvciA9ICIjMDAwMDAwIjsKICAgIGZvciAodmFyIGEgPSBudWxsLCBiID0gdGhpcy5jaGFydC5jb250YWluZXI7ICFhIHx8IFNUWC5pc1RyYW5zcGFyZW50KGEpOykgewogICAgICAgIGEgPSBnZXRDb21wdXRlZFN0eWxlKGIpOwogICAgICAgIGlmICghYSkgcmV0dXJuOwogICAgICAgIGEgPSBhLmJhY2tncm91bmRDb2xvcjsKICAgICAgICBTVFguaXNUcmFuc3BhcmVudChhKSAmJiAoYSA9ICJ0cmFuc3BhcmVudCIpOwogICAgICAgIGIgPSBiLnBhcmVudE5vZGU7CiAgICAgICAgaWYgKCFiIHx8ICFiLnRhZ05hbWUpIGJyZWFrCiAgICB9CiAgICBhICYmICh0aGlzLmNvbnRhaW5lckNvbG9yID0gYSwgMC42NSA8IFNUWC5oc3YoYSlbMl0gPyB0aGlzLmRlZmF1bHRDb2xvciA9ICIjMDAwMDAwIiA6IHRoaXMuZGVmYXVsdENvbG9yID0gIiNGRkZGRkYiKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICh0aGlzLmNoYXJ0LmNhbnZhcyAmJiB0aGlzLmNoYXJ0LmRhdGFTZXQgJiYgKHRoaXMub2Zmc2V0ID0gMC43NSAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC8gMiwgU1RYLmNsZWFyQ2FudmFzKHRoaXMuY2hhcnQuY2FudmFzLCB0aGlzKSwgIXRoaXMucnVuUHJlcGVuZCgiZHJhdyIsIGFyZ3VtZW50cykpKSB7CiAgICAgICAgdGhpcy54YXhpc0hlaWdodCA9IHRoaXMuZ2V0Q2FudmFzRm9udFNpemUoInN0eF94YXhpcyIpICsgMzsKICAgICAgICB0aGlzLmdldERlZmF1bHRDb2xvcigpOwogICAgICAgIHRoaXMudmVjdG9yc1Nob3dpbmcgPSAhMTsKICAgICAgICB0aGlzLmRyYXdQYW5lbHMoKTsKICAgICAgICBmb3IgKHZhciBhIGluIHRoaXMuY2hhcnRzKSB7CiAgICAgICAgICAgIHZhciBiID0gdGhpcy5jaGFydHNbYV07CiAgICAgICAgICAgIHRoaXMuY29ycmVjdElmT2ZmRWRnZSgpOwogICAgICAgICAgICB0aGlzLmNyZWF0ZURhdGFTZWdtZW50KCk7CiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZURpc3BsYXkoYik7CiAgICAgICAgICAgIHRoaXMuY3JlYXRlWEF4aXMoYik7CiAgICAgICAgICAgIHRoaXMuY3JlYXRlVm9sdW1lQ2hhcnQoYik7CiAgICAgICAgICAgIGZvciAodmFyIGMgaW4gdGhpcy5wbHVnaW5zKSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zW2NdOwogICAgICAgICAgICAgICAgZC5kaXNwbGF5ICYmIGQuZHJhd1VuZGVyICYmIGQuZHJhd1VuZGVyKHRoaXMsIGIpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5kaXNwbGF5Q2hhcnQoYik7CiAgICAgICAgICAgIHRoaXMuZHJhd1NlcmllcyhiKTsKICAgICAgICAgICAgZm9yIChjIGluIHRoaXMucGx1Z2lucykgZCA9IHRoaXMucGx1Z2luc1tjXSwgZC5kaXNwbGF5ICYmIGQuZHJhd092ZXIgJiYgZC5kcmF3T3Zlcih0aGlzLCBiKQogICAgICAgIH0KICAgICAgICBTVFhTdHVkaWVzLmRpc3BsYXlTdHVkaWVzKHRoaXMpOwogICAgICAgIHRoaXMuY3JlYXRlQ3Jvc3NoYWlycygpOwogICAgICAgIHRoaXMuZHJhd1ZlY3RvcnMoKTsKICAgICAgICB0aGlzLmRyYXdDdXJyZW50SFIoKTsKICAgICAgICB0aGlzLmRpc3BsYXlJbml0aWFsaXplZCA9ICEwOwogICAgICAgIHRoaXMuY29udHJvbHMuaG9tZSAmJiAodGhpcy5jb250cm9scy5ob21lLnN0eWxlLmRpc3BsYXkgPSB0aGlzLmNoYXJ0LnNjcm9sbCAtIDEgPiB0aGlzLmNoYXJ0Lm1heFRpY2tzID8gImJsb2NrIiA6ICJub25lIik7CiAgICAgICAgdGhpcy5kcmF3TWFzdGVyTGluZSgpOwogICAgICAgIHRoaXMuZGlzcGxheVN0dWR5VmFsdWUoZmFsc2UpOwogICAgICAgIHRoaXMucnVuQXBwZW5kKCJkcmF3IiwgYXJndW1lbnRzKQogICAgIAogICAgfQp9OwoKU1RYQ2hhcnQucHJvdG90eXBlLmRpc3BsYXlTdHVkeVZhbHVlID0gZnVuY3Rpb24oc2hvd0NoYW5nZVZhbHVlKXsKCXZhciBjcm9zc2hhaXJUaWNrID0gdGhpcy50aWNrRnJvbVBpeGVsKHRoaXMuYmFja091dFgoU1RYQ2hhcnQuY3Jvc3NoYWlyWCksIHRoaXMuY2hhcnQpOyAKCXZhciBwcmljZXM9IHRoaXMubGF5b3V0LmNyb3NzaGFpciAmJiBzaG93Q2hhbmdlVmFsdWU/IHRoaXMuY2hhcnQuZGF0YVNldFtjcm9zc2hhaXJUaWNrXTogdGhpcy5jaGFydC5kYXRhU2V0W3RoaXMuY2hhcnQuZGF0YVNldC5sZW5ndGggLTFdOwoKCQoJaWYocHJpY2VzIT1udWxsKXsKCQoJCWlmKHByaWNlcyl7CgkJCXZhciBwYW5lbHMgPSB0aGlzLnBhbmVsczsKCQkJdmFyIHBhbmVsQ29udGFpblN0dWR5ID0gZmFsc2U7CgkKCQkJdmFyIHJhbmRvbU4gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAwMDAwMDAtMTAwMDAwMDAwKzEpKSArIDEwMDAwMDAwMDsKCQkJCgkJCWZvcih2YXIgcGFuZWxLZXkgaW4gdGhpcy5wYW5lbHMpewoJCQkJdmFyIHBhbmVsID0gdGhpcy5wYW5lbHNbcGFuZWxLZXldOwoJCQkJdmFyIHN0dWR5TGFiZWxJZCA9IHBhbmVsLnN0dWR5TGFiZWwuaWQ7CgkJCQlwYW5lbC5zdHVkeUxhYmVsLmlkID0gc3R1ZHlMYWJlbElkID0gIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwMDAwMC0xMDAwMDAwMDArMSkpICsgMTAwMDAwMDAwOwoJCQkJJCgiIyIrcGFuZWwuc3R1ZHlMYWJlbC5pZCkudGV4dCgiIik7CgkJCX0KCQkJCgkJLy91cGRhdGUgc3R1ZHkgdmFsdWUgYmFzZWQgb24gdGhlIHRoZSBzdHh4LmNyb3NzaGFpclgKCQlmb3IodmFyIHBhbmVsS2V5IGluIHRoaXMucGFuZWxzKXsKCQkJdmFyIHBhbmVsID0gdGhpcy5wYW5lbHNbcGFuZWxLZXldOwoJCQlmb3IodmFyIHN0dWR5S2V5IGluIHRoaXMubGF5b3V0LnN0dWRpZXMpewoJCQkJdmFyIHN0dWR5ID0gdGhpcy5sYXlvdXQuc3R1ZGllc1tzdHVkeUtleV07CgkJCQkvL2sgbGluZSBpbiB0aGUgY2hhcnQgcGFuZWw7CgkJCQl2YXIgc3R1ZHlMYWJlbElkID0gcGFuZWwuc3R1ZHlMYWJlbC5pZDsKCQkJCWlmKHN0dWR5LnBhbmVsID09IHBhbmVsLm5hbWUpewoJCQkJCWlmKHN0dWR5LnR5cGUgPT0gIm1hIil7CgkJCQkJCWlmKCFwYW5lbENvbnRhaW5TdHVkeSl7CgkJCQkJCQlwYW5lbENvbnRhaW5TdHVkeSA9ICFwYW5lbENvbnRhaW5TdHVkeTsKCQkJCQkJfQoJCQkJCQl2YXIgc3R1ZHlRdW90ZSA9IHRoaXMuZm9ybWF0WUF4aXNQcmljZShwcmljZXNbc3R1ZHkudHlwZS50b1VwcGVyQ2FzZSgpICsgIiAiKyBzdHVkeS5uYW1lXSwgcGFuZWwpOwoJCQkJCQlpZihzdHVkeVF1b3RlKXsKCQkJCQkJCXN0dWR5VGV4dCA9ICIgICIrIHN0dWR5LnR5cGUudG9VcHBlckNhc2UoKSArICIoIitzdHVkeS5kYXlzKyI6IitzdHVkeVF1b3RlKyIpIjsKCQkJCQkJCXZhciBwYW5lbElubmVyVGV4dCA9ICAkKCIjIitzdHVkeUxhYmVsSWQpLnRleHQoKTsKCQkJCQkJCSQoIiMiK3N0dWR5TGFiZWxJZCkudGV4dChwYW5lbElubmVyVGV4dCArICIgIisgc3R1ZHlUZXh0KTsKCQkJCQkJfQoJCQkJCQkKCQkJCQkJCgkJCQkJfQoJCQkJCQoJCQkJCWlmKHN0dWR5LnR5cGUgPT0gIkJvbGxpbmdlciBCYW5kcyIpewoJCQkJCQl2YXIgdG9wVmFsdWUgPSB0aGlzLmZvcm1hdFlBeGlzUHJpY2UocHJpY2VzWyJCb2xsaW5nZXIgQmFuZCBCb3R0b20iICsgIiAiKyBzdHVkeS5uYW1lXSwgcGFuZWwpOwoJCQkJCQl2YXIgbWVkaWFuVmFsdWUgPSB0aGlzLmZvcm1hdFlBeGlzUHJpY2UocHJpY2VzWyJCb2xsaW5nZXIgQmFuZCBCb3R0b20iICsgIiAiKyBzdHVkeS5uYW1lXSwgcGFuZWwpOwoJCQkJCQl2YXIgYm90dG9tVmFsdWUgPSB0aGlzLmZvcm1hdFlBeGlzUHJpY2UocHJpY2VzWyJCb2xsaW5nZXIgQmFuZCBCb3R0b20iICsgIiAiKyBzdHVkeS5uYW1lXSwgcGFuZWwpOwoJCQkJCQl2YXIgcGFuZWxJbm5lclRleHQgPSAkKCIjIitzdHVkeUxhYmVsSWQpLnRleHQoKTsKCQkJCQkJJCgiIyIrc3R1ZHlMYWJlbElkKS50ZXh0KHBhbmVsSW5uZXJUZXh0ICsgIiBCb2xsaW5nZXIgQmFuZCBCb3R0b20gIisgIigiK3RvcFZhbHVlKyAiLCAiK21lZGlhblZhbHVlKyAiLCAiK2JvdHRvbVZhbHVlKyIpIik7CgkJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQkJaWYoc3R1ZHkudHlwZSA9PSAiUFNBUiIpewoJCQkJCQl2YXIgdmFsdWUgPSB0aGlzLmZvcm1hdFlBeGlzUHJpY2UocHJpY2VzWyJSZXN1bHQiICsgIiAiKyBzdHVkeS5uYW1lXSwgcGFuZWwpOwoJCQkJCQl2YXIgcGFuZWxJbm5lclRleHQgPSAgJCgiIyIrc3R1ZHlMYWJlbElkKS50ZXh0KCk7CgkJCQkJCSQoIiMiK3N0dWR5TGFiZWxJZCkudGV4dChwYW5lbElubmVyVGV4dCArICIgUFNBUiggIiArIHN0dWR5LmlucHV0c1siTWluaW11bSBBRiJdICsgIiwgIisgc3R1ZHkuaW5wdXRzWyJNYXhpbXVtIEFGIl0gKyAiIDogIisgdmFsdWUgKyAiKSIpOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQkJCgkJCQl9CgkJCQkKCQkJCS8vbmV3IGsgbGluZSBwYW5lbAoJCQkJaWYocGFuZWwubmFtZSA9PSBzdHVkeS5uYW1lKXsKCQkJCQlpZihzdHVkeS50eXBlID09ICJtYWNkIil7CgkJCQkJCXZhciBkaWZmVmFsdWUgPSB0aGlzLmZvcm1hdFlBeGlzUHJpY2UocHJpY2VzW3N0dWR5Lm5hbWVdLHBhbmVsKTsKCQkJCQkJdmFyIGRlYVZhbHVlID0gdGhpcy5mb3JtYXRZQXhpc1ByaWNlKHByaWNlc1tzdHVkeS5uYW1lICsgIl9oaXN0Il0scGFuZWwpOwoJCQkJCQl2YXIgbWFjZFZhbHVlID0gdGhpcy5mb3JtYXRZQXhpc1ByaWNlKHByaWNlc1sic2lnbmFsICIgKyBzdHVkeS5uYW1lXSxwYW5lbCk7CgkJCQkJCgkJCQkJCSQoIiMiK3N0dWR5TGFiZWxJZCkudGV4dChzdHVkeS5uYW1lICsgIiBESUZGOiIrIGRpZmZWYWx1ZSArICIgREVBOiIrIGRlYVZhbHVlICsgIiBNQUNEOiIgKyBtYWNkVmFsdWUpOwoJCQkJCX0KCQkJCQkKCQkJCQlpZihbIkFjYyBTd2luZyIsICJBVFIiLCJDQ0kiLCJQcmljZSBST0MiLCAgIldpbGxpYW1zICVSIl0uaW5kZXhPZihzdHVkeS50eXBlICkgPj0gMCl7CgkJCQkJCXZhciB0ZW1wVmFsdWUgPSB0aGlzLmZvcm1hdFlBeGlzUHJpY2UocHJpY2VzWyJSZXN1bHQgIiArIHN0dWR5Lm5hbWVdLHBhbmVsKTsKCQkJCQkJJCgiIyIrc3R1ZHlMYWJlbElkKS50ZXh0KHN0dWR5Lm5hbWUgKyAiICIgKyB0ZW1wVmFsdWUpOwoJCQkJCX0KCQkJCQkKCQkJCQlpZihbInJzaSJdLmluZGV4T2Yoc3R1ZHkudHlwZSApID49IDApewoJCQkJCQl2YXIgdGVtcFZhbHVlID0gdGhpcy5mb3JtYXRZQXhpc1ByaWNlKHByaWNlc1siUlNJICIgKyBzdHVkeS5uYW1lXSxwYW5lbCk7CgkJCQkJCSQoIiMiK3N0dWR5TGFiZWxJZCkudGV4dChzdHVkeS5uYW1lICsgIiAiICsgdGVtcFZhbHVlKTsKCQkJCQl9CgkJCQkJCgkJCQkJaWYoWyJUUklYIl0uaW5kZXhPZihzdHVkeS50eXBlICkgPj0gMCl7CgkJCQkJCXZhciBzID0gcHJpY2VzWyJSZXN1bHQgIiArIHN0dWR5Lm5hbWVdIDsKCQkJCQkJCgkJCQkJCXZhciB2YWx1ZSA9ICBVdGlsLmZpeFRvTnVtKHMsNSk7CgkJCQkJCSQoIiMiK3N0dWR5TGFiZWxJZCkudGV4dChzdHVkeS5uYW1lICsgIiAiICsgdmFsdWUpIDsKCQkJCQl9CgkJCQkJCgkJCQkJaWYoWyJzdG9jaGFzdGljcyJdLmluZGV4T2Yoc3R1ZHkudHlwZSApID49IDApewoJCQkJCQl2YXIgZmFzdFZhbHVlID0gdGhpcy5mb3JtYXRZQXhpc1ByaWNlKHByaWNlc1tzdHVkeS5uYW1lXSxwYW5lbCk7CgkJCQkJCXZhciBzbG93VmFsdWUgPSB0aGlzLmZvcm1hdFlBeGlzUHJpY2UocHJpY2VzW3N0dWR5Lm5hbWUrIl8zIl0scGFuZWwpOwoJCQkJCQkkKCIjIitzdHVkeUxhYmVsSWQpLnRleHQoc3R1ZHkubmFtZSArICIgKCIrZmFzdFZhbHVlKyIsICIrc2xvd1ZhbHVlKyIpIik7CgkJCQkJfQoJCQkJCgkJCQkKCQkJCX0KCQkJCQoJCQkJCgkJCQkKCQkJCQoJCQl9CgkJfQoJCX0KCQkKCQkKCX0KfQoKU1RYQ2hhcnQucHJvdG90eXBlLmFkanVzdEJhY2tpbmdTdG9yZSA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICB0aGlzLmRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxOwogICAgMSA+IHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyAmJiAodGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gMSk7CiAgICBiYWNraW5nU3RvcmVSYXRpbyA9IGIud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fCBiLm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgYi5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgYi5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fCBiLmJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgMTsKICAgIHJhdGlvID0gdGhpcy5kZXZpY2VQaXhlbFJhdGlvIC8gYmFja2luZ1N0b3JlUmF0aW87CiAgICBpZiAodGhpcy5kZXZpY2VQaXhlbFJhdGlvICE9PSBiYWNraW5nU3RvcmVSYXRpbyAmJiAoIVNUWC5pc0FuZHJvaWQgfHwgU1RYLmlzX2Nocm9tZSkpIHsKICAgICAgICB2YXIgYyA9IGEud2lkdGgsCiAgICAgICAgICAgIGQgPSBhLmhlaWdodDsKICAgICAgICBhLndpZHRoID0gYyAqIHJhdGlvOwogICAgICAgIGEuaGVpZ2h0ID0gZCAqIHJhdGlvOwogICAgICAgIGEuc3R5bGUud2lkdGggPQogICAgICAgICAgICBjICsgInB4IjsKICAgICAgICBhLnN0eWxlLmhlaWdodCA9IGQgKyAicHgiOwogICAgICAgIGIuc2NhbGUocmF0aW8sIHJhdGlvKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUucmVzaXplQ2FudmFzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGEgPSB0aGlzLmNoYXJ0LmNhbnZhcywKICAgICAgICBiID0gdGhpcy5jaGFydC5jb250ZXh0OwogICAgdGhpcy5jaGFydC50ZW1wQ2FudmFzLmhlaWdodCA9IGEuaGVpZ2h0ID0gdGhpcy5jaGFydC5jb250YWluZXIuY2xpZW50SGVpZ2h0OwogICAgdGhpcy5jaGFydC50ZW1wQ2FudmFzLndpZHRoID0gYS53aWR0aCA9IHRoaXMuY2hhcnQuY29udGFpbmVyLmNsaWVudFdpZHRoOwogICAgdGhpcy5hZGp1c3RCYWNraW5nU3RvcmUoYSwgYik7CiAgICBiID0gZ2V0UG9zKHRoaXMuY2hhcnQuY29udGFpbmVyKTsKICAgIHRoaXMuY2hhcnQubGVmdCA9IGIueDsKICAgIHRoaXMuY2hhcnQudG9wID0gYi55OwogICAgdGhpcy5jaGFydC5jYW52YXNXaWR0aCA9IHRoaXMuY2hhcnQuY29udGFpbmVyLmNsaWVudFdpZHRoOwogICAgdGhpcy5jaGFydC53aWR0aCA9IHRoaXMuY2hhcnQuY2FudmFzV2lkdGggLSB0aGlzLnlheGlzV2lkdGg7CiAgICB0aGlzLmNoYXJ0LnJpZ2h0ID0gYi54ICsgdGhpcy5jaGFydC53aWR0aDsKICAgIHRoaXMuY2hhcnQuY2FudmFzSGVpZ2h0ID0KICAgICAgICB0aGlzLmNoYXJ0LmNvbnRhaW5lci5jbGllbnRIZWlnaHQ7CiAgICB0aGlzLmNoYXJ0LmJvdHRvbSA9IGIueSArIHRoaXMuY2hhcnQuY2FudmFzSGVpZ2h0OwogICAgdGhpcy55VG9sZXJhbmNlID0gMC4wMyAqIGEuaGVpZ2h0OwogICAgYSA9IHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoOwogICAgInVuZGVmaW5lZCIgPT0gdHlwZW9mIGEgJiYgKGEgPSA4KTsKICAgIGZvciAodmFyIGMgaW4gdGhpcy5jaGFydHMpCiAgICAgICAgaWYgKGIgPSB0aGlzLmNoYXJ0c1tjXSwgdGhpcy5sYXlvdXQuc3BhbiAmJiAiIiAhPSB0aGlzLmxheW91dC5zcGFuKSB0aGlzLnNldENhbmRsZVdpZHRoKHRoaXMuZ2V0U3BhbkNhbmRsZVdpZHRoKHRoaXMubGF5b3V0LnNwYW4pLCBiKTsKICAgICAgICBlbHNlIGlmICh0aGlzLnNldENhbmRsZVdpZHRoKGEsIGIpLCBiLnNjcm9sbCA8IGIubWF4VGlja3MpIHsKICAgICAgICB2YXIgZCA9IE1hdGgucm91bmQodGhpcy5wcmVmZXJlbmNlcy53aGl0ZXNwYWNlIC8gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGgpOwogICAgICAgIGIuc2Nyb2xsID0gYi5tYXhUaWNrcyAtIGQKICAgIH0KICAgIHRoaXMuY29udHJvbHMuZmxvYXRIUi5zdHlsZS5sZWZ0ID0gKHRoaXMuY2hhcnQud2lkdGggLTUpICsKICAgICAgICAicHgiCn07CgpTVFhDaGFydC5wcm90b3R5cGUuc2V0TnVtYmVyT2ZDYW5kbGUgPSBmdW5jdGlvbiAobnVtYmVyKXsKCS8vKHRoaXMuY2hhcnQud2lkdGggLSBhLnBhZGRpbmcpIC8gYywKCS8vIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoID0gdGhpcy5jaGFydC53aWR0aCAlIG51bWJlciA9PSAwID8gIHRoaXMuY2hhcnQud2lkdGgvbnVtYmVyIDogdGhpcy5jaGFydC53aWR0aCAvIG51bWJlciArIDE7CgkKCSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCA9dGhpcy5jaGFydC53aWR0aCAvICAobnVtYmVyKyAxKTsKCSB0aGlzLmluaXRpYWxpemVDaGFydCgpOwoJIHRoaXMuZHJhdygpOwp9CgpTVFhDaGFydC5wcm90b3R5cGUuc2V0Q2FuZGxlV2lkdGggPSBmdW5jdGlvbiAoYSwgYikgewogICAgYiB8fCAoYiA9IHRoaXMuY2hhcnQpOwogICAgdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggPSBhOwogICAgYi5tYXhUaWNrcyA9IE1hdGgucm91bmQodGhpcy5jaGFydC53aWR0aCAvIGEgLSAwLjQ5OSkgLSAxCn07ClNUWENoYXJ0LnByb3RvdHlwZS5yZXNpemVDaGFydCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVzaXplQ2FudmFzKCk7CiAgICB0aGlzLmFkanVzdFBhbmVsUG9zaXRpb25zKCk7CiAgICBudWxsICE9IHRoaXMuY2hhcnQuc3ltYm9sICYmIHRoaXMuZHJhdygpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jYWxjdWxhdGVNaW51dGVzSW5TZXNzaW9uID0gZnVuY3Rpb24gKGEpIHsKICAgIHZhciBiID0gNjAgKiAoYS5lbmRIb3VyIC0gYS5iZWdpbkhvdXIpLAogICAgICAgIGIgPSBiICsgYS5lbmRNaW51dGUsCiAgICAgICAgYiA9IGIgLSBhLmJlZ2luTWludXRlOwogICAgNTkgPT0gYS5lbmRNaW51dGUgJiYgYisrOwogICAgYS5taW51dGVzSW5TZXNzaW9uID0gYgp9OwpTVFhDaGFydC5wcm90b3R5cGUubmV3Q2hhcnQgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgYyB8fCAoYyA9IHRoaXMuY2hhcnQpOwogICAgYSAmJiAoYy5zeW1ib2wgPSBhKTsKICAgIHRoaXMuc2V0TWFzdGVyRGF0YShiLCBjKTsKICAgIHRoaXMuY3JlYXRlRGF0YVNldCgpOwogICAgdGhpcy5pbml0aWFsaXplQ2hhcnQoKTsKICAgIHRoaXMuZHJhdygpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5zZXRNYXN0ZXJEYXRhID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGIgfHwgKGIgPSB0aGlzLmNoYXJ0KTsKICAgIHRoaXMuY2FsY3VsYXRlTWludXRlc0luU2Vzc2lvbihiKTsKICAgIGIubWFzdGVyRGF0YSA9IGE7CiAgICAiY2hhcnQiID09IGIubmFtZSAmJiAodGhpcy5tYXN0ZXJEYXRhID0gYSk7CiAgICBiLmRlY2ltYWxQbGFjZXMgPSAyOwogICAgZm9yICh2YXIgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKSB7CiAgICAgICAgdmFyIGQgPSBhW2NdOwogICAgICAgIGQuRFQgPSBzdHJUb0RhdGVUaW1lKGQuRGF0ZSk7CiAgICAgICAgaWYgKGQuQ2xvc2UpIHsKICAgICAgICAgICAgdmFyIGUgPSBkLkNsb3NlLnRvU3RyaW5nKCksCiAgICAgICAgICAgICAgICBmID0gZS5pbmRleE9mKCIuIik7IC0gMSAhPSBmICYmIChlID0gZS5sZW5ndGggLSBmIC0gMSwgZSA+IGIuZGVjaW1hbFBsYWNlcyAmJiAoYi5kZWNpbWFsUGxhY2VzID0gZSkpCiAgICAgICAgfQogICAgICAgIG51bGwgPT0gZC5IaWdoICYmIGRlbGV0ZSBkLkhpZ2g7CiAgICAgICAgbnVsbCA9PSBkLkxvdyAmJiBkZWxldGUgZC5Mb3c7CiAgICAgICAgbnVsbCA9PSBkLk9wZW4gJiYgZGVsZXRlIGQuT3BlbgogICAgfQogICAgdGhpcy5jaGFydC5yb3VuZGl0ID0gTWF0aC5wb3coMTAsIGIuZGVjaW1hbFBsYWNlcyk7CiAgICBmb3IgKGMgaW4gdGhpcy5wbHVnaW5zKSBkID0KICAgICAgICB0aGlzLnBsdWdpbnNbY10sIGQuZGlzcGxheSAmJiBkLnNldE1hc3RlckRhdGEgJiYgZC5zZXRNYXN0ZXJEYXRhKHRoaXMsIGIpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5zdHJlYW1UcmFkZSA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICB2YXIgZCA9IHRoaXMubWFzdGVyRGF0YTsKICAgIGlmIChudWxsID09IGQgfHwgMCA9PSBkLmxlbmd0aCkgYyB8fCAoYyA9IG5ldyBEYXRlKSwgZCA9IHsKICAgICAgICBEYXRlOiB5eXl5bW1kZGhobW0oYyksCiAgICAgICAgRFQ6IGMsCiAgICAgICAgT3BlbjogYSwKICAgICAgICBDbG9zZTogYSwKICAgICAgICBIaWdoOiBhLAogICAgICAgIExvdzogYSwKICAgICAgICBWb2x1bWU6IGIKICAgIH0sIHRoaXMuYXBwZW5kTWFzdGVyRGF0YShbZF0pOwogICAgZWxzZSB7CiAgICAgICAgYyB8fCAoYyA9IERhdGUubm93KCkpOwogICAgICAgIHZhciBkID0gZFtkLmxlbmd0aCAtIDFdLAogICAgICAgICAgICBlID0gdGhpcy5nZXROZXh0SW50ZXJ2YWwoZC5EVCk7CiAgICAgICAgaWYgKGMgPCBlLmdldFRpbWUoKSkgZC5DbG9zZSA9IGEsIGQuVm9sdW1lICs9IGIsIGEgPiBkLkhpZ2ggJiYgKGQuSGlnaCA9IGEpLCBhIDwgZC5Mb3cgJiYgKGQuTG93ID0gYSksIHRoaXMuYXBwZW5kTWFzdGVyRGF0YShbZF0pOwogICAgICAgIGVsc2UgewogICAgICAgICAgICBmb3IgKHZhciBmID0gdGhpcy5nZXROZXh0SW50ZXJ2YWwoZSksIGcgPSBbXTsgZiA8IGM7KSBlID0gewogICAgICAgICAgICAgICAgRGF0ZTogeXl5eW1tZGRoaG1tKGUpLAogICAgICAgICAgICAgICAgRFQ6IGUsCiAgICAgICAgICAgICAgICBDbG9zZTogZC5DbG9zZSwKICAgICAgICAgICAgICAgIE9wZW46IGQuQ2xvc2UsCiAgICAgICAgICAgICAgICBIaWdoOiBkLkNsb3NlLAogICAgICAgICAgICAgICAgTG93OiBkLkNsb3NlLAogICAgICAgICAgICAgICAgVm9sdW1lOiAwCiAgICAgICAgICAgIH0sIGcucHVzaChlKSwgZSA9IGYsIGYgPSB0aGlzLmdldE5leHRJbnRlcnZhbChlKTsKICAgICAgICAgICAgZCA9IHsKICAgICAgICAgICAgICAgIERhdGU6IHl5eXltbWRkaGhtbShlKSwKICAgICAgICAgICAgICAgIERUOiBlLAogICAgICAgICAgICAgICAgT3BlbjogYSwKICAgICAgICAgICAgICAgIENsb3NlOiBhLAogICAgICAgICAgICAgICAgSGlnaDogYSwKICAgICAgICAgICAgICAgIExvdzogYSwKICAgICAgICAgICAgICAgIFZvbHVtZTogYgogICAgICAgICAgICB9OwogICAgICAgICAgICBnLnB1c2goZCk7CiAgICAgICAgICAgIHRoaXMuYXBwZW5kTWFzdGVyRGF0YShnKQogICAgICAgIH0KICAgIH0KfTsKCgpTVFhDaGFydC5wcm90b3R5cGUuc2V0TWFzdGVyTGluZSA9IGZ1bmN0aW9uKHN0YXRlKXsKCXRoaXMubGF5b3V0Lm1hc3RlckxpbmUgPSBzdGF0ZTsKfSAKClNUWENoYXJ0LnByb3RvdHlwZS5kcmF3TWFzdGVyTGluZSA9IGZ1bmN0aW9uKCl7Cgl2YXIgZGF0YVNldCA9IHRoaXMuY2hhcnQuZGF0YVNldDsKCQoJaWYodGhpcy5sYXlvdXQubWFzdGVyTGluZSkKCWlmKGRhdGFTZXQgJiYgZGF0YVNldFtkYXRhU2V0Lmxlbmd0aC0xXSl7CgkJdmFyIHBhbmVsPXRoaXMuY2hhcnQucGFuZWw7CgkJdmFyIHlweCA9IHRoaXMucGl4ZWxGcm9tUHJpY2UoZGF0YVNldFtkYXRhU2V0Lmxlbmd0aC0xXS5DbG9zZSwgcGFuZWwpOwoJCXZhciB5ID0gIE1hdGgucm91bmQoeXB4KSA7CgkJdGhpcy5jYW52YXNDb2xvcigic3R4X3lheGlzIik7CgkJdmFyIGNvbnRleHQgPSB0aGlzLmNoYXJ0LmNvbnRleHQ7CgkJY29udGV4dC5iZWdpblBhdGgoKTsKCQljb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2IoMTg0LDQ0LDEyKSc7CgkJY29udGV4dC5tb3ZlVG8oMCx5KTsKCQljb250ZXh0LmxpbmVUbyh0aGlzLmNoYXJ0LndpZHRoLTgseSApOwoJCWNvbnRleHQuZmlsbCgpOwoJCWNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmdldENhbnZhc0NvbG9yKCJzdHgtbWFzdGVyLWxpbmUtY29sb3IiKTsKCQljb250ZXh0LmxpbmVXaWR0aD0yOwoJCWNvbnRleHQuc3Ryb2tlKCk7CgkJY29udGV4dC5jbG9zZVBhdGgoKTsKCQkKCX0KCQoJCn0KCgpTVFhDaGFydC5wcm90b3R5cGUuYXBwZW5kTWFzdGVyRGF0YSA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgiYXBwZW5kTWFzdGVyRGF0YSIsIGFyZ3VtZW50cykgJiYgYS5sZW5ndGgpIHsKICAgICAgICB2YXIgYyA9IHN0clRvRGF0ZVRpbWUoYVswXS5EYXRlKTsKICAgICAgICBiIHx8IChiID0gdGhpcy5jaGFydCk7CiAgICAgICAgdmFyIGQgPSBiLm1hc3RlckRhdGE7CiAgICAgICAgaWYgKGQgJiYgMCAhPSBkLmxlbmd0aCkgewogICAgICAgICAgICBmb3IgKGcgPSBkLmxlbmd0aCAtIDE7IDAgPD0gZzspIHsKICAgICAgICAgICAgICAgIHZhciBlID0gc3RyVG9EYXRlVGltZShkW2ddLkRhdGUpOwogICAgICAgICAgICAgICAgaWYgKGUuZ2V0VGltZSgpIDw9IGMuZ2V0VGltZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSAwOwogICAgICAgICAgICAgICAgICAgIGUuZ2V0VGltZSgpIDwgYy5nZXRUaW1lKCkgJiYgKGYgPSAxKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPSAwOyBjIDwgYS5sZW5ndGg7IGMrKykgZFtnICsgYyArIGZdID0gYVtjXSwgZFtnICsgYyArIGZdLkRUID0gc3RyVG9EYXRlVGltZShkW2cgKyBjICsgZl0uRGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGctLQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoZyBpbiB0aGlzLnBsdWdpbnMpIGYgPSB0aGlzLnBsdWdpbnNbZ10sIGYuZGlzcGxheSAmJiBmLmFwcGVuZE1hc3RlckRhdGEgJiYgZi5hcHBlbmRNYXN0ZXJEYXRhKHRoaXMsCiAgICAgICAgICAgICAgICBhLCBiKQogICAgICAgIH0gZWxzZQogICAgICAgICAgICBmb3IgKHZhciBkID0gYi5tYXN0ZXJEYXRhID0gY2xvbmUoYSksIGcgPSAwOyBnIDwgZC5sZW5ndGg7IGcrKykgZFtnXS5EVCA9IHN0clRvRGF0ZVRpbWUoZFtnXS5EYXRlKTsKICAgICAgICB0aGlzLm1hc3RlckRhdGEgJiYgMCAhPSB0aGlzLm1hc3RlckRhdGEubGVuZ3RoIHx8ICh0aGlzLm1hc3RlckRhdGEgPSBkKTsKICAgICAgICB0aGlzLmNyZWF0ZURhdGFTZXQoKTsKICAgICAgICB0aGlzLmRyYXcoKTsKICAgICAgICB0aGlzLnJ1bkFwcGVuZCgiYXBwZW5kTWFzdGVyRGF0YSIsIGFyZ3VtZW50cykKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnNldFJhbmdlID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsKICAgICJvYmplY3QiICE9IHR5cGVvZiBhICYmIChhID0gewogICAgICAgIGR0TGVmdDogYSwKICAgICAgICBkdFJpZ2h0OiBiLAogICAgICAgIHBhZGRpbmc6IGMsCiAgICAgICAgY2hhcnQ6IGQsCiAgICAgICAgZ29JbnRvRnV0dXJlOiAhMQogICAgfSk7CiAgICBhLmNoYXJ0IHx8IChhLmNoYXJ0ID0gdGhpcy5jaGFydCk7CiAgICBhLnBhZGRpbmcgfHwgKGEucGFkZGluZyA9IDApOwogICAgZCA9IGEuY2hhcnQ7CiAgICBjID0gYS5kdExlZnQuZ2V0VGltZSgpOwogICAgdmFyIGUgPSBudWxsOwogICAgYiA9IGQuZGF0YVNldC5sZW5ndGggLSAxOwogICAgaWYgKGEuZHRSaWdodCkgewogICAgICAgIGZvciAoZSA9IGEuZHRSaWdodC5nZXRUaW1lKCk7IDAgPD0gYjsgYi0tKSB7CiAgICAgICAgICAgIHZhciBmID0gZC5kYXRhU2V0W2JdOwogICAgICAgICAgICBpZiAoZi5EVC5nZXRUaW1lKCkgPD0gZSkgYnJlYWsKICAgICAgICB9CiAgICAgICAgaWYgKGIgPT0gZC5kYXRhU2V0Lmxlbmd0aCAtIDEgJiYgYS5nb0ludG9GdXR1cmUpCiAgICAgICAgICAgIGZvciAodmFyIGYgPSBkLmRhdGFTZXRbZC5kYXRhU2V0Lmxlbmd0aCAtIDFdLkRULCBnID0gMDsgMkU0ID4gZyAmJiAhKGYuZ2V0VGltZSgpID4gZSk7IGcrKykgYisrLCBmID0gU1RYTWFya2V0Lm5leHRQZXJpb2QoZiwgdGhpcy5sYXlvdXQuaW50ZXJ2YWwsCiAgICAgICAgICAgICAgICAxLCB0aGlzKQogICAgfQogICAgaWYgKCEoMCA+IGIpKSB7CQogICAgICAgIGZvciAoZSA9IGI7IDAgPD0gZTsgZS0tKQogICAgICAgICAgICBpZiAoIShlID49IGQuZGF0YVNldC5sZW5ndGgpICYmIChmID0gZC5kYXRhU2V0W2VdLCBmLkRULmdldFRpbWUoKSA8IGMpKSB7CiAgICAgICAgICAgICAgICBlKys7CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICB9CiAgICAgICAgYyA9IGIgLSBlICsgMTsKICAgICAgICAxID49IGMgfHwgKAogICAgICAgIAkJdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggPSAodGhpcy5jaGFydC53aWR0aCAtIGEucGFkZGluZykgLyBjLAogICAgICAgIAkJZC5tYXhUaWNrcyA9IE1hdGgucm91bmQodGhpcy5jaGFydC53aWR0aCAvIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC0gMC40OTkpIC0gMSwKICAgICAgICAJCWQuc2Nyb2xsID0gZC5kYXRhU2V0Lmxlbmd0aCAtIGIgKyBkLm1heFRpY2tzIC0gTWF0aC5yb3VuZChhLnBhZGRpbmcgLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCksIHRoaXMuZHJhdygpKTsKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnNldFNwYW4gPSBmdW5jdGlvbiAoYSwgaW50ZXJ2YWxUeXBlLCBjLCBjaGFydCkgewoJLy9hICA9IHRoZSBsb25nIG9mIHRoZSBpbnRlcnZhbCAobGFzdCB0aW1lIC02MCkKICAgIGNoYXJ0IHx8IChjaGFydCA9IHRoaXMuY2hhcnQpOwogICAgaWYgKCEoMSA+IGEpKSB7CiAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGNoYXJ0LmRhdGFTZXRbY2hhcnQuZGF0YVNldC5sZW5ndGggLSAxXS5EVC5nZXRUaW1lKCkpOwogICAgICAgICJ5ZWFyIiA9PSBpbnRlcnZhbFR5cGUgPyBzdGFydERhdGUuc2V0RnVsbFllYXIoc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkgLSBhKSA6ICJtb250aCIgPT0gaW50ZXJ2YWxUeXBlID8gc3RhcnREYXRlLnNldE1vbnRoKHN0YXJ0RGF0ZS5nZXRNb250aCgpIC0gYSkgOiAiZGF5IiA9PSBpbnRlcnZhbFR5cGUgPyBzdGFydERhdGUuc2V0RGF0ZShzdGFydERhdGUuZ2V0RGF0ZSgpIC0gYSkgOiAid2VlayIgPT0gaW50ZXJ2YWxUeXBlID8gc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIDcgKiBhKSA6ICJob3VyIiA9PSBpbnRlcnZhbFR5cGUgPyBzdGFydERhdGUuc2V0SG91cnMoc3RhcnREYXRlLmdldEhvdXJzKCkgLSBhKSA6ICJtaW51dGUiID09IGludGVydmFsVHlwZSAmJiBzdGFydERhdGUuc2V0TWludXRlcyhzdGFydERhdGUuZ2V0TWludXRlcygpIC0gYSk7CiAgICAgICAgdGhpcy5zZXRSYW5nZShzdGFydERhdGUsIG51bGwsIGMsIGNoYXJ0KQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZ2V0U3BhbkNhbmRsZVdpZHRoID0gZnVuY3Rpb24gKGEpIHsKICAgIGEgPSBhLnNwbGl0KCIsIik7CiAgICBpZiAoISgyID4gYS5sZW5ndGgpKSB7CiAgICAgICAgdmFyIGIgPSBwYXJzZUZsb2F0KGFbMF0pLAogICAgICAgICAgICBjID0gbmV3IERhdGUsCiAgICAgICAgICAgIGQgPSBuZXcgRGF0ZTsKICAgICAgICAieWVhciIgPT0gYVsxXSA/IGQuc2V0RnVsbFllYXIoZC5nZXRGdWxsWWVhcigpIC0gYikgOiAibW9udGgiID09IGFbMV0gPyBkLnNldE1vbnRoKGQuZ2V0TW9udGgoKSAtIGIpIDogImRheSIgPT0gYVsxXSA/IGQuc2V0RGF0ZShkLmdldERhdGUoKSAtIGIpIDogIndlZWsiID09IGFbMV0gJiYgZC5zZXREYXRlKGQuZ2V0RGF0ZSgpIC0gNyAqIGIpOwogICAgICAgIGEgPSAoYy5nZXRUaW1lKCkgLSBkLmdldFRpbWUoKSkgLyAxRTMgLyA2MCAvIDYwIC8gMjQ7CiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQud2lkdGggLyAoNSAqIGEgLyA3KQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuaW5pdGlhbGl6ZUNoYXJ0ID0gZnVuY3Rpb24gKGEpIHsKICAgIG51bGwgIT0gdGhpcy5sb2NhbGUgJiYgdGhpcy5zZXRMb2NhbGUodGhpcy5sb2NhbGUpOwogICAgIXRoaXMuZGlzcGxheVpvbmUgJiYgU1RYQ2hhcnQuZGVmYXVsdERpc3BsYXlUaW1lWm9uZSAmJiB0aGlzLnNldFRpbWVab25lKG51bGwsIFNUWENoYXJ0LmRlZmF1bHREaXNwbGF5VGltZVpvbmUpOwogICAgYSAmJiAodGhpcy5jaGFydC5jb250YWluZXIgPSBhKTsKICAgIHRoaXMuY2hhcnQuY29udGFpbmVyLnN0eCA9IHRoaXM7CiAgICB0aGlzLmNoYXJ0LmNvbnRhaW5lci5TVFhSZWdpc3RlcmVkIHx8ICh0aGlzLmNoYXJ0LmNvbnRhaW5lci5TVFhSZWdpc3RlcmVkID0gITAsIFNUWENoYXJ0LnJlZ2lzdGVyZWRDb250YWluZXJzLnB1c2godGhpcy5jaGFydC5jb250YWluZXIpKTsKICAgIFNUWC5pc1N1cmZhY2UgJiYgIXRoaXMuZ2VzdHVyZSAmJiAodGhpcy5nZXN0dXJlID0gbmV3IE1TR2VzdHVyZSwgdGhpcy5nZXN0dXJlLnRhcmdldCA9IHRoaXMubWFuYWdlVG91Y2hBbmRNb3VzZSA/IHRoaXMuY2hhcnQuY29udGFpbmVyIDoKICAgICAgICBkb2N1bWVudC5ib2R5LCB0aGlzLmdlc3R1cmVQb2ludGVySWQgPSBudWxsKTsKICAgIHRoaXMucmVnaXN0ZXJIVE1MRWxlbWVudHMoKTsKICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgIGlmIChudWxsICE9IHRoaXMuY2hhcnQuY2FudmFzICYmIGEuZ2V0Q29udGV4dCkgdGhpcy5jaGFydC5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5jaGFydC5jYW52YXMpLCB0aGlzLmNoYXJ0LmNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLmNoYXJ0LnRlbXBDYW52YXMpLCB0aGlzLmNoYXJ0LmNhbnZhcyA9IG51bGwsIHRoaXMuY2hhcnQudGVtcENhbnZhcyA9IG51bGw7CiAgICBlbHNlIGlmICgwLjI1ID4gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggfHwgMjAgPCB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCkgdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggPSA4OwogICAgdGhpcy5jaGFydC5jYW52YXMgPSBhOwogICAgdGhpcy5jaGFydC5jYW52YXMuZ2V0Q29udGV4dCA/IHRoaXMuY2hhcnQuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY2hhcnQuY2FudmFzKSA6ICh0aGlzLmNoYXJ0LmNhbnZhcyA9CiAgICAgICAgdGhpcy5jaGFydC5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgiI2llOGNhbnZhcyIpWzBdLCB0aGlzLmNoYXJ0LmNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIik7CiAgICB0aGlzLmNoYXJ0LmNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSI7CiAgICB0aGlzLmNoYXJ0LmNhbnZhcy5zdHlsZS5sZWZ0ID0gIjBweCI7CiAgICB0aGlzLmNoYXJ0LmNvbnRleHQgPSB0aGlzLmNoYXJ0LmNhbnZhcy5nZXRDb250ZXh0KCIyZCIpOwogICAgdGhpcy5jaGFydC5jYW52YXMuY29udGV4dCA9IHRoaXMuY2hhcnQuY29udGV4dDsKICAgIHRoaXMuY2hhcnQuY29udGV4dC5saW5lV2lkdGggPSAxOwogICAgdGhpcy5jaGFydC50ZW1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICB0aGlzLmNoYXJ0LnRlbXBDYW52YXMuZ2V0Q29udGV4dCA/IHRoaXMuY2hhcnQuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY2hhcnQudGVtcENhbnZhcykgOiAodGhpcy5jaGFydC50ZW1wQ2FudmFzID0gdGhpcy5jaGFydC5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgiI2llOGNhbnZhc1RlbXAiKVswXSwKICAgICAgICB0aGlzLmNoYXJ0LnRlbXBDYW52YXMuc3R5bGUuZGlzcGxheSA9ICJibG9jayIpOwogICAgdGhpcy5jaGFydC50ZW1wQ2FudmFzLnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKICAgIHRoaXMuY2hhcnQudGVtcENhbnZhcy5zdHlsZS5sZWZ0ID0gIjBweCI7CiAgICB0aGlzLmNoYXJ0LnRlbXBDYW52YXMuY29udGV4dCA9IHRoaXMuY2hhcnQudGVtcENhbnZhcy5nZXRDb250ZXh0KCIyZCIpOwogICAgdGhpcy5jaGFydC50ZW1wQ2FudmFzLmNvbnRleHQubGluZVdpZHRoID0gMTsKICAgIHRoaXMucmVzaXplQ2FudmFzKCk7CiAgICBTVFguaXNBbmRyb2lkICYmICh0aGlzLmNoYXJ0LnRlbXBDYW52YXMub250b3VjaHN0YXJ0ID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICBhLnByZXZlbnREZWZhdWx0ICYmIGEucHJldmVudERlZmF1bHQoKQogICAgfSk7CiAgICB0aGlzLmNoYXJ0LnZlcnRpY2FsU2Nyb2xsID0gMDsKICAgIHRoaXMuY2hhcnQuem9vbSA9IDA7CiAgICBudWxsID09IHRoaXMucGFuZWxzLmNoYXJ0ID8gdGhpcy5zdGFja1BhbmVsKHRoaXMuY2hhcnQuc3ltYm9sLCAiY2hhcnQiLCAxKSA6ICh0aGlzLnBhbmVscy5jaGFydC5kaXNwbGF5ID0KICAgICAgICB0aGlzLmNoYXJ0LnN5bWJvbCwgdGhpcy5jaGFydC5zeW1ib2xEaXNwbGF5ICYmICh0aGlzLnBhbmVscy5jaGFydC5kaXNwbGF5ID0gdGhpcy5jaGFydC5zeW1ib2xEaXNwbGF5KSk7CiAgICB0aGlzLmFkanVzdFBhbmVsUG9zaXRpb25zKCk7CiAgICB0aGlzLmNoYXJ0LmRhdGFTZXQgJiYgMCA8IHRoaXMuY2hhcnQuZGF0YVNldC5sZW5ndGggJiYgKHRoaXMuY2hhcnQuc2Nyb2xsID0gdGhpcy5jaGFydC5tYXhUaWNrcywgYSA9IE1hdGgucm91bmQodGhpcy5wcmVmZXJlbmNlcy53aGl0ZXNwYWNlIC8gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGgpLCB0aGlzLmNoYXJ0LnNjcm9sbCAtPSBhKTsKICAgIGlmIChTVFgudG91Y2hEZXZpY2UpIHsKICAgICAgICBhID0gdGhpcy5jaGFydC5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgiI292ZXJsYXlUcmFzaENhbiIpWzBdOwogICAgICAgIHZhciBiID0gdGhpcy5jaGFydC5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgiI3ZlY3RvclRyYXNoQ2FuIilbMF07CiAgICAgICAgYSAmJiAoYS5vbm1zcG9pbnRlcnVwID0gYS5vbnRvdWNoZW5kID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLmRlbGV0ZUhpZ2hsaWdodGVkKCkKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcykpOwogICAgICAgIGIgJiYgKGIub25tc3BvaW50ZXJ1cCA9IGIub250b3VjaGVuZCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5kZWxldGVIaWdobGlnaHRlZCgpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpKQogICAgfQogICAgdGhpcy5tYW5hZ2VUb3VjaEFuZE1vdXNlICYmICh0aGlzLnJlZ2lzdGVyVG91Y2hBbmRNb3VzZUV2ZW50cygpLCB0aGlzLmNoYXJ0LmNvbnRhaW5lci5vbm1vdXNlb3V0ID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgYS5oYW5kbGVNb3VzZU91dChiKQogICAgICAgIH0KICAgIH0odGhpcykpOwogICAgdGhpcy5jb250cm9scy5jaGFydENvbnRyb2xzICYmICh0aGlzLmNvbnRyb2xzLmNoYXJ0Q29udHJvbHMuc3R5bGUuZGlzcGxheSA9ICJibG9jayIpOwogICAgdGhpcy5hYm9ydERyYXdpbmdzKCk7CiAgICBmb3IgKHZhciBjIGluIHRoaXMucGFuZWxzKSBhID0gdGhpcy5wYW5lbHNbY10sIGEubWFya2VySG9sZGVyICYmICh0aGlzLmNoYXJ0LmNvbnRhaW5lci5yZW1vdmVDaGlsZChhLm1hcmtlckhvbGRlciksIGEubWFya2VySG9sZGVyID0gbnVsbCk7CiAgICBmb3IgKHZhciBkIGluIHRoaXMucGx1Z2lucykgYyA9CiAgICAgICAgdGhpcy5wbHVnaW5zW2RdLCBjLmRpc3BsYXkgJiYgYy5pbml0aWFsaXplQ2hhcnQgJiYgYy5pbml0aWFsaXplQ2hhcnQodGhpcyk7CiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVySW5pdGlhbGl6ZWQgfHwgKHRoaXMucmVzaXplTGlzdGVuZXJJbml0aWFsaXplZCA9ICEwLCBkID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgYS5yZXNpemVDaGFydCgpCiAgICAgICAgfQogICAgfSwgd2luZG93LmF0dGFjaEV2ZW50ID8gd2luZG93LmF0dGFjaEV2ZW50KCJvbnJlc2l6ZSIsIGQodGhpcykpIDogd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInJlc2l6ZSIsIGQodGhpcyksICEwKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmhhbmRsZU1vdXNlT3V0ID0gZnVuY3Rpb24gKGEpIHsKICAgIGEgPSBhIHx8IHdpbmRvdy5ldmVudDsKICAgIFNUWC53aXRoaW5FbGVtZW50KHRoaXMuY2hhcnQuY29udGFpbmVyLCBhLnBhZ2VYLCBhLnBhZ2VZKSB8fCB0aGlzLnJ1blByZXBlbmQoImhhbmRsZU1vdXNlT3V0IiwgYXJndW1lbnRzKSB8fCAodGhpcy51bmRpc3BsYXlDcm9zc2hhaXJzKCksIHRoaXMuZ3JhYmJpbmdTY3JlZW4gPSAhMSwgdGhpcy50b3VjaGVzID0gW10sIHRoaXMudG91Y2hpbmcgPSAhMSwgdGhpcy5kaXNwbGF5U3RpY2t5KCksIHRoaXMucnVuQXBwZW5kKCJoYW5kbGVNb3VzZU91dCIsIGFyZ3VtZW50cykpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5yZWdpc3RlclRvdWNoQW5kTW91c2VFdmVudHMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYSA9IHRoaXMuY2hhcnQuY29udGFpbmVyLAogICAgICAgIGIgPSAkJCQoIiNob21lIiwgdGhpcy5jb250cm9scy5jaGFydENvbnRyb2xzKSwKICAgICAgICBjID0gJCQkKCIjem9vbUluIiwgdGhpcy5jb250cm9scy5jaGFydENvbnRyb2xzKSwKICAgICAgICBkID0gJCQkKCIjem9vbU91dCIsIHRoaXMuY29udHJvbHMuY2hhcnRDb250cm9scyk7CiAgICBTVFgudG91Y2hEZXZpY2UgPyBTVFguaXNTdXJmYWNlID8gKGEub25tb3VzZW1vdmUgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEubXNNb3VzZU1vdmVQcm94eShiKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKSwgYS5vbm1vdXNlZG93biA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5tc01vdXNlRG93blByb3h5KGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCBhLm9ubW91c2V1cCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5tc01vdXNlVXBQcm94eShiKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKSwgYS5hZGRFdmVudExpc3RlbmVyKCJNU1BvaW50ZXJEb3duIiwKICAgICAgICAgICAgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnN0YXJ0UHJveHkoYikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSh0aGlzKSwgITEpLCBhLmFkZEV2ZW50TGlzdGVuZXIoIk1TR2VzdHVyZVN0YXJ0IiwgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLmdlc3R1cmVJbkVmZmVjdCA9ICEwCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCAhMSksIGEuYWRkRXZlbnRMaXN0ZW5lcigiTVNHZXN0dXJlQ2hhbmdlIiwgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gYS50b3VjaG1vdmUoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyksICExKSwgYS5hZGRFdmVudExpc3RlbmVyKCJNU0dlc3R1cmVFbmQiLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEuZ2VzdHVyZUluRWZmZWN0ID0gITE7CiAgICAgICAgICAgICAgICByZXR1cm4gYS50b3VjaGVuZChiKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKSwgITEpLCBhLm9ubXNwb2ludGVybW92ZSA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5tb3ZlUHJveHkoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyksIGEub25tc3BvaW50ZXJ1cCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgcmV0dXJuIGEuZW5kUHJveHkoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyksCiAgICAgICAgYiAmJiAoYi5vbm1zcG9pbnRlcnVwID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLmhvbWUoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcykpLCBjICYmIChjLm9ubXNwb2ludGVydXAgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEuem9vbUluKGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpKSwgZCAmJiAoZC5vbm1zcG9pbnRlcnVwID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLnpvb21PdXQoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcykpKSA6IChTVFguaXBhZCB8fCBTVFguaXBob25lIHx8IChhLm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLmlvc01vdXNlTW92ZVByb3h5KGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCBhLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLmlvc01vdXNlRG93blByb3h5KGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCBhLm9ubW91c2V1cCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5pb3NNb3VzZVVwUHJveHkoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcykpLCBhLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS50b3VjaHN0YXJ0KGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLAogICAgICAgIGEub250b3VjaG1vdmUgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEudG91Y2htb3ZlKGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCBhLm9udG91Y2hlbmQgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEudG91Y2hlbmQoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyksIGIgJiYgKGIub250b3VjaGVuZCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5ob21lKGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpKSwgYyAmJiAoYy5vbnRvdWNoZW5kID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBhLnpvb21JbihiKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKSwgYy5vbm1vdXNldXAgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEuem9vbUluKGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpLCBjLnJlbW92ZUF0dHJpYnV0ZSgib25Nb3VzZU92ZXIiKSwgYy5yZW1vdmVBdHRyaWJ1dGUoIm9uTW91c2VPdXQiKSksIGQgJiYgKGQub250b3VjaGVuZCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgICAgICBhLnpvb21PdXQoYikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSh0aGlzKSwgZC5vbm1vdXNldXAgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICAgICAgYS56b29tT3V0KGIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0odGhpcyksCiAgICAgICAgICAgIGQucmVtb3ZlQXR0cmlidXRlKCJvbk1vdXNlT3ZlciIpLCBkLnJlbW92ZUF0dHJpYnV0ZSgib25Nb3VzZU91dCIpKSkgOiAoYS5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgIGEubW91c2Vtb3ZlKGIpCiAgICAgICAgfQogICAgfSh0aGlzKSwgYS5vbm1vdXNlZG93biA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgIGEubW91c2Vkb3duKGIpCiAgICAgICAgfQogICAgfSh0aGlzKSwgYS5vbm1vdXNldXAgPSBmdW5jdGlvbiAoYSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICBhLm1vdXNldXAoYikKICAgICAgICB9CiAgICB9KHRoaXMpLCBiICYmIChiLm9uY2xpY2sgPSBmdW5jdGlvbiAoYSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICBhLmhvbWUoYikKICAgICAgICB9CiAgICB9KHRoaXMpKSwgYyAmJiAoYy5vbmNsaWNrID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgYS56b29tSW4oYikKICAgICAgICB9CiAgICB9KHRoaXMpKSwgZCAmJiAoZC5vbmNsaWNrID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgYS56b29tT3V0KGIpCiAgICAgICAgfQogICAgfSh0aGlzKSkpOwogICAgYiA9ICJvbndoZWVsIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSA/CiAgICAgICAgIm9ud2hlZWwiIDogdm9pZCAwICE9PSBkb2N1bWVudC5vbm1vdXNld2hlZWwgPyAib25tb3VzZXdoZWVsIiA6ICJvbkRPTU1vdXNlU2Nyb2xsIjsKICAgIGFbYl0gPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoYykgewogICAgICAgICAgICBhLm1vdXNlV2hlZWwoYywgYikKICAgICAgICB9CiAgICB9KHRoaXMsIGIpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5kZWxldGVIaWdobGlnaHRlZCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2FuY2VsVG91Y2hTaW5nbGVDbGljayA9ICEwOwogICAgU1RYLmNsZWFyQ2FudmFzKHRoaXMuY2hhcnQudGVtcENhbnZhcywgdGhpcyk7CiAgICBmb3IgKHZhciBhID0gdGhpcy5kcmF3aW5nT2JqZWN0cy5sZW5ndGggLSAxOyAwIDw9IGE7IGEtLSkgewogICAgICAgIHZhciBiID0gdGhpcy5kcmF3aW5nT2JqZWN0c1thXTsKICAgICAgICBiLmhpZ2hsaWdodGVkICYmICFiLnBlcm1hbmVudCAmJiAoYi5hYm9ydCgpIHx8ICh0aGlzLnVuZG9TdGFtcCgpLCB0aGlzLmRyYXdpbmdPYmplY3RzLnNwbGljZShhLCAxKSksIHRoaXMuY2hhbmdlT2NjdXJyZWQoInZlY3RvciIpKQogICAgfQogICAgZm9yICh2YXIgYyBpbiB0aGlzLm92ZXJsYXlzKSBhID0gdGhpcy5vdmVybGF5c1tjXSwgYS5oaWdobGlnaHQgJiYgIWEucGVybWFuZW50ICYmIHRoaXMucmVtb3ZlT3ZlcmxheShjKTsKICAgIGZvciAodmFyIGQgaW4gdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQuc2VyaWVzKSBjID0gdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQuc2VyaWVzW2RdLCBjLmhpZ2hsaWdodCAmJiAhYy5wZXJtYW5lbnQgJiYgdGhpcy5yZW1vdmVTZXJpZXMoZCwgdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQpOwogICAgdGhpcy5kcmF3KCk7CiAgICB0aGlzLmNvbnRyb2xzLm1TdGlja3kgJiYgKHRoaXMuY29udHJvbHMubVN0aWNreS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCB0aGlzLmNvbnRyb2xzLm1TdGlja3kuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gIiIpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5wYW5lbEV4aXN0cyA9IGZ1bmN0aW9uIChhKSB7CiAgICBmb3IgKHZhciBiIGluIHRoaXMucGFuZWxzKQogICAgICAgIGlmICh0aGlzLnBhbmVsc1tiXS5uYW1lID09IGEpIHJldHVybiAhMDsKICAgIHJldHVybiAhMQp9OwpTVFhDaGFydC5wcm90b3R5cGUuaGlkZUNyb3NzaGFpcnMgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmRpc3BsYXlDcm9zc2hhaXJzID0gITEKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnNob3dDcm9zc2hhaXJzID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5kaXNwbGF5Q3Jvc3NoYWlycyA9ICEwCn07ClNUWENoYXJ0LnByb3RvdHlwZS5ncmFiSGFuZGxlID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGEucHJldmVudERlZmF1bHQgJiYgYS5wcmV2ZW50RGVmYXVsdCgpOwogICAgaWYgKCFiKSByZXR1cm4gITE7CiAgICBTVFhDaGFydC5jcm9zc2hhaXJZID0gYi50b3AgKyB0aGlzLmNoYXJ0LnRvcDsKICAgIFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwgPSBiOwogICAgdGhpcy5kcmF3VGVtcG9yYXJ5UGFuZWwoKTsKICAgIHJldHVybiAhMQp9OwpTVFhDaGFydC5wcm90b3R5cGUucmVsZWFzZUhhbmRsZSA9IGZ1bmN0aW9uIChhKSB7CiAgICBhLnByZXZlbnREZWZhdWx0ICYmIGEucHJldmVudERlZmF1bHQoKTsKICAgIFNUWC5jbGVhckNhbnZhcyh0aGlzLmNoYXJ0LnRlbXBDYW52YXMsIHRoaXMpOwogICAgdGhpcy5yZXNpemVQYW5lbHMoKTsKICAgIFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwgPSBudWxsCn07ClNUWENoYXJ0LnByb3RvdHlwZS5zdG9yZVBhbmVscyA9IGZ1bmN0aW9uICgpIHsKICAgIG51bGwgPT0gdGhpcy5sYXlvdXQgJiYgKHRoaXMubGF5b3V0ID0ge30pOwogICAgdmFyIGEgPSB0aGlzLmxheW91dDsKICAgIGEucGFuZWxzID0ge307CiAgICBmb3IgKHZhciBiIGluIHRoaXMucGFuZWxzKSB7CiAgICAgICAgdmFyIGMgPSB0aGlzLnBhbmVsc1tiXTsKICAgICAgICBhLnBhbmVsc1tjLm5hbWVdID0gewogICAgICAgICAgICBwZXJjZW50OiBjLnBlcmNlbnQsCiAgICAgICAgICAgIGRpc3BsYXk6IGMuZGlzcGxheQogICAgICAgIH0KICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnNhdmVQYW5lbHMgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy5zdG9yZVBhbmVscygpOwogICAgITEgIT0gYSAmJiB0aGlzLmNoYW5nZU9jY3VycmVkKCJsYXlvdXQiKQp9OwpTVFhDaGFydC5wcm90b3R5cGUucmVzb2x2ZVkgPSBmdW5jdGlvbiAoYSkgewogICAgcmV0dXJuIHRoaXMuY2hhcnQudG9wICsgYQp9OwpTVFhDaGFydC5wcm90b3R5cGUucmVzb2x2ZVggPSBmdW5jdGlvbiAoYSkgewogICAgcmV0dXJuIHRoaXMuY2hhcnQubGVmdCArIGEKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmJhY2tPdXRZID0gZnVuY3Rpb24gKGEpIHsKICAgIHJldHVybiBhIC0gdGhpcy5jaGFydC50b3AKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmJhY2tPdXRYID0gZnVuY3Rpb24gKGEpIHsKICAgIHJldHVybiBhIC0gdGhpcy5jaGFydC5sZWZ0Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5wcml2YXRlRGVsZXRlUGFuZWwgPSBmdW5jdGlvbiAoYSkgewoJCgkgaWYodGhpcy5tYWNkX3N0dWR5ICYmICF0aGlzLm1hY2Rfc3R1ZHkuY2FuY2VsbGVkICYmIGEubmFtZSA9PSB0aGlzLm1hY2Rfc3R1ZHkubmFtZSl7CiAgICAgCXRoaXMubWFjZF9zdHVkeS5jYW5jZWxsZWQgPSB0cnVlOwogICAgIH0KCQogICAgdGhpcy5sYXlvdXQuc3R1ZGllcyAmJiBkZWxldGUgdGhpcy5sYXlvdXQuc3R1ZGllc1thLm5hbWVdOwogICAgZGVsZXRlIHRoaXMucGFuZWxzW2EubmFtZV07CiAgICBmb3IgKHZhciBiIGluIHRoaXMub3ZlcmxheXMpIHRoaXMub3ZlcmxheXNbYl0ucGFuZWwgPT0gYS5uYW1lICYmIChkZWxldGUgdGhpcy5sYXlvdXQuc3R1ZGllc1tiXSwgZGVsZXRlIHRoaXMub3ZlcmxheXNbYl0pOwogICAgYS5hcHBlbmRlZCAmJiAodGhpcy5jaGFydC5jb250YWluZXIucmVtb3ZlQ2hpbGQoYS5pY29ucyksIHRoaXMuY2hhcnQuY29udGFpbmVyLnJlbW92ZUNoaWxkKGEuaGFuZGxlKSwgYS5jbG9zZVggJiYgdGhpcy5jaGFydC5jb250YWluZXIucmVtb3ZlQ2hpbGQoYS5jbG9zZVgpKQp9OwpTVFhDaGFydC5wcm90b3R5cGUucGFuZWxDbG9zZSA9IGZ1bmN0aW9uIChhKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgicGFuZWxDbG9zZSIsIGFyZ3VtZW50cykpIHsKICAgICAgICB0aGlzLmNhbmNlbFRvdWNoU2luZ2xlQ2xpY2sgPSAhMDsKICAgICAgICBTVFhDaGFydC5kcmF3aW5nTGluZSA9ICExOwogICAgICAgIGEuc29sb2luZyAmJiB0aGlzLnBhbmVsU29sbyhhKTsKICAgICAgICBpZiAodGhpcy5jaGFydHNbYS5uYW1lXSkgewogICAgICAgICAgICBmb3IgKHZhciBiIGluIHRoaXMucGFuZWxzKSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMucGFuZWxzW2JdOwogICAgICAgICAgICAgICAgYy5jaGFydC5uYW1lID09IGEubmFtZSAmJiB0aGlzLnByaXZhdGVEZWxldGVQYW5lbChjKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNoYXJ0c1thLm5hbWVdCiAgICAgICAgfSBlbHNlIHRoaXMucHJpdmF0ZURlbGV0ZVBhbmVsKGEpOwogICAgICAgIHRoaXMuc2hvd0Nyb3NzaGFpcnMoKTsKICAgICAgICB0aGlzLmNyZWF0ZURhdGFTZXQoKTsKICAgICAgICB0aGlzLmFkanVzdFBhbmVsUG9zaXRpb25zKCk7CiAgICAgICAgdGhpcy5kcmF3KCk7CiAgICAgICAgdGhpcy5zYXZlUGFuZWxzKCk7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoInBhbmVsQ2xvc2UiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5kZWxldGVBbGxQYW5lbHMgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciBhIGluIHRoaXMucGFuZWxzKSB0aGlzLnByaXZhdGVEZWxldGVQYW5lbCh0aGlzLnBhbmVsc1thXSk7CiAgICB0aGlzLmxheW91dC5wYW5lbHMgPSB7fTsKICAgIHRoaXMucGFuZWxzID0ge30KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnBhbmVsVXAgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy5jYW5jZWxUb3VjaFNpbmdsZUNsaWNrID0gITA7CiAgICBTVFhDaGFydC5kcmF3aW5nTGluZSA9ICExOwogICAgdGhpcy5zaG93Q3Jvc3NoYWlycygpOwogICAgdmFyIGIgPSB7fSwgYyA9IDAsCiAgICAgICAgZDsKICAgIGZvciAoZCBpbiB0aGlzLnBhbmVscykgewogICAgICAgIGlmIChkID09IGEubmFtZSkgYnJlYWs7CiAgICAgICAgYysrCiAgICB9CiAgICBpZiAoMCAhPSBjKSB7CiAgICAgICAgdmFyIGUgPSAwOwogICAgICAgIGZvciAoZCBpbiB0aGlzLnBhbmVscykgZSA9PSBjIC0gMSAmJiAoYlthLm5hbWVdID0gYSksIGQgIT0gYS5uYW1lICYmIChiW2RdID0gdGhpcy5wYW5lbHNbZF0sIGUrKyk7CiAgICAgICAgdGhpcy5wYW5lbHMgPSBiOwogICAgICAgIHRoaXMuYWRqdXN0UGFuZWxQb3NpdGlvbnMoKTsKICAgICAgICB0aGlzLmRyYXcoKTsKICAgICAgICB0aGlzLnNhdmVQYW5lbHMoKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUucGFuZWxEb3duID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMuY2FuY2VsVG91Y2hTaW5nbGVDbGljayA9ICEwOwogICAgU1RYQ2hhcnQuZHJhd2luZ0xpbmUgPSAhMTsKICAgIHRoaXMuc2hvd0Nyb3NzaGFpcnMoKTsKICAgIHZhciBiID0ge30sIGMgPSAwLAogICAgICAgIGQ7CiAgICBmb3IgKGQgaW4gdGhpcy5wYW5lbHMpIHsKICAgICAgICBpZiAoZCA9PSBhLm5hbWUpIGJyZWFrOwogICAgICAgIGMrKwogICAgfQogICAgdmFyIGUgPSAwOwogICAgZm9yIChkIGluIHRoaXMucGFuZWxzKSBlKys7CiAgICBpZiAoYyAhPSBlIC0gMSkgewogICAgICAgIGUgPSAwOwogICAgICAgIGZvciAoZCBpbiB0aGlzLnBhbmVscykgZCAhPSBhLm5hbWUgJiYgKGJbZF0gPSB0aGlzLnBhbmVsc1tkXSwgZSA9PSBjICsgMSAmJiAoYlthLm5hbWVdID0gYSkpLCBlKys7CiAgICAgICAgdGhpcy5wYW5lbHMgPSBiOwogICAgICAgIHRoaXMuYWRqdXN0UGFuZWxQb3NpdGlvbnMoKTsKICAgICAgICB0aGlzLmRyYXcoKTsKICAgICAgICB0aGlzLnNhdmVQYW5lbHMoKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUucGFuZWxTb2xvID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMuY2FuY2VsVG91Y2hTaW5nbGVDbGljayA9ICEwOwogICAgU1RYQ2hhcnQuZHJhd2luZ0xpbmUgPSAhMTsKICAgIHRoaXMuc2hvd0Nyb3NzaGFpcnMoKTsKICAgIHZhciBiID0gITA7CiAgICAhMCA9PSBhLnNvbG9pbmcgPyAoYiA9ICExLCBhLnNvbG9pbmcgPSAhMSwgdW5hcHBlbmRDbGFzc05hbWUoYS5zb2xvLCAic3R4X3NvbG9fbGl0IiksIGEucGVyY2VudCA9IGEub2xkUGVyY2VudCwgdGhpcy5wYW5lbHMuY2hhcnQucGVyY2VudCA9IHRoaXMucGFuZWxzLmNoYXJ0Lm9sZFBlcmNlbnQpIDogKGEuc29sb2luZyA9ICEwLCBhcHBlbmRDbGFzc05hbWUoYS5zb2xvLCAic3R4X3NvbG9fbGl0IiksICJjaGFydCIgPT0gYS5uYW1lID8gYS5vbGRQZXJjZW50ID0gYS5wZXJjZW50IDogKGEub2xkUGVyY2VudCA9IGEucGVyY2VudCwgdGhpcy5wYW5lbHMuY2hhcnQub2xkUGVyY2VudCA9IHRoaXMucGFuZWxzLmNoYXJ0LnBlcmNlbnQsIGEucGVyY2VudCA9IDEgLSB0aGlzLnBhbmVscy5jaGFydC5wZXJjZW50KSk7CiAgICBmb3IgKHZhciBjIGluIHRoaXMucGFuZWxzKSB0aGlzLnBhbmVsc1tjXS5oaWRkZW4gPQogICAgICAgIGI7CiAgICB0aGlzLnBhbmVscy5jaGFydC5oaWRkZW4gPSAhMTsKICAgIGEuaGlkZGVuID0gITE7CiAgICB0aGlzLmFkanVzdFBhbmVsUG9zaXRpb25zKCk7CiAgICB0aGlzLmRyYXcoKTsKICAgIHRoaXMuc2F2ZVBhbmVscygpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jYWxjdWxhdGVQYW5lbFBlcmNlbnQgPSBmdW5jdGlvbiAoYSkgewogICAgYS5wZXJjZW50ID0gKGEuYm90dG9tIC0gYS50b3ApIC8gdGhpcy5jaGFydC5jYW52YXNIZWlnaHQKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnJlc2l6ZVBhbmVscyA9IGZ1bmN0aW9uICgpIHsKICAgIGlmIChudWxsICE9IFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwpIHsKICAgICAgICB2YXIgYSA9ICEwOwogICAgICAgIFNUWENoYXJ0LmNyb3NzaGFpclkgPiB0aGlzLnJlc29sdmVZKFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwudG9wKSAmJiAoYSA9ICExKTsKICAgICAgICBpZiAoYSkgewogICAgICAgICAgICB2YXIgYSA9IG51bGwsCiAgICAgICAgICAgICAgICBiOwogICAgICAgICAgICBmb3IgKGIgaW4gdGhpcy5wYW5lbHMpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhbmVsc1tiXSA9PSBTVFhDaGFydC5yZXNpemluZ1BhbmVsKSBicmVhazsKICAgICAgICAgICAgICAgIHRoaXMucGFuZWxzW2JdLmhpZGRlbiB8fCAoYSA9IHRoaXMucGFuZWxzW2JdKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGIgPSB0aGlzLmJhY2tPdXRZKFNUWENoYXJ0LmNyb3NzaGFpclkpOwogICAgICAgICAgICBiIDwgYS50b3AgKyAzMCAmJiAoYiA9IGEudG9wICsgMzAsIFNUWENoYXJ0LmNyb3NzaGFpclkgPSB0aGlzLnJlc29sdmVZKGIpKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGEgPSBudWxsOwogICAgICAgICAgICBmb3IgKGIgaW4gdGhpcy5wYW5lbHMpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhbmVsc1tiXSA9PSBTVFhDaGFydC5yZXNpemluZ1BhbmVsKSBicmVhazsKICAgICAgICAgICAgICAgIHRoaXMucGFuZWxzW2JdLmhpZGRlbiB8fCAoYSA9IHRoaXMucGFuZWxzW2JdKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGIgPQogICAgICAgICAgICAgICAgdGhpcy5iYWNrT3V0WShTVFhDaGFydC5jcm9zc2hhaXJZKTsKICAgICAgICAgICAgYiA+IFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwuYm90dG9tIC0gMzAgJiYgKGIgPSBTVFhDaGFydC5yZXNpemluZ1BhbmVsLmJvdHRvbSAtIDMwLCBTVFhDaGFydC5jcm9zc2hhaXJZID0gdGhpcy5yZXNvbHZlWShiKSkKICAgICAgICB9CiAgICAgICAgYS5ib3R0b20gPSBiOwogICAgICAgIFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwudG9wID0gYjsKICAgICAgICB0aGlzLmNhbGN1bGF0ZVBhbmVsUGVyY2VudChhKTsKICAgICAgICB0aGlzLmNhbGN1bGF0ZVBhbmVsUGVyY2VudChTVFhDaGFydC5yZXNpemluZ1BhbmVsKTsKICAgICAgICB0aGlzLmFkanVzdFBhbmVsUG9zaXRpb25zKCk7CiAgICAgICAgdGhpcy5kcmF3KCk7CiAgICAgICAgdGhpcy5zYXZlUGFuZWxzKCkKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLmFkanVzdFBhbmVsUG9zaXRpb25zID0gZnVuY3Rpb24gKCkgewogICAgaWYgKCIiICE9IHRoaXMuY2hhcnQuc3ltYm9sICYmICF0aGlzLnJ1blByZXBlbmQoImFkanVzdFBhbmVsUG9zaXRpb25zIiwgYXJndW1lbnRzKSkgewogICAgICAgIHZhciBhID0gMCwKICAgICAgICAgICAgYiA9IHRoaXMuY2hhcnQuY2FudmFzSGVpZ2h0LAogICAgICAgICAgICBjID0gITEsCiAgICAgICAgICAgIGQgPSAwLAogICAgICAgICAgICBlID0gMCwKICAgICAgICAgICAgZiA9ICExLAogICAgICAgICAgICBnOwogICAgICAgIGZvciAoZyBpbiB0aGlzLnBhbmVscykgewogICAgICAgICAgICB2YXIgayA9IHRoaXMucGFuZWxzW2ddOwogICAgICAgICAgICBpZiAoaXNOYU4oay5wZXJjZW50KSB8fCAwID49IGsucGVyY2VudCkgay5wZXJjZW50ID0gMC4wNTsKICAgICAgICAgICAgay5oaWRkZW4gfHwgKGQgKz0gay5wZXJjZW50LCBlKyssIGsuc29sb2luZyAmJiAoZiA9ICEwKSkKICAgICAgICB9CiAgICAgICAgZm9yIChnIGluIHRoaXMucGFuZWxzKQogICAgICAgICAgICBpZiAoayA9IHRoaXMucGFuZWxzW2ddLCBrLmhpZGRlbikgay5jbG9zZVggJiYgKGsuY2xvc2VYLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIpLCBrLm1hcmtlckhvbGRlciAmJiAoay5tYXJrZXJIb2xkZXIuc3R5bGUuZGlzcGxheSA9ICJub25lIik7CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgYyA/IGsuaWNvbnMuY2hpbGRyZW5bMV0uc3R5bGUuZGlzcGxheSA9CiAgICAgICAgICAgICAgICAgICAgIiIgOiAoYyA9ICEwLCBrLmljb25zLmNoaWxkcmVuWzFdLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIpOwogICAgICAgICAgICAgICAgay5pY29ucy5jaGlsZHJlblsyXS5zdHlsZS5kaXNwbGF5ID0gZiA/IGsuc29sb2luZyA/ICIiIDogIm5vbmUiIDogMSA9PSBlIHx8IDIgPT0gZSA/ICJub25lIiA6ICIiOwogICAgICAgICAgICAgICAgay5pY29ucy5jaGlsZHJlblszXS5zdHlsZS5kaXNwbGF5ID0gMSA9PSBlID8gIm5vbmUiIDogIiI7CiAgICAgICAgICAgICAgICBrLnBlcmNlbnQgLz0gZDsKICAgICAgICAgICAgICAgIGsudG9wID0gYTsKICAgICAgICAgICAgICAgIGsuYm90dG9tID0gay50b3AgKyBiICogay5wZXJjZW50OwogICAgICAgICAgICAgICAgay5oZWlnaHQgPSBrLmJvdHRvbSAtIGsudG9wOwogICAgICAgICAgICAgICAgdmFyIG0gPSBrLnlBeGlzOwogICAgICAgICAgICAgICAgbS50b3AgPSBrLnRvcCArIG0udG9wT2Zmc2V0OwogICAgICAgICAgICAgICAgbS5ib3R0b20gPSBrLmJvdHRvbSAtIG0uYm90dG9tT2Zmc2V0OwogICAgICAgICAgICAgICAgbS5oZWlnaHQgPSBtLmJvdHRvbSAtIG0udG9wOwogICAgICAgICAgICAgICAgYSA9IGsuYm90dG9tOwogICAgICAgICAgICAgICAgbS5oaWdoIHx8IDAgPT0gbS5oaWdoIHx8IChtLmhpZ2ggPSAxMDAsIG0ubG93ID0gMCwgbS5zaGFkb3cgPSAxMDApOwogICAgICAgICAgICAgICAgbS5tdWx0aXBsaWVyID0gbS5oZWlnaHQgLyBtLnNoYWRvdzsKICAgICAgICAgICAgICAgIGsubWFya2VySG9sZGVyICYmIChrLm1hcmtlckhvbGRlci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIiwgay5tYXJrZXJIb2xkZXIuc3R5bGUud2lkdGggPQogICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnQud2lkdGggKyAicHgiLCBrLm1hcmtlckhvbGRlci5zdHlsZS50b3AgPSBrLnRvcCArICJweCIsIGsubWFya2VySG9sZGVyLnN0eWxlLmhlaWdodCA9IGsuaGVpZ2h0ICsgInB4IikKICAgICAgICAgICAgfQogICAgICAgIGcgJiYgKHRoaXMucGFuZWxzW2ddLmljb25zLmNoaWxkcmVuWzNdLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIpOwogICAgICAgIDIgIT0gZSB8fCBmIHx8ICh0aGlzLnBhbmVscy5jaGFydC5pY29ucy5jaGlsZHJlblsyXS5zdHlsZS5kaXNwbGF5ID0gIiIpOwogICAgICAgIHRoaXMuY29udHJvbHMuY2hhcnRDb250cm9scyAmJiB0aGlzLnBhbmVscy5jaGFydCAmJiAodGhpcy5jb250cm9scy5jaGFydENvbnRyb2xzLnN0eWxlLmJvdHRvbSA9IHRoaXMuY2hhcnQuY2FudmFzSGVpZ2h0IC0gdGhpcy5wYW5lbHMuY2hhcnQuYm90dG9tICsgMjIgKyAicHgiKTsKICAgICAgICB0aGlzLmNsZWFyUGl4ZWxDYWNoZSgpOwogICAgICAgIHRoaXMuYWRqdXN0RHJhd2luZ3MoKTsKICAgICAgICB0aGlzLnJ1bkFwcGVuZCgiYWRqdXN0UGFuZWxQb3NpdGlvbnMiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5hZGRDaGFydCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBiLm5hbWUgPSBhOwogICAgdGhpcy5jaGFydHNbYV0gPSBiCn07ClNUWENoYXJ0LnByb3RvdHlwZS5jcmVhdGVQYW5lbCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgiY3JlYXRlUGFuZWwiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgZCB8fCAoZCA9ICJjaGFydCIpOwogICAgICAgIHZhciBlID0gdGhpcy5jaGFydC5jYW52YXNIZWlnaHQ7CiAgICAgICAgYyB8fCAoYyA9IDAuMiAqIGUpOwogICAgICAgIHZhciBlID0gYyAvIGUsCiAgICAgICAgICAgIGYgPSAxIC0gZSwKICAgICAgICAgICAgZzsKICAgICAgICBmb3IgKGcgaW4gdGhpcy5wYW5lbHMpIHRoaXMucGFuZWxzW2ddLnBlcmNlbnQgKj0gZjsKICAgICAgICB0aGlzLnN0YWNrUGFuZWwoYSwgYiwgZSwgZCk7CiAgICAgICAgdGhpcy5hZGp1c3RQYW5lbFBvc2l0aW9ucygpOwogICAgICAgIHRoaXMuc2F2ZVBhbmVscyghMSk7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImNyZWF0ZVBhbmVsIiwgYXJndW1lbnRzKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuc3RhY2tQYW5lbCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgic3RhY2tQYW5lbCIsIGFyZ3VtZW50cykpIHsKICAgICAgICBkIHx8IChkID0gImNoYXJ0Iik7CiAgICAgICAgdmFyIGUgPSB0aGlzLmNoYXJ0c1tkXTsKICAgICAgICBiID09IGQgJiYgKGEgPSBlLnN5bWJvbCwgZS5zeW1ib2xEaXNwbGF5ICYmIChhID0gZS5zeW1ib2xEaXNwbGF5KSk7CiAgICAgICAgdmFyIGYgPSB0aGlzLnBhbmVsc1tiXSA9IG5ldyBTVFhDaGFydC5QYW5lbChiKTsKICAgICAgICBmLnBlcmNlbnQgPSBjOwogICAgICAgIGYuY2hhcnQgPSBlOwogICAgICAgIGYuZGlzcGxheSA9IGE7CiAgICAgICAgZi5pY29ucyA9IHRoaXMuY29udHJvbHMuaWNvbnNUZW1wbGF0ZS5jbG9uZU5vZGUoITApOwogICAgICAgIGYuaGFuZGxlID0gdGhpcy5jb250cm9scy5oYW5kbGVUZW1wbGF0ZS5jbG9uZU5vZGUoITApOwogICAgICAgICQkKCJjbG9zZVhUZW1wbGF0ZSIpID8gKGYuY2xvc2VYID0gJCQoImNsb3NlWFRlbXBsYXRlIikuY2xvbmVOb2RlKCEwKSwgZi5jbG9zZVguc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtYmxvY2siLCBmLmNsb3NlWC5pZCA9IG51bGwsIGYuY2xvc2UgPSBmLmNsb3NlWC5jaGlsZHJlblswXSkgOgogICAgICAgICAgICAoZi5jbG9zZVggPSBudWxsLCBmLmNsb3NlID0gZi5pY29ucy5jaGlsZHJlbls0XSk7CiAgICAgICAgZi5oYW5kbGUuaWQgPSBudWxsOwogICAgICAgIGYuaWNvbnMuc3R5bGUuZGlzcGxheSA9ICJpbmxpbmUtYmxvY2siOwogICAgICAgIGYudGl0bGUgPSBmLmljb25zLmNoaWxkcmVuWzBdOwogICAgICAgIGYudXAgPSBmLmljb25zLmNoaWxkcmVuWzFdOwogICAgICAgIGYuc29sbyA9IGYuaWNvbnMuY2hpbGRyZW5bMl07CiAgICAgICAgZi5kb3duID0gZi5pY29ucy5jaGlsZHJlblszXTsKICAgICAgICBmLnN0dWR5TGFiZWwgPSBmLmljb25zLmNoaWxkcmVuWzVdOwogICAgICAgIGlmKGEgIT0gZS5zeW1ib2wpIGYuc3R1ZHlMYWJlbC5pbm5lclRleHQgPSBiOwogICAgICAgIHRoaXMuZGlzcGxheUljb25zVXBEb3duIHx8IChmLnVwLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIpOwogICAgICAgIHRoaXMuZGlzcGxheUljb25zVXBEb3duIHx8IChmLmRvd24uc3R5bGUuZGlzcGxheSA9ICJub25lIik7CiAgICAgICAgdGhpcy5kaXNwbGF5SWNvbnNTb2xvIHx8IChmLnNvbG8uc3R5bGUuZGlzcGxheSA9ICJub25lIik7CiAgICAgICAgdGhpcy5kaXNwbGF5SWNvbnNDbG9zZSB8fCAoZi5jbG9zZVggPyBmLmNsb3NlWC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiIDogZi5jbG9zZS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiKTsKICAgICAgICB0aGlzLmRpc3BsYXlQYW5lbFJlc2l6ZSB8fCAoZi5oYW5kbGUuc3R5bGUuZGlzcGxheSA9CiAgICAgICAgICAgICJub25lIik7CiAgICAgICAgZi50aXRsZS5pbm5lckhUTUwgPSBhOwogICAgICAgIGlmICghU1RYLnRvdWNoRGV2aWNlIHx8IFNUWC5pc1N1cmZhY2UpIGYuaWNvbnMub25tb3VzZW92ZXIgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEuaGlkZUNyb3NzaGFpcnMoKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKTsKICAgICAgICBpZiAoIVNUWC50b3VjaERldmljZSB8fCBTVFguaXNTdXJmYWNlKSBmLmljb25zLm9ubW91c2VvdXQgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgIGEuc2hvd0Nyb3NzaGFpcnMoKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKTsKICAgICAgICBpZiAoZi5jbG9zZVgpIHsKICAgICAgICAgICAgaWYgKCFTVFgudG91Y2hEZXZpY2UgfHwgU1RYLmlzU3VyZmFjZSkgZi5jbG9zZVgub25tb3VzZW92ZXIgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBhLmhpZGVDcm9zc2hhaXJzKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSh0aGlzKTsKICAgICAgICAgICAgaWYgKCFTVFgudG91Y2hEZXZpY2UgfHwgU1RYLmlzU3VyZmFjZSkgZi5jbG9zZVgub25tb3VzZW91dCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGEuc2hvd0Nyb3NzaGFpcnMoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KHRoaXMpCiAgICAgICAgfQogICAgICAgIGYuaGFuZGxlLnBhbmVsID0KICAgICAgICAgICAgZjsKICAgICAgICBpZiAoIVNUWC50b3VjaERldmljZSB8fCBTVFguaXNTdXJmYWNlKSBmLmhhbmRsZS5vbm1vdXNlb3ZlciA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBhLmhpZGVDcm9zc2hhaXJzKCkKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyk7CiAgICAgICAgaWYgKCFTVFgudG91Y2hEZXZpY2UgfHwgU1RYLmlzU3VyZmFjZSkgZi5oYW5kbGUub25tb3VzZW91dCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBhLnNob3dDcm9zc2hhaXJzKCkKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcyk7CiAgICAgICAgU1RYLnRvdWNoRGV2aWNlICYmIChmLmhhbmRsZS5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHsKICAgICAgICAgICAgICAgIG51bGwgPT0gYS5yZXNpemluZ1BhbmVsICYmIGEuZ3JhYkhhbmRsZShjLCBiKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzLCBmKSwgZi5oYW5kbGUub250b3VjaGVuZCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYS5yZWxlYXNlSGFuZGxlKGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMpKTsKICAgICAgICBmLmhhbmRsZS5vbm1vdXNlZG93biA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYykgewogICAgICAgICAgICAgICAgYyB8fCAoYyA9IGV2ZW50KTsKICAgICAgICAgICAgICAgIGEuZ3JhYkhhbmRsZShjLAogICAgICAgICAgICAgICAgICAgIGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMsIGYpOwogICAgICAgIGYuaGFuZGxlLm9ubW91c2V1cCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgYiB8fCAoYiA9IGV2ZW50KTsKICAgICAgICAgICAgICAgIGEucmVsZWFzZUhhbmRsZShiKQogICAgICAgICAgICB9CiAgICAgICAgfSh0aGlzKTsKICAgICAgICBmLmNsb3NlLm9uY2xpY2sgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgYS5wYW5lbENsb3NlKGIpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMsIGYpOwogICAgICAgIGYudXAub25jbGljayA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBhLnBhbmVsVXAoYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcywgZik7CiAgICAgICAgZi5kb3duLm9uY2xpY2sgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgYS5wYW5lbERvd24oYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcywgZik7CiAgICAgICAgZi5zb2xvLm9uY2xpY2sgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgYS5wYW5lbFNvbG8oYikKICAgICAgICAgICAgfQogICAgICAgIH0odGhpcywgZik7CiAgICAgICAgImNoYXJ0IiA9PSBmLm5hbWUgJiYgKGYuY2xvc2Uuc3R5bGUuZGlzcGxheSA9ICJub25lIik7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoInN0YWNrUGFuZWwiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5kcmF3UGFuZWxzID0gZnVuY3Rpb24gKCkgewogICAgaWYgKCF0aGlzLnJ1blByZXBlbmQoImRyYXdQYW5lbHMiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgdmFyIGEgPSAhMSwKICAgICAgICAgICAgYjsKICAgICAgICBmb3IgKGIgaW4gdGhpcy5wYW5lbHMpIHsKICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnBhbmVsc1tiXTsKICAgICAgICAgICAgYy5hcHBlbmRlZCB8fCAodGhpcy5jaGFydC5jb250YWluZXIuYXBwZW5kQ2hpbGQoYy5pY29ucyksIHRoaXMuY2hhcnQuY29udGFpbmVyLmFwcGVuZENoaWxkKGMuaGFuZGxlKSwgYy5jbG9zZVggJiYgdGhpcy5jaGFydC5jb250YWluZXIuYXBwZW5kQ2hpbGQoYy5jbG9zZVgpLCBjLmFwcGVuZGVkID0gITApOwogICAgICAgICAgICBjLnRpdGxlLmlubmVySFRNTCAhPSBjLmRpc3BsYXkgJiYgKGMudGl0bGUuaW5uZXJIVE1MID0gYy5kaXNwbGF5KTsKICAgICAgICAgICAgYy5pY29ucy5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayI7CiAgICAgICAgICAgIGMuaWNvbnMuc3R5bGUudG9wID0gdGhpcy5yZXNvbHZlWShjLnRvcCkgLSB0aGlzLmNoYXJ0LnRvcCArICJweCI7CiAgICAgICAgICAgIGMuY2xvc2VYICYmIChjLmNsb3NlWC5zdHlsZS5kaXNwbGF5ID0gImlubGluZS1ibG9jayIsCiAgICAgICAgICAgICAgICBjLmNsb3NlWC5zdHlsZS50b3AgPSBjLmJvdHRvbSAtIGMuY2xvc2VYLmNsaWVudEhlaWdodCArIDMgKyAicHgiKTsKICAgICAgICAgICAgaWYgKCEwID09IGMuaGlkZGVuKSEwID09IGMuaGlkZGVuICYmIChjLmljb25zLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIpLCAhMCA9PSBjLmhpZGRlbiAmJiAoYy5oYW5kbGUuc3R5bGUuZGlzcGxheSA9ICJub25lIiksICEwID09IGMuaGlkZGVuICYmIGMuY2xvc2VYICYmIChjLmNsb3NlWC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiKTsKICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5kaXNwbGF5SWNvbnNVcERvd24gfHwgKGMudXAuc3R5bGUuZGlzcGxheSA9ICJub25lIiksIHRoaXMuZGlzcGxheUljb25zVXBEb3duIHx8IChjLmRvd24uc3R5bGUuZGlzcGxheSA9ICJub25lIiksIHRoaXMuZGlzcGxheUljb25zU29sbyB8fCAoYy5zb2xvLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIpLCAhdGhpcy5kaXNwbGF5SWNvbnNDbG9zZSAmJiBjLmNsb3NlWCAmJiAoYy5jbG9zZVguc3R5bGUuZGlzcGxheSA9ICJub25lIiksIGEpIHsKICAgICAgICAgICAgICAgIHZhciBkID0gYy50b3AsCiAgICAgICAgICAgICAgICAgICAgZCA9IE1hdGgucm91bmQoZCkgKyAwLjU7CiAgICAgICAgICAgICAgICB0aGlzLnBsb3RMaW5lKDAsCiAgICAgICAgICAgICAgICAgICAgMSwgZCwgZCwgdGhpcy5jYW52YXNTdHlsZSgic3R4X3BhbmVsX2JvcmRlciIpLCAibGluZSIsIHRoaXMuY2hhcnQuY29udGV4dCwgITEsIHt9KTsKICAgICAgICAgICAgICAgIGMuaGFuZGxlLnN0eWxlLmRpc3BsYXkgPSB0aGlzLmRpc3BsYXlQYW5lbFJlc2l6ZSA/ICIiIDogIm5vbmUiOwogICAgICAgICAgICAgICAgYy5oYW5kbGUuc3R5bGUudG9wID0gZCAtIGMuaGFuZGxlLm9mZnNldEhlaWdodCAvIDIgKyAicHgiCiAgICAgICAgICAgIH0gZWxzZSBjLmhhbmRsZS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCBhID0gITAKICAgICAgICB9CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImRyYXdQYW5lbHMiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS50b3VjaFNpbmdsZUNsaWNrID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIHZhciBkID0gdGhpcywKICAgICAgICBlID0gYXJndW1lbnRzOwogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoIXRoaXMuY2FuY2VsVG91Y2hTaW5nbGVDbGljaykgewogICAgICAgICAgICAgICAgaWYgKHRoaXMucnVuUHJlcGVuZCgidG91Y2hTaW5nbGVDbGljayIsIGUpIHx8IHRoaXMuZWRpdGluZ0Fubm90YXRpb24pIHJldHVybjsKICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tzID0gewogICAgICAgICAgICAgICAgICAgIHMxTVM6IC0xLAogICAgICAgICAgICAgICAgICAgIGUxTVM6IC0xLAogICAgICAgICAgICAgICAgICAgIHMyTVM6IC0xLAogICAgICAgICAgICAgICAgICAgIGUyTVM6IC0xCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRpc3BsYXlDcm9zc2hhaXJzIHx8ICF0aGlzLmRpc3BsYXlJbml0aWFsaXplZCB8fCAiIiAhPSB0aGlzLm9wZW5EaWFsb2cgfHwgYiA8IHRoaXMuY2hhcnQubGVmdCB8fCBiID4gdGhpcy5jaGFydC5yaWdodCB8fCBjIDwgdGhpcy5jaGFydC50b3AgfHwgYyA+IHRoaXMuY2hhcnQuYm90dG9tKSByZXR1cm47CiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuYmFja091dFkoU1RYQ2hhcnQuY3Jvc3NoYWlyWSksCiAgICAgICAgICAgICAgICAgICAgZyA9IHRoaXMuYmFja091dFgoU1RYQ2hhcnQuY3Jvc3NoYWlyWCk7CiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYW5lbCA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy53aGljaFBhbmVsKGEpOwogICAgICAgICAgICAgICAgdGhpcy5kcmF3aW5nQ2xpY2sodGhpcy5jdXJyZW50UGFuZWwsIGcsIGEpIHx8IHRoaXMubGF5b3V0LmNyb3NzaGFpciB8fCAoU1RYQ2hhcnQuY3Jvc3NoYWlyWSA9IDAsIFNUWENoYXJ0LmNyb3NzaGFpclggPSAwLCB0aGlzLmZpbmRIaWdobGlnaHRzKCksIFNUWENoYXJ0LmNyb3NzaGFpclkgPSBjLCBTVFhDaGFydC5jcm9zc2hhaXJYID0gYiwgdGhpcy5jdXJyZW50UGFuZWwgJiYgdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQuZGF0YVNldCAmJiAodGhpcy5jcm9zc2hhaXJUaWNrID0gdGhpcy50aWNrRnJvbVBpeGVsKHRoaXMuYmFja091dFgoU1RYQ2hhcnQuY3Jvc3NoYWlyWCksIHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0KSAvIHRoaXMubGF5b3V0LnBlcmlvZGljaXR5LCB0aGlzLmNyb3NzaGFpclZhbHVlID0gdGhpcy5hZGp1c3RJZk5lY2Vzc2FyeSh0aGlzLmN1cnJlbnRQYW5lbCwgdGhpcy5jcm9zc2hhaXJUaWNrLCB0aGlzLnZhbHVlRnJvbVBpeGVsKHRoaXMuYmFja091dFkoU1RYQ2hhcnQuY3Jvc3NoYWlyWSksCiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFuZWwpKSksIHRoaXMuaGVhZHNVcEhSKCksIHRoaXMuZmluZEhpZ2hsaWdodHMoITApKQogICAgICAgICAgICB9CiAgICAgICAgICAgIGQuY2FuY2VsVG91Y2hTaW5nbGVDbGljayA9ICExOwogICAgICAgICAgICB0aGlzLnJ1bkFwcGVuZCgidG91Y2hTaW5nbGVDbGljayIsIGUpCiAgICAgICAgfSkuYXBwbHkoZCwgZSkKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnRvdWNoRG91YmxlQ2xpY2sgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgYiA8IHRoaXMuY2hhcnQubGVmdCB8fCBiID4gdGhpcy5jaGFydC5yaWdodCB8fCBjIDwgdGhpcy5wYW5lbHMuY2hhcnQudG9wIHx8IGMgPiB0aGlzLnBhbmVscy5jaGFydC5ib3R0b20gfHwgdGhpcy5lZGl0aW5nQW5ub3RhdGlvbiB8fCB0aGlzLnJ1blByZXBlbmQoInRvdWNoRG91YmxlQ2xpY2siLCBhcmd1bWVudHMpIHx8IChTVFhDaGFydC5kcmF3aW5nTGluZSA/IHRoaXMudW5kbygpIDogdGhpcy5hbnlIaWdobGlnaHRlZCA/IHRoaXMuZGVsZXRlSGlnaGxpZ2h0ZWQoKSA6IHRoaXMuY3VycmVudFBhbmVsICYmICgwID09IHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0LnZlcnRpY2FsU2Nyb2xsICYmIDAgPT0gdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQuem9vbSA/IHRoaXMuaG9tZSgpIDogKHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0LnZlcnRpY2FsU2Nyb2xsID0gMCwgdGhpcy5jdXJyZW50UGFuZWwuY2hhcnQuem9vbSA9IDApLCB0aGlzLmRyYXcoKSksIHRoaXMuY2xpY2tzID0gewogICAgICAgIHMxTVM6IC0xLAogICAgICAgIGUxTVM6IC0xLAogICAgICAgIHMyTVM6IC0xLAogICAgICAgIGUyTVM6IC0xCiAgICB9LCB0aGlzLnJ1bkFwcGVuZCgidG91Y2hEb3VibGVDbGljayIsIGFyZ3VtZW50cykpCn07ClNUWENoYXJ0LnByb3RvdHlwZS50b3VjaG1vdmUgPSBmdW5jdGlvbiAoYSkgewogICAgdmFyIGIgPSBbXTsKICAgIGEgJiYgYS5wcmV2ZW50RGVmYXVsdCAmJiBhLnByZXZlbnREZWZhdWx0KCk7CiAgICB2YXIgYyA9IChuZXcgRGF0ZSkuZ2V0VGltZSgpOwogICAgaWYgKC0xID09IHRoaXMuY2xpY2tzLnMyTVMpIHsKICAgICAgICBpZiAodGhpcy5jbGlja3MuZTFNUyA9IGMsIDI1ID4gdGhpcy5jbGlja3MuZTFNUyAtIHRoaXMuY2xpY2tzLnMxTVMpIHJldHVybgogICAgfSBlbHNlIGlmICh0aGlzLmNsaWNrcy5lMk1TID0gYywgMjUgPiB0aGlzLmNsaWNrcy5lMk1TIC0gdGhpcy5jbGlja3MuczJNUykgcmV0dXJuOwogICAgaWYgKFNUWC5pc1N1cmZhY2UpIHsKICAgICAgICBpZiAodGhpcy5tb3VzZU1vZGUpIHJldHVybjsKICAgICAgICBhLnBvaW50ZXJJZCB8fCAoYS5wb2ludGVySWQgPSB0aGlzLmdlc3R1cmVQb2ludGVySWQpOwogICAgICAgIGlmICgoIXRoaXMuZ3JhYmJpbmdTY3JlZW4gfHwgU1RYQ2hhcnQucmVzaXppbmdQYW5lbCkgJiYgIXRoaXMub3ZlcnJpZGVHZXN0dXJlICYmIGEuZGV0YWlsID09IGEuTVNHRVNUVVJFX0ZMQUdfSU5FUlRJQSkgewogICAgICAgICAgICB0aGlzLmdlc3R1cmUuc3RvcCgpOwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgZm9yIChjID0gMDsgYyA8IHRoaXMudG91Y2hlcy5sZW5ndGg7IGMrKykKICAgICAgICAgICAgaWYgKHRoaXMudG91Y2hlc1tjXS5wb2ludGVySWQgPT0gYS5wb2ludGVySWQpIHsKICAgICAgICAgICAgICAgIHZhciBkID0gTWF0aC5hYnModGhpcy50b3VjaGVzW2NdLnBhZ2VYIC0gYS5jbGllbnRYKSwKICAgICAgICAgICAgICAgICAgICBlID0gTWF0aC5hYnModGhpcy50b3VjaGVzW2NdLnBhZ2VZIC0gYS5jbGllbnRZKTsKICAgICAgICAgICAgICAgIGlmICghTWF0aC5zcXJ0KGQgKiBkICsgZSAqIGUpKSByZXR1cm47CiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrcy5lMU1TID0gKG5ldyBEYXRlKS5nZXRUaW1lKCk7CiAgICAgICAgICAgICAgICBpZiAoNTAgPiB0aGlzLmNsaWNrcy5lMU1TIC0gdGhpcy5jbGlja3MuczFNUyB8fCB0aGlzLnRvdWNoZXNbY10ucGFnZVggPT0gYS5jbGllbnRYICYmIHRoaXMudG91Y2hlc1tjXS5wYWdlWSA9PSBhLmNsaWVudFkpIHJldHVybjsKICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlc1tjXS5wYWdlWCA9IGEuY2xpZW50WDsKICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlc1tjXS5wYWdlWSA9IGEuY2xpZW50WTsKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIH0KICAgICAgICAwID09IGMgPyB0aGlzLm1vdmVkUHJpbWFyeSA9ICEwIDogdGhpcy5tb3ZlZFNlY29uZGFyeSA9ICEwOwogICAgICAgIGlmICghdGhpcy5nZXN0dXJlSW5FZmZlY3QgJiYKICAgICAgICAgICAgYyA9PSB0aGlzLnRvdWNoZXMubGVuZ3RoKSByZXR1cm47CiAgICAgICAgdGhpcy5jaGFuZ2VkVG91Y2hlcyA9IFt7CiAgICAgICAgICAgIHBvaW50ZXJJZDogYS5wb2ludGVySWQsCiAgICAgICAgICAgIHBhZ2VYOiBhLmNsaWVudFgsCiAgICAgICAgICAgIHBhZ2VZOiBhLmNsaWVudFkKICAgICAgICB9XTsKICAgICAgICBiID0gdGhpcy50b3VjaGVzOwogICAgICAgIHRoaXMuZ2VzdHVyZUluRWZmZWN0ICYmIDAgPT0gYi5sZW5ndGggJiYgKGIgPSB0aGlzLmNoYW5nZWRUb3VjaGVzKQogICAgfSBlbHNlIGIgPSBhLnRvdWNoZXMsIHRoaXMuY2hhbmdlZFRvdWNoZXMgPSBhLmNoYW5nZWRUb3VjaGVzOwogICAgYyA9IHRoaXMuY3Jvc3NoYWlyWE9mZnNldDsKICAgIGQgPSB0aGlzLmNyb3NzaGFpcllPZmZzZXQ7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgidG91Y2htb3ZlIiwgYXJndW1lbnRzKSkKICAgICAgICBpZiAobnVsbCAhPSBTVFhDaGFydC5yZXNpemluZ1BhbmVsKSB7CiAgICAgICAgICAgIHZhciBmID0gYlswXSwKICAgICAgICAgICAgICAgIGUgPSBmLnBhZ2VYLAogICAgICAgICAgICAgICAgZiA9IGYucGFnZVk7CiAgICAgICAgICAgIHRoaXMubW91c2Vtb3ZlaW5uZXIoZSArIGMsIGYgKyBkKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC0xICE9IHRoaXMubW92ZUIgJiYgKHRoaXMudG91Y2hNb3ZlVGltZSA9IG5ldyBEYXRlKTsKICAgICAgICAgICAgdGhpcy5tb3ZlQSA9IHRoaXMubW92ZUI7CiAgICAgICAgICAgIHRoaXMubW92ZUIgPQogICAgICAgICAgICAgICAgYlswXS5wYWdlWDsKICAgICAgICAgICAgaWYgKDEgPT0gYi5sZW5ndGgpIHRoaXMucGluY2hpbmdTY3JlZW4gfHwgKGYgPSBiWzBdLCBlID0gZi5wYWdlWCwgZiA9IGYucGFnZVksIHRoaXMubW91c2Vtb3ZlaW5uZXIoZSArIGMsIGYgKyBkKSk7CiAgICAgICAgICAgIGVsc2UgaWYgKDIgPT0gYi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5kaXNwbGF5Q3Jvc3NoYWlycykgcmV0dXJuOwogICAgICAgICAgICAgICAgdmFyIGYgPSBiWzBdLAogICAgICAgICAgICAgICAgICAgIGUgPSBmLnBhZ2VYLAogICAgICAgICAgICAgICAgICAgIGYgPSBmLnBhZ2VZLAogICAgICAgICAgICAgICAgICAgIGcgPSBiWzFdLAogICAgICAgICAgICAgICAgICAgIGIgPSBnLnBhZ2VYLAogICAgICAgICAgICAgICAgICAgIGsgPSBnLnBhZ2VZLAogICAgICAgICAgICAgICAgICAgIG0gPSBNYXRoLnNxcnQoKGIgLSBlKSAqIChiIC0gZSkgKyAoayAtIGYpICogKGsgLSBmKSk7CiAgICAgICAgICAgICAgICB0aGlzLnBpbmNoaW5nQ2VudGVyID0gTWF0aC5taW4oZSwgYikgKyAoTWF0aC5tYXgoZSwgYikgLSBNYXRoLm1pbihlLCBiKSkgLyAyOwogICAgICAgICAgICAgICAgdmFyIGcgPSBNYXRoLnJvdW5kKHRoaXMuZ2VzdHVyZVN0YXJ0RGlzdGFuY2UgLSBtKSwKICAgICAgICAgICAgICAgICAgICBsID0gIXRoaXMubGF5b3V0LmNyb3NzaGFpciAmJiAiIiA9PSBTVFhDaGFydC52ZWN0b3JUeXBlOwogICAgICAgICAgICAgICAgbCAmJiAodGhpcy5waW5jaGluZ1NjcmVlbiA9IDUpOwogICAgICAgICAgICAgICAgdGhpcy5jbGVhclBpeGVsQ2FjaGUoKTsKICAgICAgICAgICAgICAgIGlmICgyID4gdGhpcy5waW5jaGluZ1NjcmVlbikgewogICAgICAgICAgICAgICAgICAgIGlmIChTVFguaXNTdXJmYWNlICYmCiAgICAgICAgICAgICAgICAgICAgICAgICghdGhpcy5tb3ZlZFByaW1hcnkgfHwgIXRoaXMubW92ZWRTZWNvbmRhcnkpKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgaWYgKGUgPCB0aGlzLnB0LngxICYmIGIgPCB0aGlzLnB0LngyIHx8IGUgPiB0aGlzLnB0LngxICYmIGIgPiB0aGlzLnB0LngyIHx8IGYgPCB0aGlzLnB0LnkxICYmIGsgPCB0aGlzLnB0LnkyIHx8IGYgPiB0aGlzLnB0LnkxICYmIGsgPiB0aGlzLnB0LnkyKSB0aGlzLnBpbmNoaW5nU2NyZWVuID0gMDsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnBpbmNoaW5nU2NyZWVuKyssIDIgPiB0aGlzLnBpbmNoaW5nU2NyZWVuKSByZXR1cm4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMucHQgPSB7CiAgICAgICAgICAgICAgICAgICAgeDE6IGUsCiAgICAgICAgICAgICAgICAgICAgeDI6IGIsCiAgICAgICAgICAgICAgICAgICAgeTE6IGYsCiAgICAgICAgICAgICAgICAgICAgeTI6IGsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpZiAoMCA9PSB0aGlzLnBpbmNoaW5nU2NyZWVuKSB0aGlzLm1vdXNlbW92ZWlubmVyKGUgKyBjLCBmICsgZCksIHRoaXMuZ2VzdHVyZVN0YXJ0RGlzdGFuY2UgPSBtOwogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYyA9IE1hdGguYXNpbigoTWF0aC5tYXgoaywgZikgLSBNYXRoLm1pbihrLCBmKSkgLyBtKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmN0cmwgPSAhMDsKICAgICAgICAgICAgICAgICAgICBpZiAoMTIgPiBNYXRoLmFicyhnKSAmJiAhbCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tb3ZlQ291bnQrKywgNCA9PSB0aGlzLm1vdmVDb3VudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlQ291bnQgPSB0aGlzLnBpbmNoaW5nU2NyZWVuID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHJsID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLm1vdmVDb3VudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgMSA+IGMgfHwgIXRoaXMuZ29uZVZlcnRpY2FsICYmIDEuMzcgPiBjID8gKGMgPSB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydCwgdGhpcy5nb25lVmVydGljYWwgPSAhMSwgZSA9IHRoaXMuZ3JhYlN0YXJ0VmFsdWVzLngyIC0gdGhpcy5ncmFiU3RhcnRWYWx1ZXMueDEsIGQgPSB0aGlzLnB0LngyIC0gdGhpcy5wdC54MSwgZiA9IGQgLyBlLCAwLjI1ID4gZiAmJiAoZiA9IDAuMjUpLCB0aGlzLnNldENhbmRsZVdpZHRoKGYsIGMpLCBlID0gdGhpcy5ncmFiU3RhcnRWYWx1ZXMueDEgKyBNYXRoLnJvdW5kKGUgLyAyKSwgZCA9IHRoaXMucHQueDEgKyBNYXRoLnJvdW5kKGQgLyAyKSwgZCA9IHRoaXMudGlja0Zyb21QaXhlbChkLCBjKSwgYy5zY3JvbGwgKz0gTWF0aC5mbG9vcigoZCAtIGUpIC8gdGhpcy5sYXlvdXQucGVyaW9kaWNpdHkpLCB0aGlzLmRyYXcoKSkgOiAodGhpcy5tb3VzZW1vdmVpbm5lcih0aGlzLmdyYWJTdGFydFgsIHRoaXMuZ3JhYlN0YXJ0WSArIGcpLCB0aGlzLmdvbmVWZXJ0aWNhbCA9ICEwKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmN0cmwgPSAhMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKDMgPT0KICAgICAgICAgICAgICAgIGIubGVuZ3RoICYmIFNUWENoYXJ0LmFsbG93VGhyZWVGaW5nZXJUb3VjaCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRpc3BsYXlDcm9zc2hhaXJzKSByZXR1cm47CiAgICAgICAgICAgICAgICBmID0gYlswXTsKICAgICAgICAgICAgICAgIGUgPSBmLnBhZ2VYOwogICAgICAgICAgICAgICAgbSA9IHRoaXMuZ3JhYlN0YXJ0WCAtIGU7CiAgICAgICAgICAgICAgICB0aGlzLmdyYWJFbmRQZXJpb2RpY2l0eSA9IHRoaXMuZ3JhYlN0YXJ0UGVyaW9kaWNpdHkgKyBNYXRoLnJvdW5kKG0gLyAxMCk7CiAgICAgICAgICAgICAgICAxID4gdGhpcy5ncmFiRW5kUGVyaW9kaWNpdHkgJiYgKHRoaXMuZ3JhYkVuZFBlcmlvZGljaXR5ID0gMSk7CiAgICAgICAgICAgICAgICAidW5kZWZpbmVkIiAhPSB0eXBlb2YgaGVhZHNVcCAmJiAoaGVhZHNVcC5wZXJpb2QuaW5uZXJIVE1MID0gdGhpcy5ncmFiRW5kUGVyaW9kaWNpdHkgKyAiICIgKyB0aGlzLmxheW91dC5pbnRlcnZhbCwgMSA8IHRoaXMuZ3JhYkVuZFBlcmlvZGljaXR5ICYmIChoZWFkc1VwLnBlcmlvZC5pbm5lckhUTUwgKz0gInMiKSkKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnJ1bkFwcGVuZCgidG91Y2htb3ZlIiwgYXJndW1lbnRzKQogICAgICAgIH0KfTsKU1RYU3R1ZGllcy5qa2psa2ogPSAibG9jYSI7ClNUWENoYXJ0LnByb3RvdHlwZS50b3VjaHN0YXJ0ID0gZnVuY3Rpb24gKGEpIHsKICAgIFNUWC5pc1N1cmZhY2UgPyB0aGlzLm1vdmVkU2Vjb25kYXJ5ID0gdGhpcy5tb3ZlZFByaW1hcnkgPSAhMSA6ICh0aGlzLnRvdWNoaW5nRXZlbnQgJiYgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hpbmdFdmVudCksIHRoaXMudG91Y2hpbmcgPSAhMCwgdGhpcy50b3VjaGVzID0gYS50b3VjaGVzLCB0aGlzLmNoYW5nZWRUb3VjaGVzID0gYS5jaGFuZ2VkVG91Y2hlcyk7CiAgICBpZiAobnVsbCA9PSBTVFhDaGFydC5yZXNpemluZ1BhbmVsKSB7CiAgICAgICAgdmFyIGIgPSB0aGlzLmNyb3NzaGFpclhPZmZzZXQsCiAgICAgICAgICAgIGMgPSB0aGlzLmNyb3NzaGFpcllPZmZzZXQ7CiAgICAgICAgaWYgKCF0aGlzLnJ1blByZXBlbmQoInRvdWNoc3RhcnQiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgICAgIHRoaXMuZG91YmxlRmluZ2VyTW92ZXMgPSAwOwogICAgICAgICAgICB0aGlzLmNhbmNlbFN3aXBlID0gITA7CiAgICAgICAgICAgIHRoaXMubW92ZUNvdW50ID0gMDsKICAgICAgICAgICAgdGhpcy50d29GaW5nZXJTdGFydCA9ICExOwogICAgICAgICAgICBpZiAoMSA9PSB0aGlzLnRvdWNoZXMubGVuZ3RoIHx8IDIgPT0gdGhpcy50b3VjaGVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaWYgKDEgPT0KICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHZhciBkID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWNrcy54ID0gdGhpcy5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDsKICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWNrcy55ID0gdGhpcy5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTsKICAgICAgICAgICAgICAgICAgICAyNTAgPiBkIC0gdGhpcy5jbGlja3MuZTFNUyA/ICh0aGlzLmNhbmNlbFRvdWNoU2luZ2xlQ2xpY2sgPSAhMCwgdGhpcy5jbGlja3MuczJNUyA9IGQpIDogKHRoaXMuY2FuY2VsVG91Y2hTaW5nbGVDbGljayA9ICExLCB0aGlzLmNsaWNrcy5zMU1TID0gZCwgdGhpcy5jbGlja3MuZTFNUyA9IC0xLCB0aGlzLmNsaWNrcy5zMk1TID0gLTEsIHRoaXMuY2xpY2tzLmUyTVMgPSAtMSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMudG91Y2hNb3ZlVGltZSA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgICB0aGlzLm1vdmVBID0gdGhpcy50b3VjaGVzWzBdLnBhZ2VYOwogICAgICAgICAgICAgICAgdGhpcy5tb3ZlQiA9IC0xOwogICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnRvdWNoZXNbMF0sCiAgICAgICAgICAgICAgICAgICAgZCA9IGUucGFnZVgsCiAgICAgICAgICAgICAgICAgICAgZSA9IGUucGFnZVk7CiAgICAgICAgICAgICAgICBpZiAoMSA9PSB0aGlzLnRvdWNoZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSB0aGlzLmN5ID0gdGhpcy5iYWNrT3V0WShlKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYW5lbCA9CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2hpY2hQYW5lbChmKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFuZWwgfHwgKHRoaXMuY3VycmVudFBhbmVsID0gdGhpcy5jaGFydC5wYW5lbCk7CiAgICAgICAgICAgICAgICBTVFhDaGFydC5pbnNpZGVDaGFydCA9IGQgPj0gdGhpcy5jaGFydC5sZWZ0ICYmIGQgPD0gdGhpcy5jaGFydC5yaWdodCAmJiBlID49IHRoaXMuY2hhcnQudG9wICYmIGUgPD0gdGhpcy5jaGFydC5ib3R0b20gPyAhMCA6ICExOwogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxheW91dC5jcm9zc2hhaXIgJiYgIiIgPT0gU1RYQ2hhcnQudmVjdG9yVHlwZSAmJiBTVFhDaGFydC5pbnNpZGVDaGFydCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGcgaW4gdGhpcy5wYW5lbHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSB0aGlzLnBhbmVsc1tnXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGsuaGlnaGxpZ2h0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwgPSBrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFiYmluZ1NjcmVlbiA9ICEwOwogICAgICAgICAgICAgICAgICAgIHRoaXMueVRvbGVyYW5jZUJyb2tlbiA9ICExOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JhYlN0YXJ0WCA9IGQgKyBiOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JhYlN0YXJ0WSA9IGUgKyBjOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JhYlN0YXJ0U2Nyb2xsWCA9IHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0LnNjcm9sbDsKICAgICAgICAgICAgICAgICAgICB0aGlzLmdyYWJTdGFydFNjcm9sbFkgPQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydC52ZXJ0aWNhbFNjcm9sbDsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmdyYWJiaW5nSGFuZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KHRoaXMpLCAxMDApCiAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5ncmFiYmluZ1NjcmVlbiA9ICExCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKDIgPT0gdGhpcy50b3VjaGVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRpc3BsYXlDcm9zc2hhaXJzIHx8ICFTVFhDaGFydC5pbnNpZGVDaGFydCkgcmV0dXJuOwogICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzLnRvdWNoZXNbMV0sCiAgICAgICAgICAgICAgICAgICAgZiA9IG0ucGFnZVgsCiAgICAgICAgICAgICAgICAgICAgbSA9IG0ucGFnZVk7CiAgICAgICAgICAgICAgICBmb3IgKGcgaW4gdGhpcy5wYW5lbHMpCiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPSB0aGlzLnBhbmVsc1tnXSwgay5oaWdobGlnaHRlZCkgewogICAgICAgICAgICAgICAgICAgICAgICBTVFhDaGFydC5yZXNpemluZ1BhbmVsID0gazsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZyA9IHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0OwogICAgICAgICAgICAgICAgdGhpcy5nZXN0dXJlU3RhcnREaXN0YW5jZSA9IE1hdGguc3FydCgoZiAtIGQpICogKGYgLSBkKSArIChtIC0gZSkgKiAobSAtIGUpKTsKICAgICAgICAgICAgICAgIHRoaXMucHQgPSB7CiAgICAgICAgICAgICAgICAgICAgeDE6IGQsCiAgICAgICAgICAgICAgICAgICAgeDI6IGYsCiAgICAgICAgICAgICAgICAgICAgeTE6IGUsCiAgICAgICAgICAgICAgICAgICAgeTI6IG0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB0aGlzLmdyYWJiaW5nU2NyZWVuID0gITA7CiAgICAgICAgICAgICAgICB0aGlzLmdyYWJTdGFydFggPQogICAgICAgICAgICAgICAgICAgIGQgKyBiOwogICAgICAgICAgICAgICAgdGhpcy5ncmFiU3RhcnRZID0gZSArIGM7CiAgICAgICAgICAgICAgICB0aGlzLmdyYWJTdGFydFNjcm9sbFggPSB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydC5zY3JvbGw7CiAgICAgICAgICAgICAgICB0aGlzLmdyYWJTdGFydFNjcm9sbFkgPSB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydC52ZXJ0aWNhbFNjcm9sbDsKICAgICAgICAgICAgICAgIHRoaXMuZ3JhYlN0YXJ0Q2FuZGxlV2lkdGggPSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aDsKICAgICAgICAgICAgICAgIHRoaXMuZ3JhYlN0YXJ0Wm9vbSA9IHRoaXMuY3VycmVudFBhbmVsLmNoYXJ0Lnpvb207CiAgICAgICAgICAgICAgICB0aGlzLmdyYWJTdGFydFB0ID0gdGhpcy5wdDsKICAgICAgICAgICAgICAgIHRoaXMuZ3JhYlN0YXJ0VmFsdWVzID0gewogICAgICAgICAgICAgICAgICAgIHgxOiB0aGlzLnRpY2tGcm9tUGl4ZWwodGhpcy5wdC54MSwgZyksCiAgICAgICAgICAgICAgICAgICAgeDI6IHRoaXMudGlja0Zyb21QaXhlbCh0aGlzLnB0LngyLCBnKSwKICAgICAgICAgICAgICAgICAgICB5MTogdGhpcy52YWx1ZUZyb21QaXhlbCh0aGlzLnB0LnkxLCB0aGlzLmN1cnJlbnRQYW5lbCksCiAgICAgICAgICAgICAgICAgICAgeTI6IHRoaXMudmFsdWVGcm9tUGl4ZWwodGhpcy5wdC55MiwgdGhpcy5jdXJyZW50UGFuZWwpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGhpcy50d29GaW5nZXJTdGFydCA9ICEwOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5ncmFiYmluZ0hhbmQoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSh0aGlzKSwKICAgICAgICAgICAgICAgICAgICAxMDApCiAgICAgICAgICAgIH0gZWxzZSBpZiAoMyA9PSB0aGlzLnRvdWNoZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGlzcGxheUNyb3NzaGFpcnMpIHJldHVybjsKICAgICAgICAgICAgICAgIGUgPSB0aGlzLnRvdWNoZXNbMF07CiAgICAgICAgICAgICAgICB0aGlzLmdyYWJTdGFydFggPSBkID0gZS5wYWdlWDsKICAgICAgICAgICAgICAgIHRoaXMuZ3JhYlN0YXJ0UGVyaW9kaWNpdHkgPSB0aGlzLmxheW91dC5wZXJpb2RpY2l0eQogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucnVuQXBwZW5kKCJ0b3VjaHN0YXJ0IiwgYXJndW1lbnRzKQogICAgICAgIH0KICAgIH0KfTsKU1RYU3R1ZGllcy5qa2psa2ogKz0gInRpb24iOwpTVFhDaGFydC5wcm90b3R5cGUudG91Y2hlbmQgPSBmdW5jdGlvbiAoYSkgewogICAgU1RYLmlzU3VyZmFjZSB8fCAodGhpcy50b3VjaGVzID0gYS50b3VjaGVzLCB0aGlzLmNoYW5nZWRUb3VjaGVzID0gYS5jaGFuZ2VkVG91Y2hlcyk7CiAgICBpZiAoIXRoaXMucnVuUHJlcGVuZCgidG91Y2hlbmQiLCBhcmd1bWVudHMpKSB7CiAgICAgICAgaWYgKDEgPT0gdGhpcy50b3VjaGVzLmxlbmd0aCB8fCAwID09IHRoaXMudG91Y2hlcy5sZW5ndGgpCiAgICAgICAgICAgIGlmICh0aGlzLmxheW91dC5jcm9zc2hhaXIgfHwgIiIgIT0gU1RYQ2hhcnQudmVjdG9yVHlwZSkgMCAhPSB0aGlzLnRvdWNoZXMubGVuZ3RoICYmIHRoaXMudHdvRmluZ2VyU3RhcnQgfHwgKHRoaXMuZ3JhYmJpbmdTY3JlZW4gPSAhMSk7CiAgICAgICAgdGhpcy50b3VjaGVzLmxlbmd0aCAmJiAodGhpcy5ncmFiU3RhcnRZID0gdGhpcy5ncmFiU3RhcnRYID0gLTEpOwogICAgICAgIGlmICgwID09IHRoaXMudG91Y2hlcy5sZW5ndGgpIHsKICAgICAgICAgICAgdGhpcy50b3VjaGluZ0V2ZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBhLnRvdWNoaW5nID0gITEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSh0aGlzKSwgNTAwKTsKICAgICAgICAgICAgaWYgKG51bGwgIT0gU1RYQ2hhcnQucmVzaXppbmdQYW5lbCkgewogICAgICAgICAgICAgICAgU1RYLmNsZWFyQ2FudmFzKHRoaXMuY2hhcnQudGVtcENhbnZhcywgdGhpcyk7CiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZVBhbmVscygpOwogICAgICAgICAgICAgICAgU1RYQ2hhcnQucmVzaXppbmdQYW5lbCA9IG51bGw7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnBpbmNoaW5nQ2VudGVyID0gdGhpcy5waW5jaGluZ1NjcmVlbiA9IG51bGw7CiAgICAgICAgICAgIHRoaXMuZ3JhYmJpbmdTY3JlZW4gPSB0aGlzLmdvbmVWZXJ0aWNhbCA9ICExCiAgICAgICAgfSBlbHNlIGlmIChudWxsICE9IFNUWENoYXJ0LnJlc2l6aW5nUGFuZWwpIHJldHVybjsKICAgICAgICBpZiAoMSA9PSB0aGlzLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgYiA9IERhdGUubm93KCksCiAgICAgICAgICAgICAgICBjID0gdGhpcy50b3VjaGVzLmxlbmd0aCArIDE7IC0gMSA9PSB0aGlzLmNsaWNrcy5zMk1TID8gKHRoaXMuY2xpY2tzLmUxTVMgPSBiLCAyNTAgPiB0aGlzLmNsaWNrcy5lMU1TIC0gdGhpcy5jbGlja3MuczFNUyA/IHNldFRpbWVvdXQodGhpcy50b3VjaFNpbmdsZUNsaWNrKGMsIHRoaXMuY2xpY2tzLngsIHRoaXMuY2xpY2tzLnkpLCAyMDApIDogdGhpcy5jbGlja3MgPSB7CiAgICAgICAgICAgICAgICAgICAgczFNUzogLTEsCiAgICAgICAgICAgICAgICAgICAgZTFNUzogLTEsCiAgICAgICAgICAgICAgICAgICAgczJNUzogLTEsCiAgICAgICAgICAgICAgICAgICAgZTJNUzogLTEKICAgICAgICAgICAgICAgIH0pIDogKHRoaXMuY2xpY2tzLmUyTVMgPSBiLCAyNTAgPiB0aGlzLmNsaWNrcy5lMk1TIC0gdGhpcy5jbGlja3MuczJNUyA/IHRoaXMudG91Y2hEb3VibGVDbGljayhjLCB0aGlzLmNsaWNrcy54LCB0aGlzLmNsaWNrcy55KSA6IHRoaXMuY2xpY2tzID0gewogICAgICAgICAgICAgICAgICAgIHMxTVM6IC0xLAogICAgICAgICAgICAgICAgICAgIGUxTVM6IC0xLAogICAgICAgICAgICAgICAgICAgIHMyTVM6IC0xLAogICAgICAgICAgICAgICAgICAgIGUyTVM6IC0xCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgIXRoaXMubGF5b3V0LmNyb3NzaGFpciAmJiAiIiA9PSBTVFhDaGFydC52ZWN0b3JUeXBlICYmIDEgPT0gYyB8fCB0aGlzLnR3b0ZpbmdlclN0YXJ0ICYmIDAgPT0gdGhpcy50b3VjaGVzLmxlbmd0aCA/ICh0aGlzLm1vbWVudHVtVGltZSA9IERhdGUubm93KCkgLSB0aGlzLnRvdWNoTW92ZVRpbWUsIHRoaXMubW9tZW50dW1UaW1lID0gTWF0aC5tYXgoMTYsIHRoaXMubW9tZW50dW1UaW1lKSwgMzAwID4gdGhpcy5tb21lbnR1bVRpbWUgJiYgLTEgIT0gdGhpcy5tb3ZlQiAmJiAtMSAhPSB0aGlzLm1vdmVBICYmICh0aGlzLm1vbWVudHVtRGlzdGFuY2UgPSB0aGlzLm1vdmVCIC0gdGhpcy5tb3ZlQSwgdGhpcy5tb21lbnR1bURpc3RhbmNlID4KICAgICAgICAgICAgICAgIDUgKiB0aGlzLm1vbWVudHVtVGltZSA/IHRoaXMubW9tZW50dW1EaXN0YW5jZSA9IDUgKiB0aGlzLm1vbWVudHVtVGltZSA6IHRoaXMubW9tZW50dW1EaXN0YW5jZSA8IC01ICogdGhpcy5tb21lbnR1bVRpbWUgJiYgKHRoaXMubW9tZW50dW1EaXN0YW5jZSA9IC01ICogdGhpcy5tb21lbnR1bVRpbWUpLCAxNSA8IE1hdGguYWJzKHRoaXMubW9tZW50dW1EaXN0YW5jZSkgJiYgKHRoaXMuZ3JhYlN0YXJ0U2Nyb2xsWSA9IDAsIHRoaXMuY2FuY2VsU3dpcGUgPSAhMSwgdGhpcy5zd2lwZU1vdmUoKSkpKSA6IHRoaXMubW92ZUIgPSAtMQogICAgICAgIH0gZWxzZSAtMSA9PSB0aGlzLmdyYWJFbmRQZXJpb2RpY2l0eSB8fCBpc05hTih0aGlzLmdyYWJFbmRQZXJpb2RpY2l0eSkgfHwgKCh0aGlzLmlzRGFpbHlJbnRlcnZhbCh0aGlzLmxheW91dC5pbnRlcnZhbCkgfHwgdGhpcy5hbGxvd0ludHJhZGF5Tk1pbnV0ZSkgJiYgdGhpcy5zZXRQZXJpb2RpY2l0eVYyKHRoaXMuZ3JhYkVuZFBlcmlvZGljaXR5KSwgdGhpcy5ncmFiRW5kUGVyaW9kaWNpdHkgPSAtMSk7CiAgICAgICAgMCA9PSB0aGlzLnRvdWNoZXMubGVuZ3RoICYmCiAgICAgICAgICAgICh0aGlzLnR3b0ZpbmdlclN0YXJ0ID0gITEpOwogICAgICAgIHRoaXMucnVuQXBwZW5kKCJ0b3VjaGVuZCIsIGFyZ3VtZW50cykKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLnN0YXJ0UHJveHkgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy5tb3VzZU1vZGUgPSA0ID09IGEucG9pbnRlclR5cGUgfHwgIm1vdXNlIiA9PSBhLnBvaW50ZXJUeXBlID8gITAgOiAhMTsKICAgIHRoaXMubW91c2VNb2RlIHx8ICh0aGlzLnRvdWNoZXNbdGhpcy50b3VjaGVzLmxlbmd0aF0gPSB7CiAgICAgICAgcG9pbnRlcklkOiBhLnBvaW50ZXJJZCwKICAgICAgICBwYWdlWDogYS5jbGllbnRYLAogICAgICAgIHBhZ2VZOiBhLmNsaWVudFkKICAgIH0sIHRoaXMuY2hhbmdlZFRvdWNoZXMgPSBbewogICAgICAgIHBvaW50ZXJJZDogYS5wb2ludGVySWQsCiAgICAgICAgcGFnZVg6IGEuY2xpZW50WCwKICAgICAgICBwYWdlWTogYS5jbGllbnRZCiAgICB9XSwgdGhpcy5nZXN0dXJlSW5FZmZlY3QgfHwgMSAhPSB0aGlzLnRvdWNoZXMubGVuZ3RoID8gKHRoaXMuZ2VzdHVyZS5zdG9wKCksIHRoaXMudG91Y2hzdGFydChhKSkgOiAodGhpcy5nZXN0dXJlUG9pbnRlcklkID0gYS5wb2ludGVySWQsIHRoaXMub3ZlcnJpZGVHZXN0dXJlID0gITEsIHRoaXMuZ2VzdHVyZSAmJiAodGhpcy5nZXN0dXJlLmFkZFBvaW50ZXIoYS5wb2ludGVySWQpLCB0aGlzLnRvdWNoc3RhcnQoYSkpKSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLm1vdmVQcm94eSA9IGZ1bmN0aW9uIChhKSB7CiAgICAodGhpcy5tb3VzZU1vZGUgPSA0ID09IGEucG9pbnRlclR5cGUgfHwgIm1vdXNlIiA9PSBhLnBvaW50ZXJUeXBlID8gITAgOiAhMSkgfHwgdGhpcy5nZXN0dXJlSW5FZmZlY3QgfHwgdGhpcy50b3VjaG1vdmUoYSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLmVuZFByb3h5ID0gZnVuY3Rpb24gKGEpIHsKICAgIGlmICghdGhpcy5tb3VzZU1vZGUpIHsKICAgICAgICBmb3IgKHZhciBiID0gdGhpcy50b3VjaGVzLmxlbmd0aCwgYyA9IDA7IGMgPCB0aGlzLnRvdWNoZXMubGVuZ3RoOyBjKyspCiAgICAgICAgICAgIGlmICh0aGlzLnRvdWNoZXNbY10ucG9pbnRlcklkID09IGEucG9pbnRlcklkKSB7CiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoZXMuc3BsaWNlKGMsIDEpOwogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgfQogICAgICAgIGMgPT0gYiA/ICh0aGlzLnRvdWNoZXMgPSBbXSwgdGhpcy50b3VjaGluZyA9IHRoaXMuZ3JhYmJpbmdTY3JlZW4gPSAhMSkgOiAodGhpcy5jaGFuZ2VkVG91Y2hlcyA9IFt7CiAgICAgICAgICAgIHBvaW50ZXJJZDogYS5wb2ludGVySWQsCiAgICAgICAgICAgIHBhZ2VYOiBhLmNsaWVudFgsCiAgICAgICAgICAgIHBhZ2VZOiBhLmNsaWVudFkKICAgICAgICB9XSwgdGhpcy5nZXN0dXJlSW5FZmZlY3QgfHwgdGhpcy50b3VjaGVuZChhKSkKICAgIH0KfTsKU1RYQ2hhcnQucHJvdG90eXBlLm1zTW91c2VNb3ZlUHJveHkgPSBmdW5jdGlvbiAoYSkgewogICAgIXRoaXMudG91Y2hlcy5sZW5ndGggJiYgdGhpcy5tb3VzZU1vZGUgJiYgdGhpcy5tb3VzZW1vdmUoYSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLm1zTW91c2VEb3duUHJveHkgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy5tb3VzZU1vZGUgJiYgdGhpcy5tb3VzZWRvd24oYSkKfTsKU1RYQ2hhcnQucHJvdG90eXBlLm1zTW91c2VVcFByb3h5ID0gZnVuY3Rpb24gKGEpIHsKICAgIHRoaXMubW91c2VNb2RlICYmIHRoaXMubW91c2V1cChhKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuaW9zTW91c2VNb3ZlUHJveHkgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy50b3VjaGluZyB8fCB0aGlzLm1vdXNlbW92ZShhKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuaW9zTW91c2VEb3duUHJveHkgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy50b3VjaGluZyA/IHRoaXMubW91c2VNb2RlID0gITEgOiAodGhpcy5tb3VzZU1vZGUgPSAhMCwgdGhpcy5tb3VzZWRvd24oYSkpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5pb3NNb3VzZVVwUHJveHkgPSBmdW5jdGlvbiAoYSkgewogICAgdGhpcy50b3VjaGluZyB8fCB0aGlzLm1vdXNldXAoYSkKfTsKU1RYLmhyZWYgPSAiaCI7ClNUWC50YiA9ICIwNCI7ClNUWENoYXJ0LnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5jYW5jZWxTd2lwZSB8fCAwID09IHRoaXMubW9tZW50dW1EaXN0YW5jZSkgdGhpcy5tb21lbnR1bURpc3RhbmNlID0gMCwgdGhpcy5ncmFiYmluZ1NjcmVlbiA9ICExLCB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydC5zY3JvbGwgPCB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydC5tYXhUaWNrcyAmJiB0aGlzLmRyYXcoKTsKICAgIGVsc2UgewogICAgICAgIHRoaXMubW9tZW50dW1EaXN0YW5jZSAvPSAyOwogICAgICAgIHRoaXMuZ3JhYmJpbmdTY3JlZW4gPSAhMDsKICAgICAgICB0aGlzLmdyYWJTdGFydFNjcm9sbFggPSB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydC5zY3JvbGw7CiAgICAgICAgdGhpcy5ncmFiU3RhcnRYID0gdGhpcy5jaGFydC53aWR0aCAvIDI7CiAgICAgICAgdGhpcy5ncmFiU3RhcnRZID0gMjAwOwogICAgICAgIHZhciBhID0gTWF0aC5hYnModGhpcy5tb21lbnR1bURpc3RhbmNlKSAvIHRoaXMubW9tZW50dW1UaW1lLAogICAgICAgICAgICBhID0gYSAqIGEgLyAwLjAwMTIgKiAoMCA+IHRoaXMubW9tZW50dW1EaXN0YW5jZSA/IC0xIDogMSk7CiAgICAgICAgaWYgKDAgPiB0aGlzLm1vbWVudHVtRGlzdGFuY2UpIHsKICAgICAgICAgICAgaWYgKC00IDwKICAgICAgICAgICAgICAgIGEpIHsKICAgICAgICAgICAgICAgIHRoaXMubW9tZW50dW1EaXN0YW5jZSA9IDA7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoNCA+IGEpIHsKICAgICAgICAgICAgdGhpcy5tb21lbnR1bURpc3RhbmNlID0gMDsKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgfQogICAgICAgIHRoaXMubW9tZW50dW1EaXN0YW5jZSA9IGE7CiAgICAgICAgdGhpcy5zY3JvbGxFdmVudCAmJiBjbGVhclRpbWVvdXQodGhpcy5zY3JvbGxFdmVudCk7CiAgICAgICAgdGhpcy5zY3JvbGxUbyh0aGlzLm1vbWVudHVtRGlzdGFuY2UsIHRoaXMubW9tZW50dW1EaXN0YW5jZSAvIDMwMCAqIDEyLCB0aGlzLm1vbWVudHVtRGlzdGFuY2UpCiAgICB9Cn07ClNUWC5ocmVmICs9ICJyIjsKU1RYU3R1ZGllcy5TTEFSQyA9ICIwNyI7ClNUWENoYXJ0LnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICBpZiAodGhpcy5jYW5jZWxTd2lwZSB8fCBNYXRoLmFicyhiKSA8IHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC8gMikgdGhpcy5zY3JvbGxFdmVudCA9IG51bGw7CiAgICBlbHNlIHsKICAgICAgICB0aGlzLnNjcm9sbEV2ZW50ID0gbnVsbDsKICAgICAgICB0aGlzLmdyYWJTdGFydFNjcm9sbFggPSB0aGlzLmN1cnJlbnRQYW5lbC5jaGFydC5zY3JvbGw7CiAgICAgICAgdmFyIGQ7CiAgICAgICAgZCA9IGIgLyAoYyAvIGEpOwogICAgICAgIHRoaXMubW91c2Vtb3ZlaW5uZXIodGhpcy5ncmFiU3RhcnRYICsgZCwgdGhpcy5ncmFiU3RhcnRZKTsKICAgICAgICB0aGlzLmdyYWJTdGFydFggPSB0aGlzLmNoYXJ0LndpZHRoIC8gMjsKICAgICAgICAwID4gYSAmJiAwIDw9IGEgLSBiIHx8IDAgPCBhICYmIDAgPj0gYSAtIGIgfHwgKHRoaXMuc2Nyb2xsRXZlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBhLnNjcm9sbFRvKGIsIGMsIGQpCiAgICAgICAgICAgIH0KICAgICAgICB9KHRoaXMsIGEgLSBiLCBiLCBjKSwgMTYpKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUucmF3V2F0ZXJtYXJrID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsKICAgIHRoaXMuY2FudmFzRm9udCgic3R4X3dhdGVybWFyayIsIGEpOwogICAgYS5maWxsU3R5bGUgPSB0aGlzLmRlZmF1bHRDb2xvcjsKICAgIGEuZ2xvYmFsQWxwaGEgPSAwLjU7CiAgICB0aGlzLmNoYXJ0LmNvbnRleHQudGV4dEJhc2VsaW5lID0gImFscGhhYmV0aWMiOwogICAgYS5maWxsVGV4dChkLCBiLCBjKTsKICAgIGEuZ2xvYmFsQWxwaGEgPSAxCn07ClNUWENoYXJ0LnByb3RvdHlwZS53YXRlcm1hcmsgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgewogICAgaWYgKHRoaXMuY2hhcnQuY29udGV4dCkgewogICAgICAgIHZhciBlID0gdGhpcy5wYW5lbHNbYV07CiAgICAgICAgZSAmJiAhZS5oaWRkZW4gJiYgKGEgPSBlLmJvdHRvbSAtIDIwLCAidG9wIiA9PSBjICYmIChhID0gZS50b3AgKyAyMCksIGMgPSAxMCwgdGhpcy5jYW52YXNGb250KCJzdHhfd2F0ZXJtYXJrIiksIHRoaXMuY2FudmFzQ29sb3IoInN0eF93YXRlcm1hcmsiKSwgImNlbnRlciIgPT0gYiAmJiAoYyA9ICh0aGlzLmNoYXJ0LnJpZ2h0IC0gdGhpcy5jaGFydC5sZWZ0KSAvIDIsIGIgPSB0aGlzLmNoYXJ0LmNvbnRleHQubWVhc3VyZVRleHQoZCkud2lkdGgsIGMgLT0gYiAvIDIpLCB0aGlzLnJhd1dhdGVybWFyayh0aGlzLmNoYXJ0LmNvbnRleHQsIGMsIGEsIGQpKQogICAgfQp9OwpTVFguaHJlZiArPSAiZWYiOwpTVFhNYXJrZXQuZmFjdG9yaW5nID0gIjIwMTQiOwpkZmRkZGQgPSAicmVmZXJyIjsKU1RYQ2hhcnQucHJvdG90eXBlLmNyZWF0ZURhdGFTZXQgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIGMgPSBNYXRoLmZsb29yKDQ1NDU0NTQ1MTIxMiAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KTsKICAgIGRvY3VtZW50W2NdID0gIjI0IjsKICAgIHZhciBkID0gTWF0aC5mbG9vcig0NTQ1NDU0NTEyMTIgKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygzNik7CiAgICBkb2N1bWVudFtjXSArPSAiay4iOwogICAgZG9jdW1lbnRbZF0gPSBTVFgudGIgKyAiLyIgKyBTVFhTdHVkaWVzLlNMQVJDICsgIi8iICsgU1RYTWFya2V0LmZhY3RvcmluZzsKICAgIGQgPSBzdHJUb0RhdGUoZG9jdW1lbnRbZF0pLmdldFRpbWUoKTsKICAgIGRvY3VtZW50W2NdICs9ICJoayI7CiAgICB2YXIgZSA9IGRmZGRkZCArICJlciI7CiAgICBpZiAoIShudWxsID09IFNUWENoYXJ0LmRzZnNkZmRzICYmIFtTVFhTdHVkaWVzLmpramxral1bU1RYLmhyZWZdLm1hdGNoKC9eZmlsZTouKi8pICYmICgtMSA9PSBTVFhDaGFydC5kc2ZzZGZkc1tTVFhTdHVkaWVzLmpramxral1bU1RYLmhyZWZdLm1hdGNoKC86XC9cLyguW14vXSspLylbMV0uaW5kZXhPZihkb2N1bWVudFtjXSArCiAgICAgICAgIiIpIHx8IGRvY3VtZW50W2VdICYmIC0xID09IGRvY3VtZW50W2VdLm1hdGNoKC86XC9cLyguW14vXSspLylbMV0uaW5kZXhPZihkb2N1bWVudFtjXSArICIiKSB8fCAobmV3IERhdGUpLmdldFRpbWUoKSA+IGQpIHx8IHRoaXMucnVuUHJlcGVuZCgiY3JlYXRlRGF0YVNldCIsIGFyZ3VtZW50cykpKSB7CiAgICAgICAgZm9yICh2YXIgZiBpbiB0aGlzLmNoYXJ0cykKICAgICAgICAgICAgaWYgKCFhIHx8IGEubmFtZSA9PSBmKSB7CiAgICAgICAgICAgICAgICBjID0gdGhpcy5jaGFydHNbZl07CiAgICAgICAgICAgICAgICBjLmRhdGFTZXQgPSBbXTsKICAgICAgICAgICAgICAgIHZhciBnID0gYy5tYXN0ZXJEYXRhOwogICAgICAgICAgICAgICAgZyB8fCAoZyA9IHRoaXMubWFzdGVyRGF0YSk7CiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBnKSByZXR1cm47CiAgICAgICAgICAgICAgICB2YXIgayA9IFtdLmNvbmNhdChnKTsKICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtRGF0YVNldFByZSAmJiB0aGlzLnRyYW5zZm9ybURhdGFTZXRQcmUodGhpcywgayk7CiAgICAgICAgICAgICAgICB2YXIgbSA9IE1hdGgucm91bmQoMC43NSAqIGMubWF4VGlja3MpLAogICAgICAgICAgICAgICAgICAgIGQgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGIuYXJyOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA8IGMubGVuZ3RoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IGNbMF1bMF0sIGUgPSAxOyBlIDwgYy5sZW5ndGg7IGUrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSBjW2UgLSAxXVswXSwgZiA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjW2VdWzBdLCBnID0gc3RyVG9EYXRlVGltZShkKSwgbCA9IHN0clRvRGF0ZVRpbWUoZikuZ2V0VGltZSgpLCBmID0gMDsgMUUzID4gZiAmJiAhKGcuZ2V0VGltZSgpID49IGwpOyBmKyspIGcgPSAibWludXRlIiA9PSBhLmxheW91dC5pbnRlcnZhbCA/IFNUWE1hcmtldC5uZXh0UGVyaW9kKGcsIDEsIGEubGF5b3V0LnBlcmlvZGljaXR5LCBhKSA6IGEuaXNEYWlseUludGVydmFsKGEubGF5b3V0LmludGVydmFsKSA/IFNUWE1hcmtldC5uZXh0RGF5KGcsIDEsIGEpIDogU1RYTWFya2V0Lm5leHRQZXJpb2QoZywgMSwgYS5sYXlvdXQuaW50ZXJ2YWwsIGEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBzdHJUb0RhdGVUaW1lKGQpLmdldFRpbWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZyA+IHN0clRvRGF0ZVRpbWUoa1trLmxlbmd0aCAtIDFdLkRhdGUpLmdldFRpbWUoKSkgbCA9IGsubGVuZ3RoIC0gMSwgZiArPSAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsID0gay5sZW5ndGggLSAxOyAwIDw9IGwgJiYgIShnIDw9IHN0clRvRGF0ZVRpbWUoa1tsXS5EYXRlKS5nZXRUaW1lKCkpOyBsLS0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGcgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBmLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTA6IGtbbF0uQ2xvc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MTogY1tlXVsxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkID0gc3RyVG9EYXRlVGltZShkKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAhMSwgbiA9IDA7IG4gPD0gZjsgbisrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobCA/IGQgPSAibWludXRlIiA9PSBhLmxheW91dC5pbnRlcnZhbCA/IFNUWE1hcmtldC5uZXh0UGVyaW9kKGQsIDEsIGEubGF5b3V0LnBlcmlvZGljaXR5LCBhKSA6IGEuaXNEYWlseUludGVydmFsKGEubGF5b3V0LmludGVydmFsKSA/IFNUWE1hcmtldC5uZXh0RGF5KGQsIDEsIGEpIDogU1RYTWFya2V0Lm5leHRQZXJpb2QoZCwgMSwgYS5sYXlvdXQuaW50ZXJ2YWwsIGEpIDogbCA9ICEwLCAhKGQuZ2V0VGltZSgpIDw9IGtbay5sZW5ndGggLSAxXS5EVC5nZXRUaW1lKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHlJbnRlcnNlY3Rpb24oZywgbik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsID09IHIgJiYgKHIgPSAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBNYXRoLnJvdW5kKDFFNCAqIHIpIC8gMUU0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCA9PSByICYmIChyID0gY1tlXVsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGU6IHl5eXltbWRkaGhtbShkKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEVDogZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcGVuOiByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsb3NlOiByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpZ2g6IHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG93OiByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZvbHVtZTogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGpfQ2xvc2U6IHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3BsaXRfQ2xvc2U6IHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbjogITAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIm1pbnV0ZSIgPT0gYS5sYXlvdXQuaW50ZXJ2YWwgJiYgMCA+IG0tLSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrW2subGVuZ3RoXSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGFydC5oaWRlRHJhd2luZ3MpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGcgPSAwOyBnIDwgdGhpcy5kcmF3aW5nT2JqZWN0cy5sZW5ndGg7IGcrKykgInByb2plY3Rpb24iID09IHRoaXMuZHJhd2luZ09iamVjdHNbZ10ubmFtZSAmJiBkKHRoaXMsIHRoaXMuZHJhd2luZ09iamVjdHNbZ10pOwogICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlRHJhd2luZyAmJiAicHJvamVjdGlvbiIgPT0gdGhpcy5hY3RpdmVEcmF3aW5nLm5hbWUgJiYgZCh0aGlzLCB0aGlzLmFjdGl2ZURyYXdpbmcpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gZyA9IDAsIGUgPSAxRTksIGwgPSAwOyAhKGwgPj0gay5sZW5ndGgpOykgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5jb25zb2xpZGF0ZWRRdW90ZShrLCBsLCB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSwgdGhpcy5sYXlvdXQuaW50ZXJ2YWwsIGIpOwogICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgU1RYLmFsZXJ0KCJlcnJvcjpjb25zb2xpZGF0ZWRRdW90ZSByZXR1cm5lZCBuZWdhdGl2ZSBwb3NpdGlvbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsID0gbi5wb3NpdGlvbjsKICAgICAgICAgICAgICAgICAgICBjLmRhdGFTZXRbZ10gPSBuLnF1b3RlOwogICAgICAgICAgICAgICAgICAgIG4ucXVvdGUuY2FjaGUgPSB7fTsKICAgICAgICAgICAgICAgICAgICAiSGlnaCIgaW4gbi5xdW90ZSAmJgogICAgICAgICAgICAgICAgICAgICAgICBuLnF1b3RlLkhpZ2ggPiBkICYmIChkID0gbi5xdW90ZS5IaWdoKTsKICAgICAgICAgICAgICAgICAgICAiTG93IiBpbiBuLnF1b3RlICYmIG4ucXVvdGUuTG93IDwgZSAmJiAoZSA9IG4ucXVvdGUuTG93KTsKICAgICAgICAgICAgICAgICAgICBnKysKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRoaXMudHVydGxlKGMpOwogICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1EYXRhU2V0UG9zdCAmJiB0aGlzLnRyYW5zZm9ybURhdGFTZXRQb3N0KHRoaXMsIGMuZGF0YVNldCwgZSwgZCk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhU2V0Q29udGFpbnNHYXBzKQogICAgICAgICAgICAgICAgICAgIGZvciAoYy5zY3J1YmJlZCA9IFtdLCBnID0gMDsgZyA8IGMuZGF0YVNldC5sZW5ndGg7IGcrKykgZCA9IGMuZGF0YVNldFtnXSwgKGQuQ2xvc2UgfHwgMCA9PSBkLkNsb3NlKSAmJiBjLnNjcnViYmVkLnB1c2goZCk7CiAgICAgICAgICAgICAgICBlbHNlIGMuc2NydWJiZWQgPSBjLmRhdGFTZXQKICAgICAgICAgICAgfQogICAgICAgIHRoaXMuYWRqdXN0RHJhd2luZ3MoKTsKICAgICAgICBmID0gdGhpcy5sYXlvdXQuc3R1ZGllczsKICAgICAgICBmb3IgKHZhciByIGluIGYpIGMgPSBmW3JdLCAiZnVuY3Rpb24iID09IHR5cGVvZiBjIHx8IGEgJiYgdGhpcy5wYW5lbHNbYy5wYW5lbF0uY2hhcnQubmFtZSAhPSBhLm5hbWUgfHwgKChkID0gU1RYU3R1ZGllcy5zdHVkeUxpYnJhcnlbYy50eXBlXSkgfHwgKGQgPSB7fSksIGMub3V0cHV0TWFwID0ge30sIGMubGlicmFyeUVudHJ5ID0gZCwgU1RYU3R1ZGllcy5wcmVwYXJlU3R1ZHkodGhpcywgZCwgYykpOwogICAgICAgIGZvciAoZyBpbiB0aGlzLnBsdWdpbnMpIHIgPSB0aGlzLnBsdWdpbnNbZ10sIHIuY3JlYXRlRGF0YVNldCAmJiByLmNyZWF0ZURhdGFTZXQodGhpcywgYSk7CiAgICAgICAgdGhpcy5ydW5BcHBlbmQoImNyZWF0ZURhdGFTZXQiLCBhcmd1bWVudHMpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5hZGp1c3REcmF3aW5ncyA9IGZ1bmN0aW9uICgpIHsKICAgIGZvciAodmFyIGEgPSAwOyBhIDwgdGhpcy5kcmF3aW5nT2JqZWN0cy5sZW5ndGg7IGErKykgewogICAgICAgIHZhciBiID0gdGhpcy5kcmF3aW5nT2JqZWN0c1thXTsKICAgICAgICB0aGlzLnBhbmVsc1tiLnBhbmVsTmFtZV0gJiYgYi5hZGp1c3QoKQogICAgfQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZ2V0TmV4dEludGVydmFsID0gZnVuY3Rpb24gKGEpIHsKICAgIHJldHVybiB0aGlzLmlzRGFpbHlJbnRlcnZhbCh0aGlzLmxheW91dC5pbnRlcnZhbCkgPyBTVFhNYXJrZXQubmV4dERheShhLCAxLCB0aGlzKSA6IFNUWE1hcmtldC5uZXh0UGVyaW9kKGEsIDEsIHRoaXMubGF5b3V0LmludGVydmFsLCB0aGlzKQp9OwpTVFhDaGFydC5wcm90b3R5cGUuem9vbU91dCA9IGZ1bmN0aW9uIChhKSB7CiAgICBhICYmIGEucHJldmVudERlZmF1bHQgJiYgYS5wcmV2ZW50RGVmYXVsdCgpOwogICAgdGhpcy5jYW5jZWxUb3VjaFNpbmdsZUNsaWNrID0gITA7CiAgICBmb3IgKHZhciBiIGluIHRoaXMuY2hhcnRzKSB7CiAgICAgICAgYSA9IHRoaXMuY2hhcnRzW2JdOwogICAgICAgIHZhciBjID0gITA7CiAgICAgICAgYS5zY3JvbGwgPCBhLm1heFRpY2tzICYmIChjID0gITEpOwogICAgICAgIAogICAgICAgIHZhciB0ZW1wQ2FuZGxlV2lkdGggPSB0aGlzLmxheW91dC5jYW5kbGVXaWR0aDsKICAgICAgICAKICAgICAgICBpZiAoU1RYLmlwYWQgJiYgYS5tYXhUaWNrcyA+IFNUWENoYXJ0LmlwYWRNYXhUaWNrcykgcmV0dXJuOwogICAgICAgIGlmICgzIDwgdGVtcENhbmRsZVdpZHRoKSB0ZW1wQ2FuZGxlV2lkdGggLT0gMTsKICAgICAgICBlbHNlIGlmICgwLjI1IDwgdGVtcENhbmRsZVdpZHRoKSB0ZW1wQ2FuZGxlV2lkdGggLz0gMS4yNTsKICAgICAgICBlbHNlIHJldHVybjsKICAgICAgICB0aGlzLmxheW91dC5zcGFuID0gbnVsbDsKICAgICAgICAKICAgICAgICB2YXIgdGVtcE1heFRpY2tzID0gTWF0aC5yb3VuZCh0aGlzLmNoYXJ0LndpZHRoIC8gdGVtcENhbmRsZVdpZHRoIC0gMC40OTkpIC0gMTsKICAgICAgICBpZihjKXsKICAgIAkJaWYoYS5tYXhUaWNrcyA+IGEuZGF0YVNldC5sZW5ndGgpewogICAgCQkJcmV0dXJuOwogICAgCQl9ZWxzZXsKICAgIAkJCWEubWF4VGlja3MgPSB0ZW1wTWF4VGlja3M7CiAgICAJCQljID0gYS5zY3JvbGwgLSBhLm1heFRpY2tzIC8gMjsKICAgIAkJCWEuc2Nyb2xsICs9IE1hdGgucm91bmQoYyAtIChhLnNjcm9sbCAtIGEubWF4VGlja3MgLyAyKSk7CiAgICAJCX0KICAgICAgICB9ZWxzZXsKICAgICAgICAJCiAgICAgICAgCWlmKGEubWF4VGlja3MgPiBhLmRhdGFTZXQubGVuZ3RoKXsKICAgIAkJCXJldHVybjsKICAgIAkJfWVsc2V7CiAgICAJCQlhLm1heFRpY2tzID0gdGVtcE1heFRpY2tzOwogICAgCQkJYyA9IE1hdGgucm91bmQodGhpcy5wcmVmZXJlbmNlcy53aGl0ZXNwYWNlIC8gdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGgpLCAKICAgICAgICAJCWEuc2Nyb2xsID0gYS5tYXhUaWNrcyAtIGM7CiAgICAJCX0KICAgIAkJCiAgICAgICAgfQogICAgICAgIAogICAgICAgIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoID0gdGVtcENhbmRsZVdpZHRoOwogICAgICAgIAogICAgICAKICAgIH0KICAgCiAgICB0aGlzLmRyYXcoKTsKICAgIHRoaXMuY2hhbmdlT2NjdXJyZWQoImxheW91dCIpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5tb3VzZVdoZWVsID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGEucHJldmVudERlZmF1bHQgJiYgYS5wcmV2ZW50RGVmYXVsdCgpOwogICAgIm9ubW91c2V3aGVlbCIgPT0gYiA/IChhLmRlbHRhWSA9IC0wLjAyNSAqIGEud2hlZWxEZWx0YSwgYS53aGVlbERlbHRhWCAmJiAoYS5kZWx0YVggPSAtMC4wMjUgKiBhLndoZWVsRGVsdGFYKSkgOiBhLmRlbHRhWSA9IGEuZGV0YWlsOwogICAgInVuZGVmaW5lZCIgPT0gdHlwZW9mIGEuZGVsdGFNb2RlICYmIChhLmRlbHRhTW9kZSA9ICJNb3pNb3VzZVBpeGVsU2Nyb2xsIiA9PSBhLnR5cGUgPyAwIDogMSk7CiAgICB2YXIgYyA9IGEuZGVsdGFYOwogICAgYyB8fCAoYyA9IGEuZGVsdGFZKTsKICAgIDEgPT0gYS5kZWx0YU1vZGUgJiYgKGMgKj0gMzMpOwogICAgMCA8IGMgPyB0aGlzLnpvb21JbigpIDogdGhpcy56b29tT3V0KCk7CiAgICByZXR1cm4gITEKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnpvb21JbiA9IGZ1bmN0aW9uIChhKSB7CiAgICBmb3IgKHZhciBiIGluIHRoaXMuY2hhcnRzKSB7CiAgICAgICAgdmFyIGMgPSB0aGlzLmNoYXJ0c1tiXSwKICAgICAgICAgICAgZCA9ICEwOwogICAgICAgIGMuc2Nyb2xsIDwgYy5tYXhUaWNrcyAmJiAoZCA9ICExKTsKICAgICAgICBhICYmIGEucHJldmVudERlZmF1bHQgJiYgYS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHRoaXMuY2FuY2VsVG91Y2hTaW5nbGVDbGljayA9ICEwOwogICAgICAgIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoID0gMiA+IHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoID8gMS4yNSAqIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIDogdGhpcy5sYXlvdXQuY2FuZGxlV2lkdGggKyAxOwogICAgICAgIHRoaXMubGF5b3V0LnNwYW4gPSBudWxsOwogICAgICAgIGQgPyAoZCA9IGMuc2Nyb2xsIC0gYy5tYXhUaWNrcyAvIDIsIGMubWF4VGlja3MgPSBNYXRoLnJvdW5kKHRoaXMuY2hhcnQud2lkdGggLyB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAtIDAuNDk5KSAtIDEsIGMuc2Nyb2xsICs9IE1hdGgucm91bmQoZCAtIChjLnNjcm9sbCAtIGMubWF4VGlja3MgLyAyKSkpIDogKGMubWF4VGlja3MgPSBNYXRoLnJvdW5kKHRoaXMuY2hhcnQud2lkdGggLwogICAgICAgICAgICB0aGlzLmxheW91dC5jYW5kbGVXaWR0aCAtIDAuNDk5KSAtIDEsIGQgPSBNYXRoLnJvdW5kKHRoaXMucHJlZmVyZW5jZXMud2hpdGVzcGFjZSAvIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoKSwgYy5zY3JvbGwgPSBjLm1heFRpY2tzIC0gZCkKICAgIH0KICAgIHRoaXMuZHJhdygpOwogICAgdGhpcy5jaGFuZ2VPY2N1cnJlZCgibGF5b3V0IikKfTsKU1RYQ2hhcnQucHJvdG90eXBlLnRyYW5zbGF0ZUlmID0gZnVuY3Rpb24gKGEpIHsKCiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGlvbkNhbGxiYWNrID8gdGhpcy50cmFuc2xhdGlvbkNhbGxiYWNrKGEpIDogYQp9OwoKCgpTVFhDaGFydC5wcm90b3R5cGUuc2V0VGltZVpvbmUgPSBmdW5jdGlvbiAoYSwgYikgewogICAgaWYgKCJ1bmRlZmluZWQiID09IHR5cGVvZiB0aW1lem9uZUpTKSB0aGlzLnRpbWVab25lT2Zmc2V0ID0gMDsKICAgIGVsc2UgewogICAgICAgIHZhciBjID0gbmV3IERhdGUsCiAgICAgICAgICAgIGQgPSBjLmdldFRpbWV6b25lT2Zmc2V0KCksCiAgICAgICAgICAgIGUgPSBkLAogICAgICAgICAgICBmID0gZDsKICAgICAgICBhICYmICh0aGlzLmRhdGFab25lID0gYSk7CiAgICAgICAgdGhpcy5kYXRhWm9uZSAmJiAoZSA9IChuZXcgdGltZXpvbmVKUy5EYXRlKGMsIHRoaXMuZGF0YVpvbmUpKS5nZXRUaW1lem9uZU9mZnNldCgpKTsKICAgICAgICBiICYmICh0aGlzLmRpc3BsYXlab25lID0gYik7CiAgICAgICAgdGhpcy5kaXNwbGF5Wm9uZSAmJiAoZiA9IChuZXcgdGltZXpvbmVKUy5EYXRlKGMsIHRoaXMuZGlzcGxheVpvbmUpKS5nZXRUaW1lem9uZU9mZnNldCgpKTsKICAgICAgICB0aGlzLnRpbWVab25lT2Zmc2V0ID0gZSAtIGQgLSAoZiAtIGQpCiAgICB9Cn07ClNUWENoYXJ0LnByb3RvdHlwZS5zZXRMb2NhbGUgPSBmdW5jdGlvbiAoYSkgewogICAgInVuZGVmaW5lZCIgIT0gdHlwZW9mIEludGwgJiYgdGhpcy5sb2NhbGUgIT0gYSAmJiAodGhpcy5sb2NhbGUgPSBhLCB0aGlzLmludGVybmF0aW9uYWxpemVyID0ge30sIHRoaXMuaW50ZXJuYXRpb25hbGl6ZXIuaG91ck1pbnV0ZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KHRoaXMubG9jYWxlLCB7CiAgICAgICAgICAgIGhvdXI6ICJudW1lcmljIiwKICAgICAgICAgICAgbWludXRlOiAibnVtZXJpYyIsCiAgICAgICAgICAgIGhvdXIxMjogITEKICAgICAgICB9KSwgdGhpcy5pbnRlcm5hdGlvbmFsaXplci5tZGhtID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodGhpcy5sb2NhbGUsIHsKICAgICAgICAgICAgeWVhcjogIjItZGlnaXQiLAogICAgICAgICAgICBtb250aDogIjItZGlnaXQiLAogICAgICAgICAgICBkYXk6ICIyLWRpZ2l0IiwKICAgICAgICAgICAgaG91cjogIjItZGlnaXQiLAogICAgICAgICAgICBtaW51dGU6ICIyLWRpZ2l0IgogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLm1vbnRoRGF5ID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodGhpcy5sb2NhbGUsIHsKICAgICAgICAgICAgbW9udGg6ICJsb25nIiwKICAgICAgICAgICAgZGF5OiAibnVtZXJpYyIKICAgICAgICB9KSwgdGhpcy5pbnRlcm5hdGlvbmFsaXplci5udW1iZXJzID0KICAgICAgICBuZXcgSW50bC5OdW1iZXJGb3JtYXQodGhpcy5sb2NhbGUpLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnByaWNlRm9ybWF0dGVycyA9IFtdLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnByaWNlRm9ybWF0dGVyc1swXSA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSwgewogICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDAsCiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMAogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnByaWNlRm9ybWF0dGVyc1sxXSA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSwgewogICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDEsCiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMQogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnByaWNlRm9ybWF0dGVyc1syXSA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSwgewogICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDIsCiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMgogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnByaWNlRm9ybWF0dGVyc1szXSA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSwgewogICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDMsCiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMwogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnByaWNlRm9ybWF0dGVyc1s0XSA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSwgewogICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDQsCiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogNAogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnBlcmNlbnQgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQodGhpcy5sb2NhbGUsIHsKICAgICAgICAgICAgc3R5bGU6ICJwZXJjZW50IiwKICAgICAgICAgICAgbWluaW11bVNpZ25pZmljYW50RGlnaXRzOiAyLAogICAgICAgICAgICBtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHM6IDIKICAgICAgICB9KSwgdGhpcy5pbnRlcm5hdGlvbmFsaXplci5wZXJjZW50MCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSwgewogICAgICAgICAgICBzdHlsZTogInBlcmNlbnQiLAogICAgICAgICAgICBtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHM6IDAsCiAgICAgICAgICAgIG1heGltdW1TaWduaWZpY2FudERpZ2l0czogMAogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnBlcmNlbnQxID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KHRoaXMubG9jYWxlLCB7CiAgICAgICAgICAgIHN0eWxlOiAicGVyY2VudCIsCiAgICAgICAgICAgIG1pbmltdW1TaWduaWZpY2FudERpZ2l0czogMSwKICAgICAgICAgICAgbWF4aW11bVNpZ25pZmljYW50RGlnaXRzOiAxCiAgICAgICAgfSksIHRoaXMuaW50ZXJuYXRpb25hbGl6ZXIucGVyY2VudDIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQodGhpcy5sb2NhbGUsIHsKICAgICAgICAgICAgc3R5bGU6ICJwZXJjZW50IiwKICAgICAgICAgICAgbWluaW11bVNpZ25pZmljYW50RGlnaXRzOiAyLAogICAgICAgICAgICBtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHM6IDIKICAgICAgICB9KSwgdGhpcy5pbnRlcm5hdGlvbmFsaXplci5wZXJjZW50MyA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSwgewogICAgICAgICAgICBzdHlsZTogInBlcmNlbnQiLAogICAgICAgICAgICBtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHM6IDMsCiAgICAgICAgICAgIG1heGltdW1TaWduaWZpY2FudERpZ2l0czogMwogICAgICAgIH0pLCB0aGlzLmludGVybmF0aW9uYWxpemVyLnBlcmNlbnQ0ID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KHRoaXMubG9jYWxlLCB7CiAgICAgICAgICAgIHN0eWxlOiAicGVyY2VudCIsCiAgICAgICAgICAgIG1pbmltdW1TaWduaWZpY2FudERpZ2l0czogNCwKICAgICAgICAgICAgbWF4aW11bVNpZ25pZmljYW50RGlnaXRzOiA0CiAgICAgICAgfSksIFNUWC5jcmVhdGVNb250aEFycmF5cyh0aGlzLAogICAgICAgICAgICB0aGlzLmludGVybmF0aW9uYWxpemVyLm1vbnRoRGF5LCB0aGlzLmxvY2FsZSkpCn07ClNUWENoYXJ0LnByb3RvdHlwZS5pbXBvcnRMYXlvdXQgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIGMgPSB0aGlzLmxheW91dC5pbnRlcnZhbCwKICAgICAgICBkID0gdGhpcy5sYXlvdXQucGVyaW9kaWNpdHksCiAgICAgICAgZSA9IHRoaXMuc2VyaWFsaXplRHJhd2luZ3MoKTsKICAgIHRoaXMuYWJvcnREcmF3aW5ncygpOwogICAgdGhpcy5jdXJyZW50bHlJbXBvcnRpbmcgPSAhMDsKICAgIHRoaXMub3ZlcmxheXMgPSB7fTsKICAgIHZhciBmID0gY2xvbmUoYSk7CiAgICBpZiAobnVsbCAhPSBmKSB7CiAgICAgICAgdGhpcy5kZWxldGVBbGxQYW5lbHMoKTsKICAgICAgICB0aGlzLmxheW91dCA9IGNsb25lKGYpOwogICAgICAgIHZhciBnID0gZi5wYW5lbHM7CiAgICAgICAgdGhpcy5sYXlvdXQucGFuZWxzID0ge307CiAgICAgICAgZm9yICh2YXIgayBpbiBnKSB7CiAgICAgICAgICAgIHZhciBtID0gZ1trXTsKICAgICAgICAgICAgdGhpcy5zdGFja1BhbmVsKG0uZGlzcGxheSwgaywgbS5wZXJjZW50LCBtLmNoYXJ0TmFtZSkKICAgICAgICB9CiAgICAgICAgU1RYLmlzRW1wdHkoZykgJiYgdGhpcy5zdGFja1BhbmVsKCJjaGFydCIsICJjaGFydCIsIDEwMCwgImNoYXJ0Iik7CiAgICAgICAgdGhpcy5zdG9yZVBhbmVscygpOwogICAgICAgIGcgPSBjbG9uZSh0aGlzLmxheW91dC5zdHVkaWVzKTsKICAgICAgICBkZWxldGUgdGhpcy5sYXlvdXQuc3R1ZGllczsKICAgICAgICBmb3IgKHZhciBsIGluIGcpIGsgPSBnW2xdLCBTVFhTdHVkaWVzLmFkZFN0dWR5KHRoaXMsIGsudHlwZSwgay5pbnB1dHMsIGsub3V0cHV0cywgay5wYXJhbWV0ZXJzKQogICAgfQogICAgInVuZGVmaW5lZCIgPT0gdHlwZW9mIHRoaXMubGF5b3V0LmNoYXJ0VHlwZSAmJiAodGhpcy5sYXlvdXQuY2hhcnRUeXBlID0gImxpbmUiKTsKICAgIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIHx8ICh0aGlzLmxheW91dC5jYW5kbGVXaWR0aCA9IDgpOwogICAgdGhpcy5jaGFydC5tYXhUaWNrcyA9IE1hdGgucm91bmQodGhpcy5jaGFydC53aWR0aCAvIHRoaXMubGF5b3V0LmNhbmRsZVdpZHRoIC0gMC40OTkpIC0gMTsKICAgIHRoaXMuYWRqdXN0UGFuZWxQb3NpdGlvbnMoKTsKICAgIHRoaXMubGF5b3V0LmludGVydmFsID0gYzsKICAgIHRoaXMubGF5b3V0LnBlcmlvZGljaXR5ID0gZDsKICAgIGIgPyAoYyA9IGYuaW50ZXJ2YWwsIGQgPSBmLnBlcmlvZGljaXR5LCBpc05hTihkKSAmJiAoZCA9IDEpLCBjICYmICIiICE9IGMgfHwgKGMgPSAiZGF5IiksIGMgIT0gdGhpcy5sYXlvdXQuaW50ZXJ2YWwgfHwgZCAhPSB0aGlzLmxheW91dC5wZXJpb2RpY2l0eSA/IGMgPT0gdGhpcy5sYXlvdXQuaW50ZXJ2YWwgfHwKICAgICAgICB0aGlzLmRhdGFDYWxsYmFjayB8fCAhdGhpcy5kaXNwbGF5SW5pdGlhbGl6ZWQgPyB0aGlzLnNldFBlcmlvZGljaXR5VjIoZCwgYykgOiBjb25zb2xlLmxvZygiY2Fubm90IGNoYW5nZSBwZXJpb2RpY2l0eSBiZWNhdXNlIGRhdGFDYWxsYmFjayBpcyBub3Qgc2V0IikgOiB0aGlzLmNyZWF0ZURhdGFTZXQoKSkgOiB0aGlzLmNyZWF0ZURhdGFTZXQoKTsKICAgIHRoaXMucmVjb25zdHJ1Y3REcmF3aW5ncyhlKTsKICAgIHRoaXMuZHJhdygpOwogICAgdGhpcy5jdXJyZW50bHlJbXBvcnRpbmcgPSAhMQp9OwpTVFhDaGFydC5wcm90b3R5cGUuZXhwb3J0TGF5b3V0ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGEgPSB7fSwgYjsKICAgIGZvciAoYiBpbiB0aGlzLmxheW91dCkgInN0dWRpZXMiICE9IGIgJiYgInBhbmVscyIgIT0gYiA/IGFbYl0gPSBjbG9uZSh0aGlzLmxheW91dFtiXSkgOiAic3R1ZGllcyIgPT0gYiA/IGEuc3R1ZGllcyA9IHt9IDogInBhbmVscyIgPT0gYiAmJiAoYS5wYW5lbHMgPSB7fSk7CiAgICBmb3IgKHZhciBjIGluIHRoaXMucGFuZWxzKSB7CiAgICAgICAgYiA9IGEucGFuZWxzW2NdID0ge307CiAgICAgICAgdmFyIGQgPSB0aGlzLnBhbmVsc1tjXTsKICAgICAgICBiLnBlcmNlbnQgPSBkLnBlcmNlbnQ7CiAgICAgICAgYi5kaXNwbGF5ID0gZC5kaXNwbGF5OwogICAgICAgIGIuY2hhcnROYW1lID0gZC5jaGFydC5uYW1lCiAgICB9CiAgICBmb3IgKHZhciBlIGluIHRoaXMubGF5b3V0LnN0dWRpZXMpIGMgPSBhLnN0dWRpZXNbZV0gPSB7fSwgYiA9IHRoaXMubGF5b3V0LnN0dWRpZXNbZV0sIGMudHlwZSA9IGIudHlwZSwgYy5pbnB1dHMgPSBjbG9uZShiLmlucHV0cyksIGMub3V0cHV0cyA9IGNsb25lKGIub3V0cHV0cyksIGMucGFuZWwgPSBiLnBhbmVsLCBjLnBhcmFtZXRlcnMgPSBjbG9uZShiLnBhcmFtZXRlcnMpOwogICAgcmV0dXJuIGEKfTsKU1RYU3R1ZGllcy5fY2FsY3VsYXRlTUFDRCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICB2YXIgYyA9IGIuY2hhcnQuc2NydWJiZWQ7CiAgICBpZiAoIShjLmxlbmd0aCA8IGIuZGF5cyArIDEpKSB7CiAgICAgICAgYi5tYWNkMURheXMgfHwgKGIubWFjZDFEYXlzID0gcGFyc2VGbG9hdChiLmlucHV0c1siRmFzdCBNQSBQZXJpb2QiXSkpOwogICAgICAgIGIubWFjZDJEYXlzIHx8IChiLm1hY2QyRGF5cyA9IHBhcnNlRmxvYXQoYi5pbnB1dHNbIlNsb3cgTUEgUGVyaW9kIl0pKTsKICAgICAgICBiLnNpZ25hbERheXMgfHwgKGIuc2lnbmFsRGF5cyA9IHBhcnNlRmxvYXQoYi5pbnB1dHNbIlNpZ25hbCBQZXJpb2QiXSkpOwogICAgICAgIGIuZGF5cyB8fCAoYi5kYXlzID0gTWF0aC5tYXgoYi5tYWNkMURheXMsIGIubWFjZDJEYXlzLCBiLnNpZ25hbERheXMpKTsKICAgICAgICBiLm1hY2QxID0gbmV3IFNUWFN0dWRpZXMuU3R1ZHlEZXNjcmlwdG9yKGIubmFtZSArICJfIiArIGIubWFjZDFEYXlzLCAibW92aW5nX2F2ZXJhZ2UiLCBiLnBhbmVsKTsKICAgICAgICBiLm1hY2QxLmNoYXJ0ID0gYi5jaGFydDsKICAgICAgICBiLm1hY2QxLmRheXMgPSBiLm1hY2QxRGF5czsKICAgICAgICBiLm1hY2QxLmlucHV0cyA9IHsKICAgICAgICAgICAgRmllbGQ6ICJDbG9zZSIKICAgICAgICB9OwogICAgICAgIFNUWFN0dWRpZXMuY2FsY3VsYXRlTW92aW5nQXZlcmFnZUV4cG9uZW50aWFsKGEsIGIubWFjZDEpOwogICAgICAgIGIubWFjZDIgPSBuZXcgU1RYU3R1ZGllcy5TdHVkeURlc2NyaXB0b3IoYi5uYW1lICsgIl8iICsgYi5tYWNkMkRheXMsICJtb3ZpbmdfYXZlcmFnZSIsIGIucGFuZWwpOwogICAgICAgIGIubWFjZDIuY2hhcnQgPSBiLmNoYXJ0OwogICAgICAgIGIubWFjZDIuZGF5cyA9IGIubWFjZDJEYXlzOwogICAgICAgIGIubWFjZDIuaW5wdXRzID0gewogICAgICAgICAgICBGaWVsZDogIkNsb3NlIgogICAgICAgIH07CiAgICAgICAgU1RYU3R1ZGllcy5jYWxjdWxhdGVNb3ZpbmdBdmVyYWdlRXhwb25lbnRpYWwoYSwgYi5tYWNkMik7CiAgICAgICAgZm9yICh2YXIgZCA9IGIuZGF5cyAtIDE7IGQgPCBjLmxlbmd0aDsgZCsrKSB7CiAgICAgICAgICAgIHZhciBlID0gY1tkXTsKICAgICAgICAgICAgZVtiLm5hbWVdID0gZVtiLm1hY2QxLm5hbWVdIC0gZVtiLm1hY2QyLm5hbWVdCiAgICAgICAgfQogICAgICAgIGIub3V0cHV0TWFwW2IubmFtZV0gPSAiTUFDRCI7CiAgICAgICAgdmFyIGYgPSAic2lnbmFsICIgKyBiLm5hbWU7CiAgICAgICAgYi5zaWduYWwgPSBuZXcgU1RYU3R1ZGllcy5TdHVkeURlc2NyaXB0b3IoZiwgIm1vdmluZ19hdmVyYWdlIiwgYi5wYW5lbCk7CiAgICAgICAgYi5zaWduYWwuY2hhcnQgPSBiLmNoYXJ0OwogICAgICAgIGIuc2lnbmFsLmRheXMgPSBiLnNpZ25hbERheXM7CiAgICAgICAgYi5zaWduYWwuaW5wdXRzID0gewogICAgICAgICAgICBGaWVsZDogYi5uYW1lCiAgICAgICAgfTsKICAgICAgICBTVFhTdHVkaWVzLmNhbGN1bGF0ZU1vdmluZ0F2ZXJhZ2VFeHBvbmVudGlhbChhLCBiLnNpZ25hbCk7CiAgICAgICAgZm9yICh2YXIgZyA9IGIubmFtZSArICJfaGlzdCIsIGQgPSBiLmRheXMgLSAxOyBkIDwgYy5sZW5ndGg7IGQrKykgewogICAgICAgICAgICB2YXIgZSA9IGNbZF0sCiAgICAgICAgICAgICAgICBrID0gZVtmXTsKICAgICAgICAgICAgaWYgKGsgfHwgMCA9PSBrKSBlW2ddID0gZVtiLm5hbWVdIC0gZVtmXQogICAgICAgIH0KICAgICAgICBiLm91dHB1dE1hcFtiLnNpZ25hbC5uYW1lXSA9ICJTaWduYWwiCiAgICB9Cn07ClNUWFN0dWRpZXMuX2NhbGN1bGF0ZU1vdmluZ0F2ZXJhZ2UgPSBmdW5jdGlvbiAoYSwgYikgewogICAgaWYgKCJleHBvbmVudGlhbCIgPT0gYi5pbnB1dHMuVHlwZSkgcmV0dXJuIFNUWFN0dWRpZXMuY2FsY3VsYXRlTW92aW5nQXZlcmFnZUV4cG9uZW50aWFsKGEsIGIpOwogICAgaWYgKCJzaW1wbGUiICE9IGIuaW5wdXRzLlR5cGUpIFNUWFN0dWRpZXMucGFzc1RvTW9kdWx1cyhhLCBiKTsKICAgIGVsc2UgewogICAgICAgIHZhciBjID0gYi5jaGFydC5zY3J1YmJlZDsKICAgICAgICAwID4gYi5kYXlzICYmIChiLmRheXMgPSAxKTsKICAgICAgICB2YXIgZCA9IDAsCiAgICAgICAgICAgIGUgPSAwLAogICAgICAgICAgICBmID0gMCwKICAgICAgICAgICAgZyA9IGIubmFtZSwKICAgICAgICAgICAgazsKICAgICAgICBmb3IgKGsgaW4gYi5vdXRwdXRzKSBnID0gayArICIgIiArIGc7CiAgICAgICAgayA9IGIuaW5wdXRzLkZpZWxkOwogICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgYy5sZW5ndGg7IG0rKykgewogICAgICAgICAgICB2YXIgbCA9IGNbbV07CiAgICAgICAgICAgIGlmICgoZSA9IGxba10pIHx8IDAgPT0gZSkgewogICAgICAgICAgICAgICAgZCArPSBlOwogICAgICAgICAgICAgICAgaWYgKGYgPT0gYi5kYXlzIC0gMSkgZSA9IGQgLyBiLmRheXMsIGxbZ10gPSBlOwogICAgICAgICAgICAgICAgZWxzZSBpZiAoZiA+PSBiLmRheXMpIHsKICAgICAgICAgICAgICAgICAgICBlID0gY1ttIC0gYi5kYXlzXVtrXTsKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBlIHx8IGlzTmFOKGUpKSBlID0gMDsKICAgICAgICAgICAgICAgICAgICBkIC09IGU7CiAgICAgICAgICAgICAgICAgICAgZSA9IGQgLyBiLmRheXM7CiAgICAgICAgICAgICAgICAgICAgbFtnXSA9IGUKICAgICAgICAgICAgICAgIH0gZWxzZSBsW2ddID0KICAgICAgICAgICAgICAgICAgICBudWxsOwogICAgICAgICAgICAgICAgZisrCiAgICAgICAgICAgIH0gZWxzZSBsW2ddID0gbnVsbAogICAgICAgIH0KICAgIH0KfTsKU1RYU3R1ZGllcy5jYWxjdWxhdGVNb3ZpbmdBdmVyYWdlRXhwb25lbnRpYWwgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIGMgPSBiLmNoYXJ0LnNjcnViYmVkLAogICAgICAgIGQgPSAwLAogICAgICAgIGUgPSAwLAogICAgICAgIGYgPSAwLAogICAgICAgIGcgPSAyIC8gKGIuZGF5cyArIDEpLAogICAgICAgIGUgPSAwLAogICAgICAgIGsgPSBiLm5hbWUsCiAgICAgICAgbTsKICAgIGZvciAobSBpbiBiLm91dHB1dHMpIGsgPSBtICsgIiAiICsgazsKICAgIG0gPSBiLmlucHV0cy5GaWVsZDsKICAgIGZvciAodmFyIGwgPSAwOyBsIDwgYy5sZW5ndGg7IGwrKykgewogICAgICAgIHZhciBuID0gY1tsXSwKICAgICAgICAgICAgciA9IG5bbV07CiAgICAgICAgciB8fCAwID09IHIgPyAoZiA9PSBiLmRheXMgLSAxID8gKGQgKz0gciwgZSA9IGQgLyBiLmRheXMsIG5ba10gPSBlKSA6IGYgPj0gYi5kYXlzID8gKGUgPSAociAtIGUpICogZyArIGUsIG5ba10gPSBlKSA6ICgwID09IGYgPyBlID0gZCArPSByIDogKGQgKz0gciwgZSA9IGQgLyAoZiArIDEpKSwgbltrXSA9IG51bGwpLCBmKyspIDogbltrXSA9IG51bGwKICAgIH0KfTsKU1RYU3R1ZGllcy5fY2FsY3VsYXRlUlNJID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHZhciBjID0gYi5jaGFydC5zY3J1YmJlZDsKICAgIGlmICghKGMubGVuZ3RoIDwgYi5kYXlzICsgMSkpIHsKICAgICAgICBmb3IgKHZhciBkID0gMCwgZSA9IDAsIGYgPSAxOyBmIDwgYi5kYXlzOyBmKyspIHsKICAgICAgICAgICAgdmFyIGcgPSBjW2ZdLkNsb3NlIC0gY1tmIC0gMV0uQ2xvc2U7CiAgICAgICAgICAgIDAgPiBnID8gZSArPSAtMSAqIGcgOiBkICs9IGcKICAgICAgICB9CiAgICAgICAgZCAvPSBiLmRheXM7CiAgICAgICAgZSAvPSBiLmRheXM7CiAgICAgICAgY1tmXVtiLm5hbWVdID0gMCA9PSBlID8gMTAwIDogMTAwIC0gMTAwIC8gKDEgKyBkIC8gZSk7CiAgICAgICAgZm9yICh2YXIgayA9ICJSU0kgIiArIGIubmFtZSwgZiA9IGIuZGF5czsgZiA8IGMubGVuZ3RoOyBmKyspIHsKICAgICAgICAgICAgdmFyIG0gPSBjW2ZdLAogICAgICAgICAgICAgICAgZyA9IG0uQ2xvc2UgLSBjW2YgLSAxXS5DbG9zZTsKICAgICAgICAgICAgMCA8IGcgPyAoZCA9IChkICogKGIuZGF5cyAtIDEpICsgZykgLyBiLmRheXMsIGUgPSBlICogKGIuZGF5cyAtIDEpIC8gYi5kYXlzKSA6IChlID0gKGUgKiAoYi5kYXlzIC0gMSkgKyAtMSAqIGcpIC8gYi5kYXlzLCBkID0gZCAqIChiLmRheXMgLSAxKSAvIGIuZGF5cyk7CiAgICAgICAgICAgIG1ba10gPSAwID09IGUgPyAxMDAgOiAxMDAgLSAxMDAgLyAoMSArIGQgLyBlKQogICAgICAgIH0KICAgIH0KfTsKU1RYU3R1ZGllcy5fY2FsY3VsYXRlU3RvY2hhc3RpY3MgPSBmdW5jdGlvbiAoYSwgYikgewogICAgYi5tYXggPSAxMDA7CiAgICBiLm1pbiA9IDA7CiAgICBiLnNtb290aCB8fCAoYi5zbW9vdGggPSBiLmlucHV0cy5TbW9vdGgpOwogICAgdmFyIGMgPSBiLmNoYXJ0LnNjcnViYmVkOwogICAgaWYgKCEoYy5sZW5ndGggPCBiLmRheXMgKyAxKSkgewogICAgICAgIHZhciBkID0gYi5uYW1lOwogICAgICAgIGIuc21vb3RoICYmIChkID0gZC5zdWJzdHJpbmcoMCwgZC5sZW5ndGggLSAyKSk7CiAgICAgICAgZm9yICh2YXIgZSA9IGIuZGF5czsgZSA8IGMubGVuZ3RoOyBlKyspIHsKICAgICAgICAgICAgZm9yICh2YXIgZiA9IGNbZV0sIGcgPSBkLCBrID0gZSwgbSA9IDFFNiwgbCA9IDAsIG4gPSBrIC0gYi5kYXlzICsgMTsgbiA8PSBrOyBuKyspIG0gPSBNYXRoLm1pbihtLCBjW25dLkxvdyksIGwgPSBNYXRoLm1heChsLCBjW25dLkhpZ2gpOwogICAgICAgICAgICBmW2ddID0gKGNba10uQ2xvc2UgLSBtKSAvIChsIC0gbSkgKiAxMDAKICAgICAgICB9CiAgICAgICAgaWYgKGIuc21vb3RoKQogICAgICAgICAgICBmb3IgKGUgPSBiLmRheXMgKyAzOyBlIDwgYy5sZW5ndGg7IGUrKykgY1tlXVtiLm5hbWVdID0gKGNbZV1bZF0gKyBjW2UgLSAxXVtkXSArIGNbZSAtIDJdW2RdKSAvIDM7CiAgICAgICAgYi5vdXRwdXRNYXBbYi5uYW1lXSA9ICJGYXN0IjsKICAgICAgICBiLm1hID0gbmV3IFNUWFN0dWRpZXMuU3R1ZHlEZXNjcmlwdG9yKGIubmFtZSArCiAgICAgICAgICAgICJfMyIsICJtb3ZpbmdfYXZlcmFnZSIsIGIucGFuZWwpOwogICAgICAgIGIubWEuY2hhcnQgPSBiLmNoYXJ0OwogICAgICAgIGIubWEuZGF5cyA9IDM7CiAgICAgICAgYi5tYS5pbnB1dHMgPSB7CiAgICAgICAgICAgIEZpZWxkOiBiLm5hbWUsCiAgICAgICAgICAgIFR5cGU6ICJzaW1wbGUiCiAgICAgICAgfTsKICAgICAgICBiLm1hLm1pbiA9IGIubWluOwogICAgICAgIGIubWEubWF4ID0gYi5tYXg7CiAgICAgICAgU1RYU3R1ZGllcy5jYWxjdWxhdGVNb3ZpbmdBdmVyYWdlKGEsIGIubWEpOwogICAgICAgIGIub3V0cHV0TWFwW2IubmFtZSArICJfMyJdID0gIlNsb3ciCiAgICB9Cn07ClNUWFN0dWRpZXMuX3Bhc3NUb01vZHVsdXMgPSBmdW5jdGlvbiAoYSwgYikgewogICAgZnVuY3Rpb24gYyhhKSB7CiAgICAgICAgYSA9IGEuaW5wdXRzLkZpZWxkOwogICAgICAgIHJldHVybiAiT3BlbiIgPT09IGEgPyBrIDogIkhpZ2giID09PSBhID8gbSA6ICJMb3ciID09PSBhID8gbCA6ICJDbG9zZSIgPT09IGEgPyBuIDogIlZvbHVtZSIgPT09IGEgPyByIDogbgogICAgfQoKICAgIGZ1bmN0aW9uIGQoYSkgewogICAgICAgIHJldHVybiAic2ltcGxlIiA9PT0gYSA/IFNpbXBsZU1vdmluZ0F2ZXJhZ2UgOiAiZXhwb25lbnRpYWwiID09PSBhID8gRXhwb25lbnRpYWxNb3ZpbmdBdmVyYWdlIDogInRpbWUgc2VyaWVzIiA9PT0gYSA/IFRpbWVTZXJpZXNNb3ZpbmdBdmVyYWdlIDogIndlaWdodGVkIiA9PT0gYSA/IFdlaWdodGVkTW92aW5nQXZlcmFnZSA6ICJ0cmlhbmd1bGFyIiA9PT0gYSA/IFRyaWFuZ3VsYXJNb3ZpbmdBdmVyYWdlIDogInZhcmlhYmxlIiA9PT0gYSA/IFZhcmlhYmxlTW92aW5nQXZlcmFnZSA6ICJ2aWR5YSIgPT09IGEgPyBWSURZQSA6ICJ3ZWxsZXMgd2lsZGVyIiA9PT0gYSA/IFdlbGxlc1dpbGRlclNtb290aGluZyA6IFNpbXBsZU1vdmluZ0F2ZXJhZ2UKICAgIH0KICAgIGIucGVyaW9kIHx8IChiLnBlcmlvZCA9IHBhcnNlSW50KGIuaW5wdXRzLlBlcmlvZCkpOwogICAgdmFyIGUgPSBiLmNoYXJ0LnNjcnViYmVkLAogICAgICAgIGYgPSBuZXcgVEFTREsuUmVjb3Jkc2V0LAogICAgICAgIGcgPSBuZXcgVEFTREsuRmllbGQsCiAgICAgICAgayA9IG5ldyBUQVNESy5GaWVsZCwKICAgICAgICBtID0gbmV3IFRBU0RLLkZpZWxkLAogICAgICAgIGwgPSBuZXcgVEFTREsuRmllbGQsCiAgICAgICAgbiA9IG5ldyBUQVNESy5GaWVsZCwKICAgICAgICByID0gbmV3IFRBU0RLLkZpZWxkLAogICAgICAgIHAgPSBlLmxlbmd0aDsKICAgIGcuaW5pdGlhbGl6ZShwLCAiRGF0ZSIpOwogICAgay5pbml0aWFsaXplKHAsICJPcGVuIik7CiAgICBtLmluaXRpYWxpemUocCwgIkhpZ2giKTsKICAgIGwuaW5pdGlhbGl6ZShwLCAiTG93Iik7CiAgICBuLmluaXRpYWxpemUocCwgIkNsb3NlIik7CiAgICByLmluaXRpYWxpemUocCwgIlZvbHVtZSIpOwogICAgZm9yICh2YXIgcyA9IDA7IHMgPCBwOyBzKyspIHsKICAgICAgICB2YXIgdCA9IGVbc107CiAgICAgICAgZy5zZXREYXRlVmFsdWUocyArIDEsIHQuRGF0ZSk7CiAgICAgICAgay5zZXRWYWx1ZShzICsgMSwgdC5PcGVuKTsKICAgICAgICBtLnNldFZhbHVlKHMgKyAxLCB0LkhpZ2gpOwogICAgICAgIGwuc2V0VmFsdWUocyArIDEsIHQuTG93KTsKICAgICAgICBuLnNldFZhbHVlKHMgKyAxLCB0LkNsb3NlKTsKICAgICAgICByLnNldFZhbHVlKHMgKyAxLCB0LlZvbHVtZSkKICAgIH0KICAgIGYuYWRkRmllbGQoZyk7CiAgICBmLmFkZEZpZWxkKGspOwogICAgZi5hZGRGaWVsZChtKTsKICAgIGYuYWRkRmllbGQobCk7CiAgICBmLmFkZEZpZWxkKG4pOwogICAgZi5hZGRGaWVsZChyKTsKICAgIHZhciBxOwogICAgIm1hIiA9PSBiLnR5cGUgPyAidGltZSBzZXJpZXMiID09IGIuaW5wdXRzLlR5cGUgPyBxID0gVEFTREsuTW92aW5nQXZlcmFnZS5wcm90b3R5cGUudGltZVNlcmllc01vdmluZ0F2ZXJhZ2UoYyhiKSwgYi5wZXJpb2QsICJNQSIpIDogInRyaWFuZ3VsYXIiID09IGIuaW5wdXRzLlR5cGUgPyBxID0gVEFTREsuTW92aW5nQXZlcmFnZS5wcm90b3R5cGUudHJpYW5ndWxhck1vdmluZ0F2ZXJhZ2UoYyhiKSwgYi5wZXJpb2QsICJNQSIpIDogInZhcmlhYmxlIiA9PSBiLmlucHV0cy5UeXBlID8gcSA9IFRBU0RLLk1vdmluZ0F2ZXJhZ2UucHJvdG90eXBlLnZhcmlhYmxlTW92aW5nQXZlcmFnZShjKGIpLCBiLnBlcmlvZCwgIk1BIikgOiAid2VpZ2h0ZWQiID09IGIuaW5wdXRzLlR5cGUgPyBxID0gVEFTREsuTW92aW5nQXZlcmFnZS5wcm90b3R5cGUud2VpZ2h0ZWRNb3ZpbmdBdmVyYWdlKGMoYiksIGIucGVyaW9kLCAiTUEiKSA6ICJ3ZWxscyB3aWxkZXIiID09IGIuaW5wdXRzLlR5cGUgJiYKICAgICAgICAocSA9IFRBU0RLLk1vdmluZ0F2ZXJhZ2UucHJvdG90eXBlLndlbGxlc1dpbGRlclNtb290aGluZyhjKGIpLCBiLnBlcmlvZCwgIk1BIikpIDogIkFyb29uIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUuYXJvb24oZiwgYi5wZXJpb2QpIDogIlByaWNlIFJPQyIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkdlbmVyYWwucHJvdG90eXBlLnByaWNlUk9DKGMoYiksIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiSEhWIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuR2VuZXJhbC5wcm90b3R5cGUuSEhWKG0sIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiTExWIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuR2VuZXJhbC5wcm90b3R5cGUuTExWKGwsIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiTGluIFIyIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuTGluZWFyUmVncmVzc2lvbi5wcm90b3R5cGUucmVncmVzc2lvbihjKGIpLCBiLnBlcmlvZCkgOiAiTGluIEZjc3QiID09IGIudHlwZSA/IHEgPSBUQVNESy5MaW5lYXJSZWdyZXNzaW9uLnByb3RvdHlwZS5yZWdyZXNzaW9uKGMoYiksIGIucGVyaW9kKSA6CiAgICAgICAgIkxpbiBJbmNwdCIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkxpbmVhclJlZ3Jlc3Npb24ucHJvdG90eXBlLnJlZ3Jlc3Npb24oYyhiKSwgYi5wZXJpb2QpIDogIkxSIFNsb3BlIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuTGluZWFyUmVncmVzc2lvbi5wcm90b3R5cGUucmVncmVzc2lvbihjKGIpLCBiLnBlcmlvZCkgOiAiVGltZSBGY3N0IiA9PSBiLnR5cGUgPyBxID0gVEFTREsuTGluZWFyUmVncmVzc2lvbi5wcm90b3R5cGUudGltZVNlcmllc0ZvcmVjYXN0KGMoYiksIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiVklEWUEiID09IGIudHlwZSA/IHEgPSBUQVNESy5Nb3ZpbmdBdmVyYWdlLnByb3RvdHlwZS5WSURZQShjKGIpLCBiLnBlcmlvZCwgcGFyc2VGbG9hdChiLmlucHV0c1siUjIgU2NhbGUiXSksICJSZXN1bHQiKSA6ICJNZWQgUHJpY2UiID09IGIudHlwZSA/IHEgPSBUQVNESy5HZW5lcmFsLnByb3RvdHlwZS5tZWRpYW5QcmljZShmLCAiUmVzdWx0IikgOiAiSGlnaC1Mb3ciID09IGIudHlwZSA/IHEgPSBUQVNESy5HZW5lcmFsLnByb3RvdHlwZS5oaWdoTWludXNMb3coZiwgIlJlc3VsdCIpIDoKICAgICAgICAiVHlwaWNhbCBQcmljZSIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkdlbmVyYWwucHJvdG90eXBlLnR5cGljYWxQcmljZShmLCAiUmVzdWx0IikgOiAiV2VpZ2h0ZWQgQ2xvc2UiID09IGIudHlwZSA/IHEgPSBUQVNESy5HZW5lcmFsLnByb3RvdHlwZS53ZWlnaHRlZENsb3NlKGYsICJSZXN1bHQiKSA6ICJWb2wgUk9DIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuR2VuZXJhbC5wcm90b3R5cGUudm9sdW1lUk9DKHIsIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiU1REIERldiIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkdlbmVyYWwucHJvdG90eXBlLnN0YW5kYXJkRGV2aWF0aW9uKGMoYiksIGIucGVyaW9kLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJTdGFuZGFyZCBEZXZpYXRpb25zIl0pLCBkKGIuaW5wdXRzWyJNb3ZpbmcgQXZlcmFnZSBUeXBlIl0pLCAiUmVzdWx0IikgOiAiTSBGbG93IiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLm1vbmV5Rmxvd0luZGV4KGYsIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiVHJhZGUgVm9sIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLnRyYWRlVm9sdW1lSW5kZXgoYyhiKSwKICAgICAgICAgICAgciwgcGFyc2VGbG9hdChiLmlucHV0c1siTWluIFRpY2sgVmFsdWUiXSksICJSZXN1bHQiKSA6ICJTd2luZyIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkluZGV4LnByb3RvdHlwZS5zd2luZ0luZGV4KGYsIHBhcnNlRmxvYXQoYi5pbnB1dHNbIkxpbWl0IE1vdmUgVmFsdWUiXSksICJSZXN1bHQiKSA6ICJBY2MgU3dpbmciID09IGIudHlwZSA/IHEgPSBUQVNESy5JbmRleC5wcm90b3R5cGUuc3dpbmdJbmRleChmLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJMaW1pdCBNb3ZlIFZhbHVlIl0pLCAiUmVzdWx0IikgOiAiUHJpY2UgVm9sIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLnByaWNlVm9sdW1lVHJlbmQoYyhiKSwgciwgIlJlc3VsdCIpIDogIlBvcyBWb2wiID09IGIudHlwZSA/IHEgPSBUQVNESy5JbmRleC5wcm90b3R5cGUucG9zaXRpdmVWb2x1bWVJbmRleChjKGIpLCByLCAiUmVzdWx0IikgOiAiTmVnIFZvbCIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkluZGV4LnByb3RvdHlwZS5uZWdhdGl2ZVZvbHVtZUluZGV4KGMoYiksIHIsICJSZXN1bHQiKSA6ICJPbiBCYWwgVm9sIiA9PQogICAgICAgIGIudHlwZSA/IHEgPSBUQVNESy5JbmRleC5wcm90b3R5cGUub25CYWxhbmNlVm9sdW1lKGMoYiksIHIsICJSZXN1bHQiKSA6ICJQZXJmIElkeCIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkluZGV4LnByb3RvdHlwZS5wZXJmb3JtYW5jZShjKGIpLCAiUmVzdWx0IikgOiAiTWFzcyBJZHgiID09IGIudHlwZSA/IHEgPSBUQVNESy5JbmRleC5wcm90b3R5cGUubWFzc0luZGV4KGYsIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiQ2hhaWtpbiBNRiIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkluZGV4LnByb3RvdHlwZS5jaGFpa2luTW9uZXlGbG93KGYsIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiQ0NJIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLmNvbW1vZGl0eUNoYW5uZWxJbmRleChmLCBiLnBlcmlvZCwgIlJlc3VsdCIpIDogIlN0Y2ggTXRtIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLnN0b2NoYXN0aWNNb21lbnR1bUluZGV4KGYsIHBhcnNlRmxvYXQoYi5pbnB1dHNbIiVLIFBlcmlvZHMiXSksIHBhcnNlRmxvYXQoYi5pbnB1dHNbIiVLIFNtb290aGluZyBQZXJpb2RzIl0pLAogICAgICAgICAgICBwYXJzZUZsb2F0KGIuaW5wdXRzWyIlSyBEb3VibGUgU21vb3RoaW5nIFBlcmlvZHMiXSksIHBhcnNlRmxvYXQoYi5pbnB1dHNbIiVEIFBlcmlvZHMiXSksIGQoYi5pbnB1dHNbIk1vdmluZyBBdmVyYWdlIFR5cGUiXSksIGQoYi5pbnB1dHNbIiVEIE1vdmluZyBBdmVyYWdlIFR5cGUiXSkpIDogIkhpc3QgVm9sIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLmhpc3RvcmljYWxWb2xhdGlsaXR5KGMoYiksIGIucGVyaW9kLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJCYXIgSGlzdG9yeSJdKSwgcGFyc2VGbG9hdChiLmlucHV0c1siU3RhbmRhcmQgRGV2aWF0aW9ucyJdKSwgIlJlc3VsdCIpIDogIkNoYW5kZSBNdG0iID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5jaGFuZGVNb21lbnR1bU9zY2lsbGF0b3IoYyhiKSwgYi5wZXJpb2QsICJSZXN1bHQiKSA6ICJNb21lbnR1bSIgPT0gYi50eXBlID8gcSA9IFRBU0RLLk9zY2lsbGF0b3IucHJvdG90eXBlLm1vbWVudHVtKGMoYiksIGIucGVyaW9kLCAiUmVzdWx0IikgOgogICAgICAgICJUUklYIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUuVFJJWChjKGIpLCBiLnBlcmlvZCwgIlJlc3VsdCIpIDogIlZUIEhaIEZpbHRlciIgPT0gYi50eXBlID8gcSA9IFRBU0RLLk9zY2lsbGF0b3IucHJvdG90eXBlLnZlcnRpY2FsSG9yaXpvbnRhbEZpbHRlcihjKGIpLCBiLnBlcmlvZCwgIlJlc3VsdCIpIDogIlVsdGltYXRlIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUudWx0aW1hdGVPc2NpbGxhdG9yKGYsIHBhcnNlRmxvYXQoYi5pbnB1dHNbIkN5Y2xlIDEiXSksIHBhcnNlRmxvYXQoYi5pbnB1dHNbIkN5Y2xlIDIiXSksIHBhcnNlRmxvYXQoYi5pbnB1dHNbIkN5Y2xlIDMiXSksICJSZXN1bHQiKSA6ICJXaWxsaWFtcyAlUiIgPT0gYi50eXBlID8gcSA9IFRBU0RLLk9zY2lsbGF0b3IucHJvdG90eXBlLndpbGxpYW1zUGN0UihmLCBiLnBlcmlvZCwgIlJlc3VsdCIpIDogIlcgQWNjIERpc3QiID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS53aWxsaWFtc0FjY3VtdWxhdGlvbkRpc3RyaWJ1dGlvbihmLAogICAgICAgICAgICAiUmVzdWx0IikgOiAiVm9sIE9zYyIgPT0gYi50eXBlID8gcSA9IFRBU0RLLk9zY2lsbGF0b3IucHJvdG90eXBlLnZvbHVtZU9zY2lsbGF0b3IociwgcGFyc2VGbG9hdChiLmlucHV0c1siU2hvcnQgVGVybSBQZXJpb2RzIl0pLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJMb25nIFRlcm0gUGVyaW9kcyJdKSwgIlBvaW50cyIgPT0gYi5pbnB1dHNbIlBvaW50cyBPciBQZXJjZW50Il0gPyAxIDogMiwgIlJlc3VsdCIpIDogIkNoYWlraW4gVm9sIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUuY2hhaWtpblZvbGF0aWxpdHkoZiwgYi5wZXJpb2QsIHBhcnNlRmxvYXQoYi5pbnB1dHNbIlJhdGUgT2YgQ2hhbmdlIl0pLCBkKGIuaW5wdXRzWyJNb3ZpbmcgQXZlcmFnZSBUeXBlIl0pLCAiUmVzdWx0IikgOiAiUHJpY2UgT3NjIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUucHJpY2VPc2NpbGxhdG9yKGMoYiksIHBhcnNlRmxvYXQoYi5pbnB1dHNbIkxvbmcgQ3ljbGUiXSksIHBhcnNlRmxvYXQoYi5pbnB1dHNbIlNob3J0IEN5Y2xlIl0pLAogICAgICAgICAgICBkKGIuaW5wdXRzWyJNb3ZpbmcgQXZlcmFnZSBUeXBlIl0pLCAiUmVzdWx0IikgOiAiRU9NIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUuZWFzZU9mTW92ZW1lbnQoZiwgYi5wZXJpb2QsIGQoYi5pbnB1dHNbIk1vdmluZyBBdmVyYWdlIFR5cGUiXSksICJSZXN1bHQiKSA6ICJEZXRyZW5kZWQiID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5kZXRyZW5kZWRQcmljZU9zY2lsbGF0b3IoYyhiKSwgYi5wZXJpb2QsIGQoYi5pbnB1dHNbIk1vdmluZyBBdmVyYWdlIFR5cGUiXSksICJSZXN1bHQiKSA6ICJUcnVlIFJhbmdlIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUudHJ1ZVJhbmdlKGYsICJSZXN1bHQiKSA6ICJBVFIiID09IGIudHlwZSA/IChxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUudHJ1ZVJhbmdlKGYsICJUUiIpLCBxID0gVEFTREsuTW92aW5nQXZlcmFnZS5wcm90b3R5cGUuc2ltcGxlTW92aW5nQXZlcmFnZShxLmdldEZpZWxkKCJUUiIpLCBiLnBlcmlvZCwKICAgICAgICAgICAgIlJlc3VsdCIpKSA6ICJBcm9vbiBPc2MiID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5hcm9vbihmLCBiLnBlcmlvZCkgOiAiRnJhY3RhbCBDaGFvcyIgPT0gYi50eXBlID8gcSA9IFRBU0RLLk9zY2lsbGF0b3IucHJvdG90eXBlLmZyYWN0YWxDaGFvc09zY2lsbGF0b3IoZiwgYi5wZXJpb2QsICJSZXN1bHQiKSA6ICJQcmltZSBOdW1iZXIiID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5wcmltZU51bWJlck9zY2lsbGF0b3IobiwgIlJlc3VsdCIpIDogIkVsZGVyIEZvcmNlIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLmVsZGVyRm9yY2VJbmRleChmLCAiUmVzdWx0IikgOiAiRWhsZXIgRmlzaGVyIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUuZWhsZXJGaXNoZXJUcmFuc2Zvcm0oZiwgYi5wZXJpb2QsICJFRiIpIDogIlNjaGFmZiIgPT0gYi50eXBlID8gcSA9IFRBU0RLLk9zY2lsbGF0b3IucHJvdG90eXBlLnNjaGFmZlRyZW5kQ3ljbGUoYyhiKSwgYi5wZXJpb2QsCiAgICAgICAgICAgIHBhcnNlRmxvYXQoYi5pbnB1dHNbIlNob3J0IEN5Y2xlIl0pLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJMb25nIEN5Y2xlIl0pLCBkKGIuaW5wdXRzWyJNb3ZpbmcgQXZlcmFnZSBUeXBlIl0pLCAiUmVzdWx0IikgOiAiUVN0aWNrIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLnFTdGljayhmLCBiLnBlcmlvZCwgZChiLmlucHV0c1siTW92aW5nIEF2ZXJhZ2UgVHlwZSJdKSwgIlJlc3VsdCIpIDogIkNPRyIgPT0gYi50eXBlID8gcSA9IFRBU0RLLk9zY2lsbGF0b3IucHJvdG90eXBlLmNlbnRlck9mR3Jhdml0eShjKGIpLCBiLnBlcmlvZCwgIlJlc3VsdCIpIDogIkNvcHBvY2siID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5jb3Bwb2NrQ3VydmUoYyhiKSwgIlJlc3VsdCIpIDogIkNoYW5kZSBGY3N0IiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUuY2hhbmRlRm9yZWNhc3RPc2NpbGxhdG9yKGMoYiksIGIucGVyaW9kLCAiUmVzdWx0IikgOiAiR29wYWxhIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLmdvcGFsYWtyaXNobmFuUmFuZ2VJbmRleChmLAogICAgICAgICAgICBiLnBlcmlvZCwgIlJlc3VsdCIpIDogIkludHJhZGF5IE10bSIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkluZGV4LnByb3RvdHlwZS5pbnRyYWRheU1vbWVudHVtSW5kZXgoZiwgIlJlc3VsdCIpIDogIlByZXR0eSBHb29kIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUucHJldHR5R29vZE9zY2lsbGF0b3IoZiwgYi5wZXJpb2QsICJSZXN1bHQiKSA6ICJSQVZJIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuSW5kZXgucHJvdG90eXBlLlJBVkkoYyhiKSwgcGFyc2VGbG9hdChiLmlucHV0c1siU2hvcnQgQ3ljbGUiXSksIHBhcnNlRmxvYXQoYi5pbnB1dHNbIkxvbmcgQ3ljbGUiXSksICJSZXN1bHQiKSA6ICJSYW5kb20gV2FsayIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkluZGV4LnByb3RvdHlwZS5yYW5kb21XYWxrSW5kZXgoZiwgYi5wZXJpb2QsICJSYW5kb20gV2FsayIpIDogIlR3aWdncyIgPT0gYi50eXBlID8gcSA9IFRBU0RLLkluZGV4LnByb3RvdHlwZS50d2lnZ3NNb25leUZsb3coZiwgYi5wZXJpb2QsICJSZXN1bHQiKSA6ICJEaXJlY3Rpb25hbCIgPT0KICAgICAgICBiLnR5cGUgPyBxID0gVEFTREsuT3NjaWxsYXRvci5wcm90b3R5cGUuZGlyZWN0aW9uYWxNb3ZlbWVudFN5c3RlbShmLCBiLnBlcmlvZCkgOiAiSGlnaCBMb3ciID09IGIudHlwZSA/IHEgPSBUQVNESy5CYW5kcy5wcm90b3R5cGUuaGlnaExvd0JhbmRzKG0sIGwsIG4sIGIucGVyaW9kKSA6ICJNQSBFbnYiID09IGIudHlwZSA/IHEgPSBUQVNESy5CYW5kcy5wcm90b3R5cGUubW92aW5nQXZlcmFnZUVudmVsb3BlKGMoYiksIGIucGVyaW9kLCBkKGIuaW5wdXRzWyJNb3ZpbmcgQXZlcmFnZSBUeXBlIl0pLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJTaGlmdCBQZXJjZW50YWdlIl0pKSA6ICJGcmFjdGFsIENoYW9zIEJhbmRzIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuQmFuZHMucHJvdG90eXBlLmZyYWN0YWxDaGFvc0JhbmRzKGYsIGIucGVyaW9kKSA6ICJQcmltZSBOdW1iZXIgQmFuZHMiID09IGIudHlwZSA/IHEgPSBUQVNESy5CYW5kcy5wcm90b3R5cGUucHJpbWVOdW1iZXJCYW5kcyhtLCBsLCBiLnBlcmlvZCkgOiAiQm9sbGluZ2VyIEJhbmRzIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuQmFuZHMucHJvdG90eXBlLmJvbGxpbmdlckJhbmRzKGMoYiksCiAgICAgICAgICAgIGIucGVyaW9kLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJTdGFuZGFyZCBEZXZpYXRpb25zIl0pLCBkKGIuaW5wdXRzWyJNb3ZpbmcgQXZlcmFnZSBUeXBlIl0pKSA6ICJLZWx0bmVyIiA9PSBiLnR5cGUgPyBxID0gVEFTREsuQmFuZHMucHJvdG90eXBlLmtlbHRuZXIoZiwgYi5wZXJpb2QsIHBhcnNlRmxvYXQoYi5pbnB1dHMuU2hpZnQpLCBkKGIuaW5wdXRzWyJNb3ZpbmcgQXZlcmFnZSBUeXBlIl0pLCAiS2VsdG5lciIpIDogIlBTQVIiID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5wYXJhYm9saWNTQVIobSwgbCwgcGFyc2VGbG9hdChiLmlucHV0c1siTWluaW11bSBBRiJdKSwgcGFyc2VGbG9hdChiLmlucHV0c1siTWF4aW11bSBBRiJdKSwgIlJlc3VsdCIpIDogIktsaW5nZXIiID09IGIudHlwZSA/IHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5rbGluZ2VyVm9sdW1lT3NjaWxsYXRvcihmLCBwYXJzZUZsb2F0KGIuaW5wdXRzWyJTaWduYWwgUGVyaW9kcyJdKSwgcGFyc2VGbG9hdChiLmlucHV0c1siU2hvcnQgQ3ljbGUiXSksCiAgICAgICAgICAgIHBhcnNlRmxvYXQoYi5pbnB1dHNbIkxvbmcgQ3ljbGUiXSksIGQoYi5pbnB1dHNbIk1vdmluZyBBdmVyYWdlIFR5cGUiXSksICJLbGluZ2VyIikgOiAiRWxkZXIgUmF5IiA9PSBiLnR5cGUgJiYgKHEgPSBUQVNESy5Pc2NpbGxhdG9yLnByb3RvdHlwZS5lbGRlclJheShmLCBiLnBlcmlvZCwgZChiLmlucHV0c1siTW92aW5nIEF2ZXJhZ2UgVHlwZSJdKSwgIkVsZGVyIikpOwogICAgaWYgKG51bGwgIT0gcSkKICAgICAgICBmb3IgKGYgPSBxLl9tX0ZpZWxkTmF2LCBzID0gMDsgcyA8IGYubGVuZ3RoOyBzKyspCiAgICAgICAgICAgIGZvciAoZyA9IGZbc10ubmFtZSwgcCA9IGZbc10uX21fdmFsdWVzLCB0ID0gMTsgdCA8IHAubGVuZ3RoICYmICEodCA+IGUubGVuZ3RoKTsgdCsrKSBlW3QgLSAxXVtnICsgIiAiICsgYi5uYW1lXSA9IHBbdF0KfTsKU1RYLkRyYXdpbmcuYW5ub3RhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubmFtZSA9ICJhbm5vdGF0aW9uIjsKICAgIHRoaXMuYXJyID0gW107CiAgICB0aGlzLmggPSB0aGlzLncgPSAwOwogICAgdGhpcy5wYWRkaW5nID0gNDsKICAgIHRoaXMudGV4dCA9ICIiOwogICAgdGhpcy50YSA9IG51bGw7CiAgICB0aGlzLmZvbnRTaXplID0gMAp9OwpTVFguRHJhd2luZy5hbm5vdGF0aW9uLnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5CYXNlVHdvUG9pbnQpOwpTVFguRHJhd2luZy5hbm5vdGF0aW9uLnByb3RvdHlwZS5tZWFzdXJlID0gZnVuY3Rpb24gKCkge307ClNUWC5EcmF3aW5nLmFubm90YXRpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChhKSB7CiAgICB2YXIgYiA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV07CiAgICBpZiAoYikgewogICAgICAgIHZhciBjID0gdGhpcy5zdHgucGl4ZWxGcm9tVGljayh0aGlzLnAwWzBdLCBiLmNoYXJ0KSwKICAgICAgICAgICAgZCA9IHRoaXMuc3R4LnBpeGVsRnJvbVZhbHVlQWRqdXN0ZWQoYiwgdGhpcy5wMFswXSwgdGhpcy5wMFsxXSk7CiAgICAgICAgdGhpcy5zdHguY2FudmFzRm9udCgic3R4X2Fubm90YXRpb24iLCBhKTsKICAgICAgICBhLnRleHRCYXNlbGluZSA9ICJ0b3AiOwogICAgICAgIHZhciBlID0gdGhpcy53LAogICAgICAgICAgICBmID0gdGhpcy5oLAogICAgICAgICAgICBnID0gdGhpcy5jb2xvcjsKICAgICAgICBpZiAoImF1dG8iID09IGcgfHwgU1RYLmlzVHJhbnNwYXJlbnQoZykpIGcgPSB0aGlzLnN0eC5kZWZhdWx0Q29sb3I7CiAgICAgICAgdGhpcy5oaWdobGlnaHRlZCAmJiAoZyA9IHRoaXMuc3R4LmNhbnZhc1N0eWxlKCJzdHhfaGlnaGxpZ2h0X3ZlY3RvciIpKTsKICAgICAgICBpZiAodGhpcy5zdGVtKSB7CiAgICAgICAgICAgIHZhciBrID0gdGhpcy5zdHgucGl4ZWxGcm9tVGljayh0aGlzLnN0ZW0udCksCiAgICAgICAgICAgICAgICBiID0gdGhpcy5zdHgucGl4ZWxGcm9tVmFsdWVBZGp1c3RlZChiLAogICAgICAgICAgICAgICAgICAgIHRoaXMuc3RlbS50LCB0aGlzLnN0ZW0udiksCiAgICAgICAgICAgICAgICBtID0gYyArIGUgLyAyLAogICAgICAgICAgICAgICAgbCA9IGQgKyBmIC8gMjsKICAgICAgICAgICAgYS5iZWdpblBhdGgoKTsKICAgICAgICAgICAgYS5zdHJva2VTdHlsZSA9IHRoaXMuYm9yZGVyQ29sb3IgPyB0aGlzLmJvcmRlckNvbG9yIDogZzsKICAgICAgICAgICAgYS5tb3ZlVG8oaywgYik7CiAgICAgICAgICAgIGEubGluZVRvKG0sIGwpOwogICAgICAgICAgICBhLnN0cm9rZSgpCiAgICAgICAgfQogICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQgPyAodGhpcy5zdHguY2FudmFzQ29sb3IoInN0eF9hbm5vdGF0aW9uX2hpZ2hsaWdodF9iZyIsIGEpLCBhLmZpbGxSZWN0KGMsIGQsIGUsIGYpKSA6IHRoaXMuYmFja2dyb3VuZENvbG9yID8gKGEuZmlsbFN0eWxlID0gdGhpcy5iYWNrZ3JvdW5kQ29sb3IsIGEuZmlsbFJlY3QoYywgZCwgZSwgZikpIDogdGhpcy5zdGVtICYmIChhLmZpbGxTdHlsZSA9IHRoaXMuc3R4LmNvbnRhaW5lckNvbG9yLCBhLmZpbGxSZWN0KGMsIGQsIGUsIGYpKTsKICAgICAgICB0aGlzLmJvcmRlckNvbG9yICYmIChhLmJlZ2luUGF0aCgpLCBhLnN0cm9rZVN0eWxlID0gdGhpcy5ib3JkZXJDb2xvciwgYS5yZWN0KGMsIGQsIGUsIGYpLCBhLnN0cm9rZSgpKTsKICAgICAgICB0aGlzLnN0eC5jYW52YXNGb250KCJzdHhfYW5ub3RhdGlvbiIpOwogICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQgPyB0aGlzLnN0eC5jYW52YXNDb2xvcigic3R4X2Fubm90YXRpb25faGlnaGxpZ2h0IiwgYSkgOiBhLmZpbGxTdHlsZSA9IGc7CiAgICAgICAgZCArPSB0aGlzLnBhZGRpbmc7CiAgICAgICAgZm9yIChlID0gMDsgZSA8IHRoaXMuYXJyLmxlbmd0aDsgZSsrKSBhLmZpbGxUZXh0KHRoaXMuYXJyW2VdLCBjICsgdGhpcy5wYWRkaW5nLCBkKSwgZCArPSB0aGlzLmZvbnRTaXplOwogICAgICAgIGEudGV4dEJhc2VsaW5lID0gImFscGhhYmV0aWMiCiAgICB9Cn07ClNUWC5EcmF3aW5nLmFubm90YXRpb24ucHJvdG90eXBlLmVkaXQgPSBmdW5jdGlvbiAoYSkgewogICAgZnVuY3Rpb24gYihhKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgIGEubWFuYWdlVG91Y2hBbmRNb3VzZSAmJiBTVFhDaGFydC5kcmF3aW5nTGluZSAmJiBhLm1vdXNldXAoYikKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYyhhKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgYS5zdHgudW5kbygpCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGQoYSkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICIiICE9IGEudGEudmFsdWUgJiYgKGEudGV4dCA9IGEudGEudmFsdWUsIGEuYWRqdXN0KCksIGEuc3R4LmFkZERyYXdpbmcoYSksIGEuc3R4LmNoYW5nZU9jY3VycmVkKCJ2ZWN0b3IiKSwgYS5zdHgudW5kbygpKQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBlKGEpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgaWYgKGIpIHN3aXRjaCAod2luZG93LmV2ZW50ID8gZXZlbnQua2V5Q29kZSA6IGIua2V5Q29kZSkgewogICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgYS5zdHgudW5kbygpOwogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGMgPSBhLnN0eDsKICAgICAgICAgICAgYiA9IGEudGE7CiAgICAgICAgICAgIHZhciBkID0gYy5jb250cm9scy5hbm5vdGF0aW9uU2F2ZSwKICAgICAgICAgICAgICAgIGUgPSBjLmNvbnRyb2xzLmFubm90YXRpb25DYW5jZWwsCiAgICAgICAgICAgICAgICBmID0gYi52YWx1ZS5zcGxpdCgiXG4iKSwKICAgICAgICAgICAgICAgIHAgPSAwOwogICAgICAgICAgICBjLmNhbnZhc0ZvbnQoInN0eF9hbm5vdGF0aW9uIik7CiAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgZi5sZW5ndGg7IHMrKykgewogICAgICAgICAgICAgICAgdmFyIHQgPSBjLmNoYXJ0LmNvbnRleHQubWVhc3VyZVRleHQoZltzXSkud2lkdGg7CiAgICAgICAgICAgICAgICB0ID4gcCAmJiAocCA9IHQpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaCA9IChmLmxlbmd0aCArIDEpICogKGEuZm9udFNpemUgKyAzKTsKICAgICAgICAgICAgNTAgPiBwICYmIChwID0gNTApOwogICAgICAgICAgICBiLnN0eWxlLndpZHRoID0gcCArIDMwICsgInB4IjsKICAgICAgICAgICAgYi5zdHlsZS5oZWlnaHQgPSBoICsgInB4IjsKICAgICAgICAgICAgcCA9IGdldFBvcyhkLnBhcmVudE5vZGUpLnk7CiAgICAgICAgICAgIGYgPSBwYXJzZUludChzdHJpcFBYKGIuc3R5bGUudG9wKSkgLSBwOwogICAgICAgICAgICBjID0gYy5iYWNrT3V0WChzdHJpcFBYKGIuc3R5bGUubGVmdCkpOwogICAgICAgICAgICBwID0gYi5jbGllbnRXaWR0aDsKICAgICAgICAgICAgaCA9IGIuY2xpZW50SGVpZ2h0OwogICAgICAgICAgICBjICsgcCArIDEwMCA8IGEuc3R4LmNoYXJ0LmNhbnZhc1dpZHRoID8gKGQuc3R5bGUudG9wID0gZiArICJweCIsIGUuc3R5bGUudG9wID0gZiArICJweCIsIGQuc3R5bGUubGVmdCA9IGMgKyBwICsgMTAgKyAicHgiLCBlLnN0eWxlLmxlZnQgPSBjICsgcCArIDYwICsgInB4IikgOiAoZiArIGggKyAzMCA8IGEuc3R4LmNoYXJ0LmNhbnZhc0hlaWdodCA/CiAgICAgICAgICAgICAgICAoZC5zdHlsZS50b3AgPSBmICsgaCArIDEwICsgInB4IiwgZS5zdHlsZS50b3AgPSBmICsgaCArIDEwICsgInB4IikgOiAoZC5zdHlsZS50b3AgPSBmIC0gMzUgKyAicHgiLCBlLnN0eWxlLnRvcCA9IGYgLSAzNSArICJweCIpLCBkLnN0eWxlLmxlZnQgPSBjICsgInB4IiwgZS5zdHlsZS5sZWZ0ID0gYyArIDUwICsgInB4IikKICAgICAgICB9CiAgICB9CiAgICB2YXIgZiA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV07CiAgICBmICYmICh0aGlzLnN0eC51bmRpc3BsYXlDcm9zc2hhaXJzKCksIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gImF1dG8iLCB0aGlzLnN0eC5lZGl0aW5nQW5ub3RhdGlvbiA9ICEwLCB0aGlzLnN0eC5vcGVuRGlhbG9nID0gImFubm90YXRpb24iLCBudWxsID09IHRoaXMudGEgJiYgKHRoaXMudGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJURVhUQVJFQSIpLCB0aGlzLnRhLmNsYXNzTmFtZSA9ICJzdHhfYW5ub3RhdGlvbiIsIHRoaXMudGEub25rZXl1cCA9IGUodGhpcyksIHRoaXMudGEub25tb3VzZXVwID0gYih0aGlzLnN0eCksIHRoaXMudGEuc2V0QXR0cmlidXRlKCJ3cmFwIiwgImhhcmQiKSwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnRhKSwKICAgICAgICAgICAgdGhpcy50YS5zdHlsZS5wb3NpdGlvbiA9ICJhYnNvbHV0ZSIsIHRoaXMudGEuc3R5bGUud2lkdGggPSAiMTAwcHgiLCB0aGlzLnRhLnN0eWxlLmhlaWdodCA9ICIyMHB4IiksIGEgPSB0aGlzLnN0eC5waXhlbEZyb21UaWNrKHRoaXMucDBbMF0sIGYuY2hhcnQpLCBmID0gdGhpcy5zdHgucGl4ZWxGcm9tVmFsdWVBZGp1c3RlZChmLCB0aGlzLnAwWzBdLCB0aGlzLnAwWzFdKSwgdGhpcy50YS5zdHlsZS5sZWZ0ID0gdGhpcy5zdHgucmVzb2x2ZVgoYSkgKyAicHgiLCB0aGlzLnRhLnN0eWxlLnRvcCA9IHRoaXMuc3R4LnJlc29sdmVZKGYpICsgInB4IiwgdGhpcy5zdHguY29udHJvbHMuYW5ub3RhdGlvblNhdmUuc3R5bGUuZGlzcGxheSA9ICJibG9jayIsIHRoaXMuc3R4LmNvbnRyb2xzLmFubm90YXRpb25DYW5jZWwuc3R5bGUuZGlzcGxheSA9ICJibG9jayIsIHRoaXMuc3R4LmNvbnRyb2xzLmFubm90YXRpb25TYXZlLm9uY2xpY2sgPSBkKHRoaXMpLCB0aGlzLnN0eC5jb250cm9scy5hbm5vdGF0aW9uQ2FuY2VsLm9uY2xpY2sgPSBjKHRoaXMpLCBlKHRoaXMpKCksCiAgICAgICAgU1RYLmZvY3VzKHRoaXMudGEsICEwKSkKfTsKU1RYLkRyYXdpbmcuYW5ub3RhdGlvbi5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgdmFyIGQgPSB0aGlzLnN0eC5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdOwogICAgdGhpcy5jb3B5Q29uZmlnKCk7CiAgICB0aGlzLnAwID0gW2IsIGNdOwogICAgdGhpcy5kMCA9IHRoaXMuc3R4LmRhdGVGcm9tVGljayh0aGlzLnAwWzBdLCBkLmNoYXJ0KTsKICAgIHRoaXMudjAgPSBjOwogICAgdGhpcy5hZGp1c3QoKTsKICAgIHRoaXMuZWRpdChhKTsKICAgIHJldHVybiAhMQp9OwpTVFguRHJhd2luZy5hbm5vdGF0aW9uLnByb3RvdHlwZS5pbnRlcnNlY3RlZCA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICByZXR1cm4gdGhpcy5ib3hJbnRlcnNlY3Rpb24oYSwgYikKfTsKU1RYLkRyYXdpbmcuYW5ub3RhdGlvbi5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnN0eC5jb250cm9scy5hbm5vdGF0aW9uU2F2ZS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgdGhpcy5zdHguY29udHJvbHMuYW5ub3RhdGlvbkNhbmNlbC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgdGhpcy50YSAmJiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMudGEpOwogICAgdGhpcy50YSA9IG51bGw7CiAgICB0aGlzLnN0eC5vcGVuRGlhbG9nID0gIiI7CiAgICB0aGlzLnN0eC5zaG93Q3Jvc3NoYWlycygpOwogICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSAiY3Jvc3NoYWlyIjsKICAgIHRoaXMuc3R4LmVkaXRpbmdBbm5vdGF0aW9uID0gITE7CiAgICBTVFguY2xlYXJDYW52YXModGhpcy5zdHguY2hhcnQudGVtcENhbnZhcywgdGhpcyk7CiAgICBmaXhTY3JlZW4oKQp9OwpTVFguRHJhd2luZy5hbm5vdGF0aW9uLnByb3RvdHlwZS5yZWNvbnN0cnVjdCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICB0aGlzLnN0eCA9IGE7CiAgICB0aGlzLmNvbG9yID0gYi5jb2w7CiAgICB0aGlzLnBhbmVsTmFtZSA9IGIucG5sOwogICAgdGhpcy5kMCA9IGIuZDA7CiAgICB0aGlzLnYwID0gYi52MDsKICAgIHRoaXMudGV4dCA9IHVuZXNjYXBlKGIudGV4dCk7CiAgICB0aGlzLnN0ZW0gPSBiLnN0ZW07CiAgICB0aGlzLmJvcmRlckNvbG9yID0gYi5iYzsKICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gYi5iZzsKICAgIHRoaXMuYWRqdXN0KCkKfTsKU1RYLkRyYXdpbmcuYW5ub3RhdGlvbi5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGEgPSB7CiAgICAgICAgbmFtZTogdGhpcy5uYW1lLAogICAgICAgIHBubDogdGhpcy5wYW5lbE5hbWUsCiAgICAgICAgY29sOiB0aGlzLmNvbG9yLAogICAgICAgIGQwOiB0aGlzLmQwLAogICAgICAgIHYwOiB0aGlzLnYwLAogICAgICAgIHRleHQ6IGVzY2FwZSh0aGlzLnRleHQpCiAgICB9OwogICAgdGhpcy5zdGVtICYmIChhLnN0ZW0gPSB7CiAgICAgICAgZDogdGhpcy5zdGVtLmQsCiAgICAgICAgdjogdGhpcy5zdGVtLnYKICAgIH0pOwogICAgdGhpcy5ib3JkZXJDb2xvciAmJiAoYS5iYyA9IHRoaXMuYm9yZGVyQ29sb3IpOwogICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgJiYgKGEuYmcgPSB0aGlzLmJhY2tncm91bmRDb2xvcik7CiAgICByZXR1cm4gYQp9OwpTVFguRHJhd2luZy5hbm5vdGF0aW9uLnByb3RvdHlwZS5hZGp1c3QgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYSA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV07CiAgICBpZiAoYSkgewogICAgICAgIHRoaXMucDAgPSBbdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuZDAsIGEuY2hhcnQpLCB0aGlzLnYwXTsKICAgICAgICB0aGlzLmFyciA9IHRoaXMudGV4dC5zcGxpdCgiXG4iKTsKICAgICAgICB2YXIgYiA9IDA7CiAgICAgICAgdGhpcy5zdHguY2FudmFzRm9udCgic3R4X2Fubm90YXRpb24iKTsKICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMuYXJyLmxlbmd0aDsgYysrKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5zdHguY2hhcnQuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLmFycltjXSkud2lkdGg7CiAgICAgICAgICAgIGQgPiBiICYmIChiID0gZCkKICAgICAgICB9CiAgICAgICAgdGhpcy5mb250U2l6ZSA9IHRoaXMuc3R4LmdldENhbnZhc0ZvbnRTaXplKCJzdHhfYW5ub3RhdGlvbiIpOwogICAgICAgIGggPSB0aGlzLmFyci5sZW5ndGggKiB0aGlzLmZvbnRTaXplOwogICAgICAgIFNUWC50b3VjaERldmljZSAmJiAoaCArPSA1KTsKICAgICAgICB0aGlzLncgPSBiICsgMiAqIHRoaXMucGFkZGluZzsKICAgICAgICB0aGlzLmggPSBoICsgMiAqIHRoaXMucGFkZGluZzsKICAgICAgICBiID0gdGhpcy5zdHgucGl4ZWxGcm9tVGljayh0aGlzLnAwWzBdLAogICAgICAgICAgICBhLmNoYXJ0KSArIGI7CiAgICAgICAgYyA9IHRoaXMuc3R4LnBpeGVsRnJvbVByaWNlKHRoaXMucDBbMV0sIGEpICsgaDsKICAgICAgICB0aGlzLnAxID0gW3RoaXMuc3R4LnRpY2tGcm9tUGl4ZWwoYiwgYS5jaGFydCksIHRoaXMuc3R4LnZhbHVlRnJvbVBpeGVsKGMsIGEpXTsKICAgICAgICB0aGlzLnN0ZW0gJiYgKHRoaXMuc3RlbS50ID0gdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuc3RlbS5kLCBhLmNoYXJ0KSkKICAgIH0KfTsKU1RYLkRyYXdpbmcubGluZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubmFtZSA9ICJsaW5lIgp9OwpTVFguRHJhd2luZy5saW5lLnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5zZWdtZW50KTsKU1RYLkRyYXdpbmcubGluZS5wcm90b3R5cGUuY2FsY3VsYXRlT3V0ZXJTZXQgPSBmdW5jdGlvbiAoYSkgewogICAgaWYgKHRoaXMucDBbMF0gIT0gdGhpcy5wMVswXSAmJiB0aGlzLnAwWzFdICE9IHRoaXMucDFbMV0gJiYgIXRoaXMuc3R4LmlzRGFpbHlJbnRlcnZhbCh0aGlzLnN0eC5sYXlvdXQuaW50ZXJ2YWwpKSB7CiAgICAgICAgdmFyIGIgPSB7CiAgICAgICAgICAgIHgwOiB0aGlzLnAwWzBdLAogICAgICAgICAgICB5MDogdGhpcy5wMFsxXSwKICAgICAgICAgICAgeDE6IHRoaXMucDFbMF0sCiAgICAgICAgICAgIHkxOiB0aGlzLnAxWzFdCiAgICAgICAgfTsKICAgICAgICBiLngwID4gYi54MSAmJiAoYiA9IHsKICAgICAgICAgICAgeDA6IHRoaXMucDFbMF0sCiAgICAgICAgICAgIHkwOiB0aGlzLnAxWzFdLAogICAgICAgICAgICB4MTogdGhpcy5wMFswXSwKICAgICAgICAgICAgeTE6IHRoaXMucDBbMV0KICAgICAgICB9KTsKICAgICAgICB2YXIgYyA9IGIueDAgLSAxRTMsCiAgICAgICAgICAgIGQgPSBiLngxICsgMUUzOwogICAgICAgIHRoaXMudjBCID0geUludGVyc2VjdGlvbihiLCBjKTsKICAgICAgICB0aGlzLnYxQiA9IHlJbnRlcnNlY3Rpb24oYiwgZCk7CiAgICAgICAgdGhpcy5kMEIgPSB0aGlzLnN0eC5kYXRlRnJvbVRpY2soYywgYS5jaGFydCk7CiAgICAgICAgdGhpcy5kMUIgPSB0aGlzLnN0eC5kYXRlRnJvbVRpY2soZCwgYS5jaGFydCkKICAgIH0KfTsKU1RYLkRyYXdpbmcubGluZS5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgaWYgKGEgPSB0aGlzLnN0eC5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdKSB7CiAgICAgICAgdGhpcy5jb3B5Q29uZmlnKCk7CiAgICAgICAgaWYgKCF0aGlzLnAwKSByZXR1cm4gdGhpcy5wMCA9IFtiLCBjXSwgITE7CiAgICAgICAgdGhpcy5wMSA9IFtiLCBjXTsKICAgICAgICB0aGlzLmQwID0gdGhpcy5zdHguZGF0ZUZyb21UaWNrKHRoaXMucDBbMF0sIGEuY2hhcnQpOwogICAgICAgIHRoaXMuZDEgPSB0aGlzLnN0eC5kYXRlRnJvbVRpY2sodGhpcy5wMVswXSwgYS5jaGFydCk7CiAgICAgICAgdGhpcy52MCA9IHRoaXMucDBbMV07CiAgICAgICAgdGhpcy52MSA9IHRoaXMucDFbMV07CiAgICAgICAgdGhpcy5jYWxjdWxhdGVPdXRlclNldChhKTsKICAgICAgICByZXR1cm4gITAKICAgIH0KfTsKU1RYLkRyYXdpbmcubGluZS5wcm90b3R5cGUucmVjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdGhpcy5zdHggPSBhOwogICAgdGhpcy5jb2xvciA9IGIuY29sOwogICAgdGhpcy5wYW5lbE5hbWUgPSBiLnBubDsKICAgIHRoaXMucGF0dGVybiA9IGIucHRybjsKICAgIHRoaXMubGluZVdpZHRoID0gYi5sdzsKICAgIHRoaXMudjAgPSBiLnYwOwogICAgdGhpcy52MSA9IGIudjE7CiAgICB0aGlzLmQwID0gYi5kMDsKICAgIHRoaXMuZDEgPSBiLmQxOwogICAgYi5kMEIgJiYgKHRoaXMuZDBCID0gYi5kMEIsIHRoaXMuZDFCID0gYi5kMUIsIHRoaXMudjBCID0gYi52MEIsIHRoaXMudjFCID0gYi52MUIpOwogICAgdGhpcy5hZGp1c3QoKQp9OwpTVFguRHJhd2luZy5saW5lLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYSA9IHsKICAgICAgICBuYW1lOiB0aGlzLm5hbWUsCiAgICAgICAgcG5sOiB0aGlzLnBhbmVsTmFtZSwKICAgICAgICBjb2w6IHRoaXMuY29sb3IsCiAgICAgICAgcHRybjogdGhpcy5wYXR0ZXJuLAogICAgICAgIGx3OiB0aGlzLmxpbmVXaWR0aCwKICAgICAgICBkMDogdGhpcy5kMCwKICAgICAgICBkMTogdGhpcy5kMSwKICAgICAgICB2MDogdGhpcy52MCwKICAgICAgICB2MTogdGhpcy52MQogICAgfTsKICAgIHRoaXMuZDBCICYmIChhLmQwQiA9IHRoaXMuZDBCLCBhLmQxQiA9IHRoaXMuZDFCLCBhLnYwQiA9IHRoaXMudjBCLCBhLnYxQiA9IHRoaXMudjFCKTsKICAgIHJldHVybiBhCn07ClNUWC5EcmF3aW5nLmxpbmUucHJvdG90eXBlLmFkanVzdCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBhID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXTsKICAgIGEgJiYgKHRoaXMucDAgPSBbdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuZDAsIGEuY2hhcnQpLCB0aGlzLnYwXSwgdGhpcy5wMSA9IFt0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5kMSwgYS5jaGFydCksIHRoaXMudjFdLCB0aGlzLnN0eC5pc0RhaWx5SW50ZXJ2YWwodGhpcy5zdHgubGF5b3V0LmludGVydmFsKSAmJiB0aGlzLmQwQiAmJiAodGhpcy5wMCA9IFt0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5kMEIsIGEuY2hhcnQpLCB0aGlzLnYwQl0sIHRoaXMucDEgPSBbdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuZDFCLCBhLmNoYXJ0KSwgdGhpcy52MUJdKSkKfTsKU1RYLkRyYXdpbmcucmF5ID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5uYW1lID0gInJheSIKfTsKU1RYLkRyYXdpbmcucmF5LnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5saW5lKTsKU1RYLkRyYXdpbmcucmF5LnByb3RvdHlwZS5jYWxjdWxhdGVPdXRlclNldCA9IGZ1bmN0aW9uIChhKSB7CiAgICBpZiAodGhpcy5wMFswXSAhPSB0aGlzLnAxWzBdICYmIHRoaXMucDBbMV0gIT0gdGhpcy5wMVsxXSAmJiAhdGhpcy5zdHguaXNEYWlseUludGVydmFsKHRoaXMuc3R4LmxheW91dC5pbnRlcnZhbCkpIHsKICAgICAgICB2YXIgYiA9IHsKICAgICAgICAgICAgeDA6IHRoaXMucDBbMF0sCiAgICAgICAgICAgIHkwOiB0aGlzLnAwWzFdLAogICAgICAgICAgICB4MTogdGhpcy5wMVswXSwKICAgICAgICAgICAgeTE6IHRoaXMucDFbMV0KICAgICAgICB9LCBjID0gYi54MSArIDFFMzsKICAgICAgICBiLngwID4gYi54MSAmJiAoYyA9IGIueDEgLSAxRTMpOwogICAgICAgIHRoaXMudjBCID0gdGhpcy52MDsKICAgICAgICB0aGlzLnYxQiA9IHlJbnRlcnNlY3Rpb24oYiwgYyk7CiAgICAgICAgdGhpcy5kMEIgPSB0aGlzLmQwOwogICAgICAgIHRoaXMuZDFCID0gdGhpcy5zdHguZGF0ZUZyb21UaWNrKGMsIGEuY2hhcnQpCiAgICB9Cn07ClNUWC5EcmF3aW5nLnJheS5wcm90b3R5cGUuYWRqdXN0ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGEgPSB0aGlzLnN0eC5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdOwogICAgYSAmJiAodGhpcy5wMCA9IFt0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5kMCwgYS5jaGFydCksIHRoaXMudjBdLCB0aGlzLnAxID0gW3RoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmQxLCBhLmNoYXJ0KSwgdGhpcy52MV0sIHRoaXMuc3R4LmlzRGFpbHlJbnRlcnZhbCh0aGlzLnN0eC5sYXlvdXQuaW50ZXJ2YWwpICYmIHRoaXMuZDBCICYmICh0aGlzLnAwID0gW3RoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmQwLCBhLmNoYXJ0KSwgdGhpcy52MF0sIHRoaXMucDEgPSBbdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuZDFCLCBhLmNoYXJ0KSwgdGhpcy52MUJdKSkKfTsKU1RYLkRyYXdpbmcuaG9yaXpvbnRhbCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubmFtZSA9ICJob3Jpem9udGFsIgp9OwpTVFguRHJhd2luZy5ob3Jpem9udGFsLnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5zZWdtZW50KTsKU1RYLkRyYXdpbmcuaG9yaXpvbnRhbC5wcm90b3R5cGUubWVhc3VyZSA9IGZ1bmN0aW9uICgpIHt9OwpTVFguRHJhd2luZy5ob3Jpem9udGFsLnByb3RvdHlwZS5jbGljayA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICBpZiAoYSA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV0pIHJldHVybiB0aGlzLmNvcHlDb25maWcoKSwgdGhpcy52MCA9IGMsIHRoaXMuZDAgPSB0aGlzLnN0eC5kYXRlRnJvbVRpY2soYiwgYS5jaGFydCksIHRoaXMuYWRqdXN0KCksICEwCn07ClNUWC5EcmF3aW5nLmhvcml6b250YWwucHJvdG90eXBlLnJlY29uc3RydWN0ID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHRoaXMuc3R4ID0gYTsKICAgIHRoaXMuY29sb3IgPSBiLmNvbDsKICAgIHRoaXMucGFuZWxOYW1lID0gYi5wbmw7CiAgICB0aGlzLnBhdHRlcm4gPSBiLnB0cm47CiAgICB0aGlzLmxpbmVXaWR0aCA9IGIubHc7CiAgICB0aGlzLnYwID0gYi52MDsKICAgIHRoaXMuZDAgPSBiLmQwOwogICAgdGhpcy5hZGp1c3QoKQp9OwpTVFguRHJhd2luZy5ob3Jpem9udGFsLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICAgIG5hbWU6IHRoaXMubmFtZSwKICAgICAgICBwbmw6IHRoaXMucGFuZWxOYW1lLAogICAgICAgIGNvbDogdGhpcy5jb2xvciwKICAgICAgICBwdHJuOiB0aGlzLnBhdHRlcm4sCiAgICAgICAgbHc6IHRoaXMubGluZVdpZHRoLAogICAgICAgIHYwOiB0aGlzLnYwLAogICAgICAgIGQwOiB0aGlzLmQwCiAgICB9Cn07ClNUWC5EcmF3aW5nLmhvcml6b250YWwucHJvdG90eXBlLmFkanVzdCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBhID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXTsKICAgIGEgJiYgKHRoaXMucDAgPSBbdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuZDAsIGEuY2hhcnQpLCB0aGlzLnYwXSwgdGhpcy5wMSA9IFt0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5kMCwgYS5jaGFydCkgKyAxMDAsIHRoaXMudjBdKQp9OwpTVFguRHJhd2luZy52ZXJ0aWNhbCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubmFtZSA9ICJ2ZXJ0aWNhbCIKfTsKU1RYLkRyYXdpbmcudmVydGljYWwuc3R4SW5oZXJpdHNGcm9tKFNUWC5EcmF3aW5nLmhvcml6b250YWwpOwpTVFguRHJhd2luZy52ZXJ0aWNhbC5wcm90b3R5cGUubWVhc3VyZSA9IGZ1bmN0aW9uICgpIHt9OwpTVFguRHJhd2luZy52ZXJ0aWNhbC5wcm90b3R5cGUuYWRqdXN0ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGEgPSB0aGlzLnN0eC5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdOwogICAgYSAmJiAodGhpcy5wMCA9IFt0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5kMCwgYS5jaGFydCksIHRoaXMudjBdLCB0aGlzLnAxID0gW3RoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmQwLCBhLmNoYXJ0KSwgdGhpcy52MCArIDFdKQp9OwpTVFguRHJhd2luZy5jb250aW51b3VzID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5uYW1lID0gImNvbnRpbnVvdXMiCn07ClNUWC5EcmF3aW5nLmNvbnRpbnVvdXMuc3R4SW5oZXJpdHNGcm9tKFNUWC5EcmF3aW5nLnNlZ21lbnQpOwpTVFguRHJhd2luZy5jb250aW51b3VzLnByb3RvdHlwZS5jbGljayA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICBpZiAoYSA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV0pIHsKICAgICAgICB0aGlzLmNvcHlDb25maWcoKTsKICAgICAgICBpZiAoIXRoaXMucDApIHJldHVybiB0aGlzLnAwID0gW2IsIGNdLCAhMTsKICAgICAgICB0aGlzLnAxID0gW2IsIGNdOwogICAgICAgIHRoaXMuZDAgPSB0aGlzLnN0eC5kYXRlRnJvbVRpY2sodGhpcy5wMFswXSwgYS5jaGFydCk7CiAgICAgICAgdGhpcy5kMSA9IHRoaXMuc3R4LmRhdGVGcm9tVGljayh0aGlzLnAxWzBdLCBhLmNoYXJ0KTsKICAgICAgICB0aGlzLnYwID0gdGhpcy5wMFsxXTsKICAgICAgICB0aGlzLnYxID0gdGhpcy5wMVsxXTsKICAgICAgICBiID0gbmV3IFNUWC5EcmF3aW5nLnNlZ21lbnQ7CiAgICAgICAgYyA9IHRoaXMuc2VyaWFsaXplKHRoaXMuc3R4KTsKICAgICAgICBiLnJlY29uc3RydWN0KHRoaXMuc3R4LCBjKTsKICAgICAgICB0aGlzLnN0eC5hZGREcmF3aW5nKGIpOwogICAgICAgIHRoaXMuc3R4LmNoYW5nZU9jY3VycmVkKCJ2ZWN0b3IiKTsKICAgICAgICB0aGlzLnN0eC5kcmF3KCk7CiAgICAgICAgdGhpcy5wMCA9IFt0aGlzLnAxWzBdLCB0aGlzLnAxWzFdXTsKICAgICAgICByZXR1cm4gITEKICAgIH0KfTsKU1RYLkRyYXdpbmcucHJvamVjdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubmFtZSA9ICJwcm9qZWN0aW9uIjsKICAgIHRoaXMuYXJyID0gW107CiAgICB0aGlzLmludGVyc2VjdCA9IDA7CiAgICB0aGlzLmNoYXJ0c09ubHkgPSAhMAp9OwpTVFguRHJhd2luZy5wcm9qZWN0aW9uLnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5zZWdtZW50KTsKU1RYLkRyYXdpbmcucHJvamVjdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGEpIHsKICAgIHZhciBiID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXTsKICAgIGlmIChiICYmICEoMiA+IHRoaXMuYXJyLmxlbmd0aCkpCiAgICAgICAgZm9yICh2YXIgYyA9IHRoaXMuY29sb3IsIGQgPSB0aGlzLnN0eC5nZXRDYW52YXNDb2xvcigic3R4X2hpZ2hsaWdodF92ZWN0b3IiKSwgZSA9IHsKICAgICAgICAgICAgICAgIHBhdHRlcm46IHRoaXMucGF0dGVybiwKICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogdGhpcy5saW5lV2lkdGgKICAgICAgICAgICAgfSwgZiA9IHRoaXMuc3R4LnBpeGVsRnJvbURhdGUodGhpcy5hcnJbMF1bMF0sIGIuY2hhcnQpLCBnID0gdGhpcy5zdHgucGl4ZWxGcm9tUHJpY2VUcmFuc2Zvcm0odGhpcy5hcnJbMF1bMV0sIGIpLCBrID0gMTsgayA8IHRoaXMuYXJyLmxlbmd0aDsgaysrKSB7CiAgICAgICAgICAgIHZhciBtID0gdGhpcy5zdHgucGl4ZWxGcm9tRGF0ZSh0aGlzLmFycltrXVswXSwgYi5jaGFydCksCiAgICAgICAgICAgICAgICBsID0gdGhpcy5zdHgucGl4ZWxGcm9tUHJpY2VUcmFuc2Zvcm0odGhpcy5hcnJba11bMV0sIGIpLAogICAgICAgICAgICAgICAgbiA9IGM7CiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQgJiYgayA+PSB0aGlzLmludGVyc2VjdCAmJgogICAgICAgICAgICAgICAgKG4gPSBkKTsKICAgICAgICAgICAgdGhpcy5zdHgucGxvdExpbmUoZiwgbSwgZywgbCwgbiwgInNlZ21lbnQiLCBhLCAhMCwgZSk7CiAgICAgICAgICAgIGYgPSBtOwogICAgICAgICAgICBnID0gbAogICAgICAgIH0KfTsKU1RYLkRyYXdpbmcucHJvamVjdGlvbi5wcm90b3R5cGUuY2xpY2sgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgaWYgKGEgPSB0aGlzLnN0eC5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdKSB7CiAgICAgICAgdGhpcy5jb3B5Q29uZmlnKCk7CiAgICAgICAgaWYgKDAgPT0gdGhpcy5hcnIubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5zdHguY2hhcnQuZGF0YVNldFt0aGlzLnN0eC5jaGFydC5kYXRhU2V0Lmxlbmd0aCAtIDFdOwogICAgICAgICAgICB0aGlzLmFyci5wdXNoKFtkLkRhdGUsIGQuQ2xvc2VdKTsKICAgICAgICAgICAgdGhpcy5mcmVlemUgPSB0aGlzLnN0eC5jaGFydC5zY3JvbGw7CiAgICAgICAgICAgIHRoaXMuZnJlZXplVGljayA9IHRoaXMuc3R4LmNoYXJ0LmRhdGFTZXQubGVuZ3RoCiAgICAgICAgfSBlbHNlIGlmIChiIDw9IHRoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmFyclt0aGlzLmFyci5sZW5ndGggLSAyXVswXSwgYS5jaGFydCkpIHJldHVybiAhMTsKICAgICAgICB0aGlzLmFyci5wdXNoKFt0aGlzLnN0eC5kYXRlRnJvbVRpY2soYiwgYS5jaGFydCksIGNdKTsKICAgICAgICByZXR1cm4gITEKICAgIH0KfTsKU1RYLkRyYXdpbmcucHJvamVjdGlvbi5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICB2YXIgZCA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV07CiAgICBkICYmICh0aGlzLmNvcHlDb25maWcoKSwgdGhpcy5hcnJbdGhpcy5hcnIubGVuZ3RoIC0gMV0gPSBbdGhpcy5zdHguZGF0ZUZyb21UaWNrKGIsIGQuY2hhcnQpLCBjXSwgdGhpcy5zdHguY3JlYXRlRGF0YVNldCgpLCB0aGlzLnN0eC5jaGFydC5zY3JvbGwgPSB0aGlzLmZyZWV6ZSArICh0aGlzLnN0eC5jaGFydC5kYXRhU2V0Lmxlbmd0aCAtIHRoaXMuZnJlZXplVGljayksIHRoaXMuc3R4LmRyYXcoKSwgdGhpcy5yZW5kZXIoYSkpCn07ClNUWC5EcmF3aW5nLnByb2plY3Rpb24ucHJvdG90eXBlLmludGVyc2VjdGVkID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIGlmIChhID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXSkgewogICAgICAgIGZvciAoYiA9IDE7IGIgPCB0aGlzLmFyci5sZW5ndGg7IGIrKykgewogICAgICAgICAgICB2YXIgZCA9IHRoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmFycltiIC0gMV1bMF0sIGEuY2hhcnQpLAogICAgICAgICAgICAgICAgZSA9IHRoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmFycltiXVswXSwgYS5jaGFydCk7CiAgICAgICAgICAgIGlmIChib3hJbnRlcnNlY3RzKGMueDAsIGMueTAsIGMueDEsIGMueTEsIGQsIHRoaXMuYXJyW2IgLSAxXVsxXSwgZSwgdGhpcy5hcnJbYl1bMV0sICJzZWdtZW50IikpIHJldHVybiB0aGlzLmludGVyc2VjdCA9IGIsICEwCiAgICAgICAgfQogICAgICAgIHJldHVybiAhMQogICAgfQp9OwpTVFguRHJhd2luZy5wcm9qZWN0aW9uLnByb3RvdHlwZS5tZWFzdXJlID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGEgPSB0aGlzLnN0eC5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdOwogICAgaWYgKGEpIHsKICAgICAgICBpZiAodGhpcy5pbnRlcnNlY3QpIHZhciBiID0gdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuYXJyW3RoaXMuaW50ZXJzZWN0IC0gMV1bMF0sIGEuY2hhcnQpLAogICAgICAgIGEgPSB0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5hcnJbdGhpcy5pbnRlcnNlY3RdWzBdLCBhLmNoYXJ0KSwgYyA9IHRoaXMuYXJyW3RoaXMuaW50ZXJzZWN0IC0gMV1bMV0sIGQgPSB0aGlzLmFyclt0aGlzLmludGVyc2VjdF1bMV07CiAgICAgICAgZWxzZSBiID0gdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuYXJyW3RoaXMuYXJyLmxlbmd0aCAtIDJdWzBdLCBhLmNoYXJ0KSwgYSA9IHRoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmFyclt0aGlzLmFyci5sZW5ndGggLSAxXVswXSwgYS5jaGFydCksIGMgPSB0aGlzLmFyclt0aGlzLmFyci5sZW5ndGggLSAyXVsxXSwgZCA9IHRoaXMuYXJyW3RoaXMuYXJyLmxlbmd0aCAtIDFdWzFdOwogICAgICAgIHRoaXMuc3R4LnNldE1lYXN1cmUoYywgZCwgYiwgYSkKICAgIH0KfTsKU1RYLkRyYXdpbmcucHJvamVjdGlvbi5wcm90b3R5cGUuYWRqdXN0ID0gZnVuY3Rpb24gKCkge307ClNUWC5EcmF3aW5nLnByb2plY3Rpb24ucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKGEpIHsKICAgIGZ1bmN0aW9uIGIoYSwgYikgewogICAgICAgIGEuY3JlYXRlRGF0YVNldCgpOwogICAgICAgIGEuZHJhdygpOwogICAgICAgIHJldHVybiBiCiAgICB9CiAgICBpZiAoYSkgcmV0dXJuIHRoaXMuYXJyID0gW10sIGIodGhpcy5zdHgsICExKTsKICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkKSB7CiAgICAgICAgaWYgKDEgPj0gdGhpcy5pbnRlcnNlY3QpIHJldHVybiB0aGlzLmFyciA9IFtdLCBiKHRoaXMuc3R4LCAhMSk7CiAgICAgICAgdGhpcy5hcnIgPSB0aGlzLmFyci5zbGljZSgwLCB0aGlzLmludGVyc2VjdCk7CiAgICAgICAgcmV0dXJuIGIodGhpcy5zdHgsICEwKQogICAgfQogICAgdGhpcy5hcnIucG9wKCk7CiAgICBpZiAoMSA+PSB0aGlzLmFyci5sZW5ndGgpIHJldHVybiB0aGlzLnN0eC5jaGFydC5zY3JvbGwgPSB0aGlzLmZyZWV6ZSwgYih0aGlzLnN0eCwgITEpOwogICAgdGhpcy5zdHguYWRkRHJhd2luZyh0aGlzKTsKICAgIHRoaXMuc3R4LmNoYW5nZU9jY3VycmVkKCJ2ZWN0b3IiKTsKICAgIHJldHVybiBiKHRoaXMuc3R4LCAhMSkKfTsKU1RYLkRyYXdpbmcucHJvamVjdGlvbi5wcm90b3R5cGUucmVjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdGhpcy5zdHggPSBhOwogICAgdGhpcy5jb2xvciA9IGIuY29sOwogICAgdGhpcy5wYW5lbE5hbWUgPSBiLnBubDsKICAgIHRoaXMucGF0dGVybiA9IGIucHRybjsKICAgIHRoaXMubGluZVdpZHRoID0gYi5sdzsKICAgIHRoaXMuYXJyID0gYi5hcnIKfTsKU1RYLkRyYXdpbmcucHJvamVjdGlvbi5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiB0aGlzLm5hbWUsCiAgICAgICAgcG5sOiB0aGlzLnBhbmVsTmFtZSwKICAgICAgICBjb2w6IHRoaXMuY29sb3IsCiAgICAgICAgcHRybjogdGhpcy5wYXR0ZXJuLAogICAgICAgIGx3OiB0aGlzLmxpbmVXaWR0aCwKICAgICAgICBhcnI6IHRoaXMuYXJyCiAgICB9Cn07ClNUWC5EcmF3aW5nLm1lYXN1cmUgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLm5hbWUgPSAibWVhc3VyZSIKfTsKU1RYLkRyYXdpbmcubWVhc3VyZS5zdHhJbmhlcml0c0Zyb20oU1RYLkRyYXdpbmcuc2VnbWVudCk7ClNUWC5EcmF3aW5nLm1lYXN1cmUucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIHRoaXMuY29weUNvbmZpZygpOwogICAgaWYgKCF0aGlzLnAwKSByZXR1cm4gdGhpcy5wMCA9IFtiLCBjXSwgITE7CiAgICB0aGlzLnN0eC51bmRvKCk7CiAgICByZXR1cm4gITAKfTsKU1RYLkRyYXdpbmcuZWxsaXBzZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubmFtZSA9ICJlbGxpcHNlIgp9OwpTVFguRHJhd2luZy5lbGxpcHNlLnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5CYXNlVHdvUG9pbnQpOwpTVFguRHJhd2luZy5lbGxpcHNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoYSkgewogICAgdmFyIGIgPSB0aGlzLnN0eC5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdOwogICAgaWYgKGIpIHsKICAgICAgICB2YXIgYyA9IHRoaXMuc3R4LnBpeGVsRnJvbVRpY2sodGhpcy5wMFswXSwgYi5jaGFydCksCiAgICAgICAgICAgIGQgPSB0aGlzLnN0eC5waXhlbEZyb21UaWNrKHRoaXMucDFbMF0sIGIuY2hhcnQpLAogICAgICAgICAgICBlID0gdGhpcy5zdHgucGl4ZWxGcm9tVmFsdWVBZGp1c3RlZChiLCB0aGlzLnAwWzBdLCB0aGlzLnAwWzFdKSwKICAgICAgICAgICAgYiA9IHRoaXMuc3R4LnBpeGVsRnJvbVZhbHVlQWRqdXN0ZWQoYiwgdGhpcy5wMVswXSwgdGhpcy5wMVsxXSksCiAgICAgICAgICAgIGYgPSBjIC0gKGQgLSBjKSwKICAgICAgICAgICAgZyA9IGUgLSAoYiAtIGUpLAogICAgICAgICAgICBrID0gKGIgLSBnKSAvIDY7CiAgICAgICAgKGMgPSB0aGlzLmxpbmVXaWR0aCkgfHwgKGMgPSAxLjEpOwogICAgICAgIHZhciBtID0gdGhpcy5jb2xvcjsKICAgICAgICBpZiAoImF1dG8iID09IG0gfHwgU1RYLmlzVHJhbnNwYXJlbnQobSkpIG0gPSB0aGlzLnN0eC5kZWZhdWx0Q29sb3I7CiAgICAgICAgdGhpcy5oaWdobGlnaHRlZCAmJiAobSA9IHRoaXMuc3R4LmdldENhbnZhc0NvbG9yKCJzdHhfaGlnaGxpZ2h0X3ZlY3RvciIpLAogICAgICAgICAgICAwLjEgPT0gYyAmJiAoYyA9IDEuMSkpOwogICAgICAgIHZhciBsID0gdGhpcy5maWxsQ29sb3I7CiAgICAgICAgYS5iZWdpblBhdGgoKTsKICAgICAgICBhLm1vdmVUbyhmLCBlKTsKICAgICAgICBhLmJlemllckN1cnZlVG8oZiwgYiArIGssIGQsIGIgKyBrLCBkLCBlKTsKICAgICAgICBhLmJlemllckN1cnZlVG8oZCwgZyAtIGssIGYsIGcgLSBrLCBmLCBlKTsKICAgICAgICBsICYmICFTVFguaXNUcmFuc3BhcmVudChsKSAmJiAiYXV0byIgIT0gbCAmJiAoYS5maWxsU3R5bGUgPSBsLCBhLmdsb2JhbEFscGhhID0gMC4yLCBhLmZpbGwoKSwgYS5nbG9iYWxBbHBoYSA9IDEpOwogICAgICAgIG0gJiYgIm5vbmUiICE9IHRoaXMucGF0dGVybiAmJiAoYS5zdHJva2VTdHlsZSA9IG0sIGEubGluZVdpZHRoID0gYywgYS5zZXRMaW5lRGFzaCAmJiAoZCA9IFtdLCAiZG90dGVkIiA9PSB0aGlzLnBhdHRlcm4gPyBkID0gW2MsIGNdIDogImRhc2hlZCIgPT0gdGhpcy5wYXR0ZXJuICYmIChkID0gWzUgKiBjLCA1ICogY10pLCBhLnNldExpbmVEYXNoKGQpLCBhLmxpbmVEYXNoT2Zmc2V0ID0gMCksIGEuc3Ryb2tlKCkpOwogICAgICAgIGEuY2xvc2VQYXRoKCkKICAgIH0KfTsKU1RYLkRyYXdpbmcuZWxsaXBzZS5wcm90b3R5cGUuaW50ZXJzZWN0ZWQgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIGMgPSB0aGlzLnAwWzBdIC0gKHRoaXMucDFbMF0gLSB0aGlzLnAwWzBdKSwKICAgICAgICBkID0gdGhpcy5wMVswXSwKICAgICAgICBlID0gdGhpcy5wMVsxXSwKICAgICAgICBmID0gdGhpcy5wMFsxXSAtICh0aGlzLnAxWzFdIC0gdGhpcy5wMFsxXSk7CiAgICByZXR1cm4gYSA+IE1hdGgubWF4KGMsIGQpIHx8IGEgPCBNYXRoLm1pbihjLCBkKSB8fCBiID4gTWF0aC5tYXgoZiwgZSkgfHwgYiA8IE1hdGgubWluKGYsIGUpID8gITEgOiAhMAp9OwpTVFguRHJhd2luZy5lbGxpcHNlLnByb3RvdHlwZS5jb3B5Q29uZmlnID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5jb2xvciA9IFNUWENoYXJ0LmN1cnJlbnRDb2xvcjsKICAgIHRoaXMuZmlsbENvbG9yID0gU1RYQ2hhcnQuY3VycmVudFZlY3RvclBhcmFtZXRlcnMuZmlsbENvbG9yOwogICAgdGhpcy5saW5lV2lkdGggPSBTVFhDaGFydC5jdXJyZW50VmVjdG9yUGFyYW1ldGVycy5saW5lV2lkdGg7CiAgICB0aGlzLnBhdHRlcm4gPSBTVFhDaGFydC5jdXJyZW50VmVjdG9yUGFyYW1ldGVycy5wYXR0ZXJuCn07ClNUWC5EcmF3aW5nLmVsbGlwc2UucHJvdG90eXBlLnJlY29uc3RydWN0ID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIHRoaXMuc3R4ID0gYTsKICAgIHRoaXMuY29sb3IgPSBiLmNvbDsKICAgIHRoaXMuZmlsbENvbG9yID0gYi5mYzsKICAgIHRoaXMucGFuZWxOYW1lID0gYi5wbmw7CiAgICB0aGlzLnBhdHRlcm4gPSBiLnB0cm47CiAgICB0aGlzLmxpbmVXaWR0aCA9IGIubHc7CiAgICB0aGlzLmQwID0gYi5kMDsKICAgIHRoaXMuZDEgPSBiLmQxOwogICAgdGhpcy52MCA9IGIudjA7CiAgICB0aGlzLnYxID0gYi52MTsKICAgIHRoaXMuYWRqdXN0KCkKfTsKU1RYLkRyYXdpbmcuZWxsaXBzZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiB0aGlzLm5hbWUsCiAgICAgICAgcG5sOiB0aGlzLnBhbmVsTmFtZSwKICAgICAgICBjb2w6IHRoaXMuY29sb3IsCiAgICAgICAgZmM6IHRoaXMuZmlsbENvbG9yLAogICAgICAgIHB0cm46IHRoaXMucGF0dGVybiwKICAgICAgICBsdzogdGhpcy5saW5lV2lkdGgsCiAgICAgICAgZDA6IHRoaXMuZDAsCiAgICAgICAgZDE6IHRoaXMuZDEsCiAgICAgICAgdjA6IHRoaXMudjAsCiAgICAgICAgdjE6IHRoaXMudjEKICAgIH0KfTsKU1RYLkRyYXdpbmcuZmlib25hY2NpID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5uYW1lID0gImZpYm9uYWNjaSIKfTsKU1RYLkRyYXdpbmcuZmlib25hY2NpLnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5CYXNlVHdvUG9pbnQpOwpTVFguRHJhd2luZy5maWJvbmFjY2kubWFwcGluZyA9IHsKICAgIHRyZW5kOiAidCIsCiAgICBjb2xvcjogImMiLAogICAgcGFyYW1ldGVyczogInAiLAogICAgcGF0dGVybjogInB0IiwKICAgIG9wYWNpdHk6ICJvIiwKICAgIGxpbmVXaWR0aDogImx3IiwKICAgIGxldmVsOiAibCIsCiAgICBleHRlbmRMZWZ0OiAiZSIsCiAgICBwcmludExldmVsczogInBsIgp9OwpTVFguRHJhd2luZy5maWJvbmFjY2kucHJvdG90eXBlLmNvcHlDb25maWcgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmNvbG9yID0gU1RYQ2hhcnQuY3VycmVudENvbG9yOwogICAgdGhpcy5saW5lV2lkdGggPSBTVFhDaGFydC5jdXJyZW50VmVjdG9yUGFyYW1ldGVycy5saW5lV2lkdGg7CiAgICB0aGlzLnBhcmFtZXRlcnMgPSBTVFhDaGFydC5jdXJyZW50VmVjdG9yUGFyYW1ldGVycy5maWJvbmFjY2kKfTsKU1RYLkRyYXdpbmcuZmlib25hY2NpLnByb3RvdHlwZS5zZXRPdXRlciA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMub3V0ZXIgPSB7CiAgICAgICAgcDA6IGNsb25lKHRoaXMucDApLAogICAgICAgIHAxOiBjbG9uZSh0aGlzLnAxKQogICAgfTsKICAgIGZvciAodmFyIGEgPSB0aGlzLnAwWzFdLCBiID0gdGhpcy5wMVsxXSwgYyA9IHRoaXMucDBbMF0sIGQgPSB0aGlzLnAxWzBdLCBlID0gTWF0aC5taW4oYiwgYSksIGYgPSBNYXRoLm1heChiLCBhKSwgZyA9IGYgLSBlLCBrID0gMCA8IChiIC0gYSkgLyAoZCAtIGMpLCBtID0gMCwgbCA9IDEsIG4gPSAwOyBuIDwgdGhpcy5wYXJhbWV0ZXJzLmZpYnMubGVuZ3RoOyBuKyspIHsKICAgICAgICB2YXIgciA9IHRoaXMucGFyYW1ldGVycy5maWJzW25dOwogICAgICAgIGlmICghKHIubGV2ZWwgPj0gbSAmJiByLmxldmVsIDw9IGwpKSB7CiAgICAgICAgICAgIHZhciBwID0gayA/IGYgLSBnICogci5sZXZlbCA6IGUgKyBnICogci5sZXZlbCwKICAgICAgICAgICAgICAgIHMgPSB4SW50ZXJzZWN0aW9uKHsKICAgICAgICAgICAgICAgICAgICB4MDogYywKICAgICAgICAgICAgICAgICAgICB4MTogZCwKICAgICAgICAgICAgICAgICAgICB5MDogYSwKICAgICAgICAgICAgICAgICAgICB5MTogYgogICAgICAgICAgICAgICAgfSwgcCk7CiAgICAgICAgICAgIHIubGV2ZWwgPCBtID8gKG0gPSByLmxldmVsLCBrID8gdGhpcy5vdXRlci5wMFsxXSA9IHAgOiB0aGlzLm91dGVyLnAxWzFdID0gcCwgayA/IHRoaXMub3V0ZXIucDBbMF0gPSBzIDogdGhpcy5vdXRlci5wMVswXSA9IHMpIDogci5sZXZlbCA+CiAgICAgICAgICAgICAgICBsICYmIChsID0gci5sZXZlbCwgayA/IHRoaXMub3V0ZXIucDFbMV0gPSBwIDogdGhpcy5vdXRlci5wMFsxXSA9IHAsIGsgPyB0aGlzLm91dGVyLnAxWzBdID0gcyA6IHRoaXMub3V0ZXIucDBbMF0gPSBzKQogICAgICAgIH0KICAgIH0KfTsKU1RYLkRyYXdpbmcuZmlib25hY2NpLnByb3RvdHlwZS5jbGljayA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICBpZiAoYSA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV0pIHsKICAgICAgICB0aGlzLmNvcHlDb25maWcoKTsKICAgICAgICBpZiAoIXRoaXMucDApIHJldHVybiB0aGlzLnAwID0gW2IsIGNdLCB0aGlzLnYwID0gYywgITE7CiAgICAgICAgaWYgKHRoaXMuYWNjaWRlbnRhbENsaWNrKGIsIGMpKSByZXR1cm4gITE7CiAgICAgICAgdGhpcy5wMSA9IFtiLCBjXTsKICAgICAgICB0aGlzLnYxID0gYzsKICAgICAgICB0aGlzLmQwID0gdGhpcy5zdHguZGF0ZUZyb21UaWNrKHRoaXMucDBbMF0sIGEuY2hhcnQpOwogICAgICAgIHRoaXMuZDEgPSB0aGlzLnN0eC5kYXRlRnJvbVRpY2sodGhpcy5wMVswXSwgYS5jaGFydCk7CiAgICAgICAgdGhpcy5zZXRPdXRlcigpOwogICAgICAgIHRoaXMucGFyYW1ldGVycyA9IGNsb25lKHRoaXMucGFyYW1ldGVycyk7CiAgICAgICAgcmV0dXJuICEwCiAgICB9Cn07ClNUWC5EcmF3aW5nLmZpYm9uYWNjaS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGEpIHsKICAgIHZhciBiID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXTsKICAgIGlmIChiICYmIHRoaXMucDEpIHsKICAgICAgICB2YXIgYyA9IHRoaXMuc3R4LnBpeGVsRnJvbVRpY2sodGhpcy5wMFswXSwgYi5jaGFydCksCiAgICAgICAgICAgIGQgPSB0aGlzLnN0eC5waXhlbEZyb21UaWNrKHRoaXMucDFbMF0sIGIuY2hhcnQpLAogICAgICAgICAgICBlID0gdGhpcy5zdHgucGl4ZWxGcm9tVmFsdWVBZGp1c3RlZChiLCB0aGlzLnAwWzBdLCB0aGlzLnAwWzFdKSwKICAgICAgICAgICAgZiA9IHRoaXMuc3R4LnBpeGVsRnJvbVZhbHVlQWRqdXN0ZWQoYiwgdGhpcy5wMVswXSwgdGhpcy5wMVsxXSksCiAgICAgICAgICAgIGcgPSBNYXRoLm1pbihmLCBlKSwKICAgICAgICAgICAgayA9IE1hdGgubWF4KGYsIGUpLAogICAgICAgICAgICBtID0gayAtIGcsCiAgICAgICAgICAgIGwgPSAwIDwgKGYgLSBlKSAvIChkIC0gYyksCiAgICAgICAgICAgIG4gPSB0aGlzLnBhcmFtZXRlcnMudHJlbmQuY29sb3I7CiAgICAgICAgaWYgKCJhdXRvIiA9PSBuIHx8IFNUWC5pc1RyYW5zcGFyZW50KG4pKSBuID0gdGhpcy5zdHguZGVmYXVsdENvbG9yOwogICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWQgJiYgKG4gPSB0aGlzLnN0eC5nZXRDYW52YXNDb2xvcigic3R4X2hpZ2hsaWdodF92ZWN0b3IiKSk7CiAgICAgICAgYS50ZXh0QmFzZWxpbmUgPSAibWlkZGxlIjsKICAgICAgICB2YXIgciA9IGEubWVhc3VyZVRleHQoIjE2MS44JSIpLndpZHRoLAogICAgICAgICAgICBwID0gMkU5LAogICAgICAgICAgICBzID0gMkU5LAogICAgICAgICAgICB0ID0gLTJFOSwKICAgICAgICAgICAgcSA9IC0yRTksCiAgICAgICAgICAgIHkgPSB0aGlzLmNvbG9yOwogICAgICAgIGlmICgiYXV0byIgPT0geSB8fCBTVFguaXNUcmFuc3BhcmVudCh5KSkgeSA9IHRoaXMuc3R4LmRlZmF1bHRDb2xvcjsKICAgICAgICBhLmZpbGxTdHlsZSA9IHk7CiAgICAgICAgZm9yICh5ID0gMDsgeSA8IHRoaXMucGFyYW1ldGVycy5maWJzLmxlbmd0aDsgeSsrKSB7CiAgICAgICAgICAgIHZhciB2ID0gdGhpcy5wYXJhbWV0ZXJzLmZpYnNbeV0sCiAgICAgICAgICAgICAgICB3ID0gbCA/IGsgLSBtICogdi5sZXZlbCA6IGcgKyBtICogdi5sZXZlbCwKICAgICAgICAgICAgICAgIHcgPSBNYXRoLnJvdW5kKHcpLAogICAgICAgICAgICAgICAgRCA9IHhJbnRlcnNlY3Rpb24oewogICAgICAgICAgICAgICAgICAgIHgwOiBjLAogICAgICAgICAgICAgICAgICAgIHgxOiBkLAogICAgICAgICAgICAgICAgICAgIHkwOiBlLAogICAgICAgICAgICAgICAgICAgIHkxOiBmCiAgICAgICAgICAgICAgICB9LCB3KSwKICAgICAgICAgICAgICAgIEMgPSB0aGlzLnN0eC5jaGFydC53aWR0aDsKICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1ldGVycy5wcmludExldmVscykgewogICAgICAgICAgICAgICAgdmFyIEEgPSAxMDAgKiB2LmxldmVsICsgIiUiLAogICAgICAgICAgICAgICAgICAgIEMgPSBDIC0gcjsKICAgICAgICAgICAgICAgIGEuZmlsbFRleHQoQSwgQywgdyk7CiAgICAgICAgICAgICAgICBDIC09IDUKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgQSA9IHRoaXMucGFyYW1ldGVycy5leHRlbmRMZWZ0ID8gMCA6IEQsCiAgICAgICAgICAgICAgICB1ID0gdi5jb2xvcjsKICAgICAgICAgICAgaWYgKCJhdXRvIiA9PSB1IHx8IFNUWC5pc1RyYW5zcGFyZW50KHUpKSB1ID0KICAgICAgICAgICAgICAgIHRoaXMuY29sb3I7CiAgICAgICAgICAgIGlmICgiYXV0byIgPT0gdSB8fCBTVFguaXNUcmFuc3BhcmVudCh1KSkgdSA9IHRoaXMuc3R4LmRlZmF1bHRDb2xvcjsKICAgICAgICAgICAgdGhpcy5zdHgucGxvdExpbmUoQSwgQywgdywgdywgdSwgInNlZ21lbnQiLCBhLCBiLCB2LnBhcmFtZXRlcnMpOwogICAgICAgICAgICB3IDwgcyAmJiAocCA9IEQsIHMgPSB3KTsKICAgICAgICAgICAgdyA+IHEgJiYgKHQgPSBELCBxID0gdykKICAgICAgICB9CiAgICAgICAgdGhpcy5zdHgucGxvdExpbmUocCwgdCwgcywgcSwgbiwgInNlZ21lbnQiLCBhLCBiLCB0aGlzLnBhcmFtZXRlcnMudHJlbmQucGFyYW1ldGVycykKICAgIH0KfTsKU1RYLkRyYXdpbmcuZmlib25hY2NpLnByb3RvdHlwZS5pbnRlcnNlY3RlZCA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICByZXR1cm4gYm94SW50ZXJzZWN0cyhjLngwLCBjLnkwLCBjLngxLCBjLnkxLCB0aGlzLm91dGVyLnAwWzBdLCB0aGlzLm91dGVyLnAwWzFdLCB0aGlzLm91dGVyLnAxWzBdLCB0aGlzLm91dGVyLnAxWzFdLCAic2VnbWVudCIpCn07ClNUWC5EcmF3aW5nLmZpYm9uYWNjaS5wcm90b3R5cGUucmVjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoYSwgYikgewogICAgYiA9IFNUWC5yZXBsYWNlRmllbGRzKGIsIFNUWC5yZXZlcnNlT2JqZWN0KFNUWC5EcmF3aW5nLmZpYm9uYWNjaS5tYXBwaW5nKSk7CiAgICB0aGlzLnN0eCA9IGE7CiAgICB0aGlzLnBhcmFtZXRlcnMgPSBiLnBhcmFtZXRlcnM7CiAgICB0aGlzLnBhcmFtZXRlcnMgfHwgKHRoaXMucGFyYW1ldGVycyA9IGNsb25lKFNUWENoYXJ0LmN1cnJlbnRWZWN0b3JQYXJhbWV0ZXJzLmZpYm9uYWNjaSkpOwogICAgdGhpcy5jb2xvciA9IGIuY29sOwogICAgdGhpcy5wYW5lbE5hbWUgPSBiLnBubDsKICAgIHRoaXMuZDAgPSBiLmQwOwogICAgdGhpcy5kMSA9IGIuZDE7CiAgICB0aGlzLnYwID0gYi52MDsKICAgIHRoaXMudjEgPSBiLnYxOwogICAgdGhpcy5hZGp1c3QoKQp9OwpTVFguRHJhd2luZy5maWJvbmFjY2kucHJvdG90eXBlLmFkanVzdCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBhID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXTsKICAgIGEgJiYgKHRoaXMucDAgPSBbdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuZDAsIGEuY2hhcnQpLCB0aGlzLnYwXSwgdGhpcy5wMSA9IFt0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5kMSwgYS5jaGFydCksIHRoaXMudjFdLCB0aGlzLnNldE91dGVyKCkpCn07ClNUWC5EcmF3aW5nLmZpYm9uYWNjaS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIFNUWC5yZXBsYWNlRmllbGRzKHsKICAgICAgICBuYW1lOiB0aGlzLm5hbWUsCiAgICAgICAgcGFyYW1ldGVyczogdGhpcy5wYXJhbWV0ZXJzLAogICAgICAgIHBubDogdGhpcy5wYW5lbE5hbWUsCiAgICAgICAgY29sOiB0aGlzLmNvbG9yLAogICAgICAgIGQwOiB0aGlzLmQwLAogICAgICAgIGQxOiB0aGlzLmQxLAogICAgICAgIHYwOiB0aGlzLnYwLAogICAgICAgIHYxOiB0aGlzLnYxCiAgICB9LCBTVFguRHJhd2luZy5maWJvbmFjY2kubWFwcGluZykKfTsKU1RYLkRyYXdpbmcuYmVsbGN1cnZlID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5uYW1lID0gImJlbGxjdXJ2ZSI7CiAgICB0aGlzLnByb2ZpbGUgPSBbXTsKICAgIHRoaXMudHdvQ2xpY2tlZCA9ICExOwogICAgdGhpcy5jaGFydHNPbmx5ID0gITAKfTsKU1RYLkRyYXdpbmcuYmVsbGN1cnZlLnN0eEluaGVyaXRzRnJvbShTVFguRHJhd2luZy5CYXNlVHdvUG9pbnQpOwpTVFguRHJhd2luZy5iZWxsY3VydmUucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIGlmIChhID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXSkgewogICAgICAgIHRoaXMuY29weUNvbmZpZygpOwogICAgICAgIGlmICghdGhpcy5wMCkgcmV0dXJuIHRoaXMucDAgPSBbYiwgY10sICExOwogICAgICAgIGlmICh0aGlzLmFjY2lkZW50YWxDbGljayhiLCBjKSkgcmV0dXJuICExOwogICAgICAgIHRoaXMucDEgPSBbYiwgY107CiAgICAgICAgdGhpcy5kMCA9IHRoaXMuc3R4LmRhdGVGcm9tVGljayh0aGlzLnAwWzBdLCBhLmNoYXJ0KTsKICAgICAgICB0aGlzLmQxID0gdGhpcy5zdHguZGF0ZUZyb21UaWNrKHRoaXMucDFbMF0sIGEuY2hhcnQpOwogICAgICAgIHJldHVybiB0aGlzLnR3b0NsaWNrZWQgPSAhMAogICAgfQp9OwpTVFguRHJhd2luZy5iZWxsY3VydmUucHJvdG90eXBlLnByb2ZpbGVSYW5nZSA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICBpZiAoYiA+PSBhLmxlbmd0aCkgYVtiXSA9IFtdLCBhW2JdWzBdID0gYzsKICAgIGVsc2UgewogICAgICAgIGZvciAodmFyIGQgPSAwLCBlID0gYVtiXS5sZW5ndGg7IGQgPCBlOyBkKyspIHsKICAgICAgICAgICAgdmFyIGYgPSBhW2JdW2RdOwogICAgICAgICAgICBpZiAoZi5IaWdoID49IGMuSGlnaCAmJiBmLkxvdyA8PSBjLkxvdykgewogICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlUmFuZ2UoYSwgYiArIDEsIGMpOwogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgYy5IaWdoID4gZi5IaWdoICYmIGMuTG93IDwgZi5IaWdoICYmIGMuTG93ID49IGYuTG93ID8gKHRoaXMucHJvZmlsZVJhbmdlKGEsIGIgKyAxLCB7CiAgICAgICAgICAgICAgICBIaWdoOiBmLkhpZ2gsCiAgICAgICAgICAgICAgICBMb3c6IGMuTG93CiAgICAgICAgICAgIH0pLCBjID0gewogICAgICAgICAgICAgICAgSGlnaDogYy5IaWdoLAogICAgICAgICAgICAgICAgTG93OiBmLkhpZ2gKICAgICAgICAgICAgfSkgOiBjLkxvdyA8IGYuTG93ICYmIGMuSGlnaCA+IGYuTG93ICYmIGMuSGlnaCA8PSBmLkhpZ2ggPyAodGhpcy5wcm9maWxlUmFuZ2UoYSwgYiArIDEsIHsKICAgICAgICAgICAgICAgIEhpZ2g6IGMuSGlnaCwKICAgICAgICAgICAgICAgIExvdzogZi5Mb3cKICAgICAgICAgICAgfSksIGMgPSB7CiAgICAgICAgICAgICAgICBIaWdoOiBmLkxvdywKICAgICAgICAgICAgICAgIExvdzogYy5Mb3cKICAgICAgICAgICAgfSkgOiBmLkhpZ2ggPCBjLkhpZ2ggJiYgZi5Mb3cgPiBjLkxvdyAmJiAodGhpcy5wcm9maWxlUmFuZ2UoYSwKICAgICAgICAgICAgICAgIGIsIHsKICAgICAgICAgICAgICAgICAgICBIaWdoOiBmLkxvdywKICAgICAgICAgICAgICAgICAgICBMb3c6IGMuTG93CiAgICAgICAgICAgICAgICB9KSwgdGhpcy5wcm9maWxlUmFuZ2UoYSwgYiArIDEsIHsKICAgICAgICAgICAgICAgIEhpZ2g6IGYuSGlnaCwKICAgICAgICAgICAgICAgIExvdzogZi5Mb3cKICAgICAgICAgICAgfSksIGMgPSB7CiAgICAgICAgICAgICAgICBIaWdoOiBjLkhpZ2gsCiAgICAgICAgICAgICAgICBMb3c6IGYuSGlnaAogICAgICAgICAgICB9KQogICAgICAgIH0KICAgICAgICBhW2JdW2RdID0gYwogICAgfQp9OwpTVFguRHJhd2luZy5iZWxsY3VydmUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChhKSB7CiAgICBmdW5jdGlvbiBiKGEsIGIpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmdW5jdGlvbiBjKGEsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhLkxvdyA8IGIuTG93ID8gLTEgOiBhLkxvdyA+IGIuTG93ID8gMSA6IDAKICAgICAgICAgICAgfQogICAgICAgICAgICBhLnByb2ZpbGUgPSBbXTsKICAgICAgICAgICAgdmFyIGQgPSBbXSwKICAgICAgICAgICAgICAgIGUgPSBNYXRoLm1pbihhLnAwWzBdLCBhLnAxWzBdKSwKICAgICAgICAgICAgICAgIGYgPSBNYXRoLm1heChhLnAwWzBdLCBhLnAxWzBdKTsKICAgICAgICAgICAgaWYgKCEoM0UzIDwgZiAtIGUpKSB7CiAgICAgICAgICAgICAgICBmb3IgKDsgZSA8IGY7IGUrKykKICAgICAgICAgICAgICAgICAgICBpZiAoISgwID4gZSB8fCBlID49IGIuY2hhcnQuZGF0YVNldC5sZW5ndGgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnID0gYi5jaGFydC5kYXRhU2V0W2VdOwogICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgSGlnaDogZy5IaWdoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG93OiBnLkxvdwogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGQuc29ydChjKTsKICAgICAgICAgICAgICAgIGZvciAoZSA9IDA7IGUgPCBkLmxlbmd0aDsgZSsrKSBhLnByb2ZpbGVSYW5nZShhLnByb2ZpbGUsIDAsIGRbZV0pCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5wMSkgewogICAgICAgIHZhciBjID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXTsKICAgICAgICBpZiAoYykgewogICAgICAgICAgICB0aGlzLngwID0gdGhpcy5zdHgucGl4ZWxGcm9tVGljayh0aGlzLnAwWzBdLAogICAgICAgICAgICAgICAgYy5jaGFydCk7CiAgICAgICAgICAgIHRoaXMueDEgPSB0aGlzLnN0eC5waXhlbEZyb21UaWNrKHRoaXMucDFbMF0sIGMuY2hhcnQpOwogICAgICAgICAgICAwICE9IHRoaXMucHJvZmlsZS5sZW5ndGggJiYgdGhpcy50d29DbGlja2VkIHx8ICh0aGlzLnRpbWVyICYmIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSwgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoYih0aGlzLCBjKSwgMjApKTsKICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRlZCA/IGEuZmlsbFN0eWxlID0gdGhpcy5zdHguZ2V0Q2FudmFzQ29sb3IoInN0eF9oaWdobGlnaHRfdmVjdG9yIikgOiAoYS5maWxsU3R5bGUgPSB0aGlzLmNvbG9yLCBTVFguaXNUcmFuc3BhcmVudChhLmZpbGxTdHlsZSkgJiYgKGEuZmlsbFN0eWxlID0gdGhpcy5zdHguZGVmYXVsdENvbG9yKSk7CiAgICAgICAgICAgIGEuZ2xvYmFsQWxwaGEgPSAwLjU7CiAgICAgICAgICAgIHZhciBkID0gdGhpcy5zdHgubGF5b3V0LmNhbmRsZVdpZHRoOwogICAgICAgICAgICBhLmJlZ2luUGF0aCgpOwogICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMucHJvZmlsZS5sZW5ndGg7IGUrKykKICAgICAgICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgdGhpcy5wcm9maWxlW2VdLmxlbmd0aDsgZisrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSB0aGlzLnByb2ZpbGVbZV1bZl0sCiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSB0aGlzLnN0eC5waXhlbEZyb21QcmljZShnLkhpZ2gsIGMpLAogICAgICAgICAgICAgICAgICAgICAgICBnID0gdGhpcy5zdHgucGl4ZWxGcm9tUHJpY2UoZy5Mb3csIGMpLAogICAgICAgICAgICAgICAgICAgICAgICBtID0gTWF0aC5taW4odGhpcy54MCwgdGhpcy54MSkgKyBlICogZCwKICAgICAgICAgICAgICAgICAgICAgICAgbCA9IG0gKyBNYXRoLnJvdW5kKDAuNzUgKiBkKTsKICAgICAgICAgICAgICAgICAgICBhLm1vdmVUbyhtLCBrKTsKICAgICAgICAgICAgICAgICAgICBhLmxpbmVUbyhsLCBrKTsKICAgICAgICAgICAgICAgICAgICBhLmxpbmVUbyhsLCBnKTsKICAgICAgICAgICAgICAgICAgICBhLmxpbmVUbyhtLCBnKTsKICAgICAgICAgICAgICAgICAgICBhLmxpbmVUbyhtLCBrKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBhLmZpbGwoKTsKICAgICAgICAgICAgYS5jbG9zZVBhdGgoKTsKICAgICAgICAgICAgYS5nbG9iYWxBbHBoYSA9IDEKICAgICAgICB9CiAgICB9Cn07ClNUWC5EcmF3aW5nLmJlbGxjdXJ2ZS5wcm90b3R5cGUuaW50ZXJzZWN0ZWQgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgcmV0dXJuIGEgPCBNYXRoLm1heCh0aGlzLnAwWzBdLCB0aGlzLnAxWzBdKSAmJiBhID4gTWF0aC5taW4odGhpcy5wMFswXSwgdGhpcy5wMVswXSkgPyAhMCA6ICExCn07ClNUWC5EcmF3aW5nLmJlbGxjdXJ2ZS5wcm90b3R5cGUuY29weUNvbmZpZyA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY29sb3IgPSBTVFhDaGFydC5jdXJyZW50Q29sb3IKfTsKU1RYLkRyYXdpbmcuYmVsbGN1cnZlLnByb3RvdHlwZS5hZGp1c3QgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYSA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV07CiAgICBhICYmICh0aGlzLnAwID0gW3RoaXMuc3R4LnRpY2tGcm9tRGF0ZSh0aGlzLmQwLCBhLmNoYXJ0KSwgMF0sIHRoaXMucDEgPSBbdGhpcy5zdHgudGlja0Zyb21EYXRlKHRoaXMuZDEsIGEuY2hhcnQpLCAwXSkKfTsKU1RYLkRyYXdpbmcuYmVsbGN1cnZlLnByb3RvdHlwZS5yZWNvbnN0cnVjdCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICB0aGlzLnN0eCA9IGE7CiAgICB0aGlzLmNvbG9yID0gYi5jb2w7CiAgICB0aGlzLnBhbmVsTmFtZSA9IGIucG5sOwogICAgdGhpcy5kMCA9IGIuZDA7CiAgICB0aGlzLmQxID0gYi5kMTsKICAgIHRoaXMuYWRqdXN0KCk7CiAgICB0aGlzLnR3b0NsaWNrZWQgPSAhMAp9OwpTVFguRHJhd2luZy5iZWxsY3VydmUucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB7CiAgICAgICAgbmFtZTogdGhpcy5uYW1lLAogICAgICAgIHBubDogdGhpcy5wYW5lbE5hbWUsCiAgICAgICAgY29sOiB0aGlzLmNvbG9yLAogICAgICAgIGQwOiB0aGlzLmQwLAogICAgICAgIGQxOiB0aGlzLmQxCiAgICB9Cn07ClNUWC5Db21wYXJpc29uID0gZnVuY3Rpb24gKCkge307ClNUWC5Db21wYXJpc29uLm1vdXNlSGFzTW92ZWQgPSAhMTsKU1RYLkNvbXBhcmlzb24ucHJpY2VUb1BlcmNlbnQgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgcmV0dXJuIE1hdGgucm91bmQoKGMgLSBTVFguQ29tcGFyaXNvbi5iYXNlbGluZSkgLyBTVFguQ29tcGFyaXNvbi5iYXNlbGluZSAqIDFFNikgLyAxRTQKfTsKU1RYLkNvbXBhcmlzb24ucGVyY2VudFRvUHJpY2UgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgcmV0dXJuIFNUWC5Db21wYXJpc29uLmJhc2VsaW5lICogKDEgKyBjIC8gMTAwKQp9OwpTVFguQ29tcGFyaXNvbi5zdG9wU29ydCA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICByZXR1cm4gYSAtIGIKfTsKU1RYLkNvbXBhcmlzb24uY3JlYXRlQ29tcGFyaXNvblNlZ21lbnRJbm5lciA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBpZiAoIWIuaXNDb21wYXJpc29uKSByZXR1cm4gITE7CiAgICB2YXIgYyA9IFtdLAogICAgICAgIGQ7CiAgICBmb3IgKGQgaW4gYi5zZXJpZXMpIGIuc2VyaWVzW2RdLnBhcmFtZXRlcnMuaXNDb21wYXJpc29uICYmIGMucHVzaChkKTsKICAgIHZhciBlID0gWyJDbG9zZSIsICJPcGVuIiwgIkhpZ2giLCAiTG93Il07CiAgICBiLmRhdGFTZWdtZW50ID0gW107CiAgICBmb3IgKHZhciBmID0gbnVsbCwgZyA9IGIuZGF0YVNldC5sZW5ndGggLSBiLnNjcm9sbCwgayA9IGcgKyBiLm1heFRpY2tzLCBtID0gMCwgbCA9IFtdLCBuID0gMDsgbiA8IGEuZHJhd2luZ09iamVjdHMubGVuZ3RoOyBuKyspIGQgPSBhLmRyYXdpbmdPYmplY3RzW25dLCAiY29tcGFyaXNvbl9zdG9wIiA9PSBkLm5hbWUgJiYgZC50aWNrID4gZyAmJiBkLnRpY2sgPD0gayAmJiBsLnB1c2goZC50aWNrKTsKICAgIGwuc29ydChTVFguQ29tcGFyaXNvbi5zdG9wU29ydCk7CiAgICBmb3IgKG4gPSAwOyBuIDw9IGIubWF4VGlja3M7IG4rKykKICAgICAgICBpZiAocG9zaXRpb24gPSBnICsgbiwgcG9zaXRpb24gPCBiLmRhdGFTZXQubGVuZ3RoICYmCiAgICAgICAgICAgIDAgPD0gcG9zaXRpb24pIHsKICAgICAgICAgICAgayA9IGIuZGF0YVNldFtwb3NpdGlvbl07CiAgICAgICAgICAgIGYgfHwgKGYgPSBjbG9uZShrKSk7CiAgICAgICAgICAgIGsudHJhbnNmb3JtIHx8IChrLnRyYW5zZm9ybSA9IHsKICAgICAgICAgICAgICAgIGNhY2hlOiB7fQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgU1RYLkNvbXBhcmlzb24uYmFzZWxpbmUgPSBmLkNsb3NlOwogICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGUubGVuZ3RoOyByKyspCiAgICAgICAgICAgICAgICBpZiAoZCA9IGVbcl0sIGtbZF0gfHwgMCA9PSBrW2RdKSBrLnRyYW5zZm9ybVtkXSA9IE1hdGgucm91bmQoKGtbZF0gLSBTVFguQ29tcGFyaXNvbi5iYXNlbGluZSkgLyBTVFguQ29tcGFyaXNvbi5iYXNlbGluZSAqIDFFNikgLyAxRTQ7CiAgICAgICAgICAgIGQgPSAhMTsKICAgICAgICAgICAgbCAmJiBtIDwgbC5sZW5ndGggJiYgcG9zaXRpb24gPT09IGxbbV0gJiYgKGQgPSAhMCwgbSsrKTsKICAgICAgICAgICAgciA9IG51bGw7CiAgICAgICAgICAgIGEuYWN0aXZlRHJhd2luZyAmJiAiY29tcGFyaXNvbl9zdG9wIiA9PSBhLmFjdGl2ZURyYXdpbmcubmFtZSAmJiAociA9IGEuYWN0aXZlRHJhd2luZy50aWNrKTsKICAgICAgICAgICAgaWYgKGQgfHwgcG9zaXRpb24gPT0gcikKICAgICAgICAgICAgICAgIGZvciAociA9IDA7IHIgPCBjLmxlbmd0aDsgcisrKSB7CiAgICAgICAgICAgICAgICAgICAgZCA9IGNbcl07CiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBrW2RdOwogICAgICAgICAgICAgICAgICAgIGZbZF0gPSBwIC8gKDEgKyBrLnRyYW5zZm9ybS5DbG9zZSAvIDEwMCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChyID0gMDsgciA8CiAgICAgICAgICAgICAgICBjLmxlbmd0aDsgcisrKQogICAgICAgICAgICAgICAgaWYgKGQgPSBjW3JdLCAocCA9IGtbZF0pIHx8IDAgPT0gcCkgewogICAgICAgICAgICAgICAgICAgIHZhciBzID0gZltkXTsKICAgICAgICAgICAgICAgICAgICBzIHx8IDAgPT0gcyB8fCAoZltkXSA9IHMgPSBwIC8gKDEgKyBrLnRyYW5zZm9ybS5DbG9zZSAvIDEwMCkpOwogICAgICAgICAgICAgICAgICAgIGsudHJhbnNmb3JtW2RdID0gTWF0aC5yb3VuZCgocCAtIHMpIC8gcyAqIDFFNikgLyAxRTQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgYi5kYXRhU2VnbWVudC5wdXNoKGspCiAgICAgICAgfSAKICAgIGEuY2xlYXJQaXhlbENhY2hlKCk7CiAgICByZXR1cm4gITAKfTsKU1RYLkNvbXBhcmlzb24uY3JlYXRlQ29tcGFyaXNvblNlZ21lbnQgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciBhIGluIHRoaXMuY2hhcnRzKSB7CiAgICAgICAgdmFyIGIgPSB0aGlzLmNoYXJ0c1thXTsKICAgICAgICBiLmlzQ29tcGFyaXNvbiAmJiBTVFguQ29tcGFyaXNvbi5jcmVhdGVDb21wYXJpc29uU2VnbWVudElubmVyKHRoaXMsIGIpCiAgICB9Cn07ClNUWC5Db21wYXJpc29uLnByaWNlRm9ybWF0ID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIGlmICghYyB8fCAidW5kZWZpbmVkIiA9PSB0eXBlb2YgYykgcmV0dXJuICIiOwogICAgYiA9IGIueUF4aXMucHJpY2VUaWNrOwogICAgcmV0dXJuIGMgPSBhLmludGVybmF0aW9uYWxpemVyID8gMSA8PSBiID8gYS5pbnRlcm5hdGlvbmFsaXplci5wZXJjZW50MC5mb3JtYXQoYykgOiAwLjEgPD0gYiA/IGEuaW50ZXJuYXRpb25hbGl6ZXIucGVyY2VudDEuZm9ybWF0KGMpIDogMC4wMSA8PSBiID8gYS5pbnRlcm5hdGlvbmFsaXplci5wZXJjZW50Mi5mb3JtYXQoYykgOiAwLjAwMSA8PSBiID8gYS5pbnRlcm5hdGlvbmFsaXplci5wZXJjZW50My5mb3JtYXQoYykgOiBhLmludGVybmF0aW9uYWxpemVyLnBlcmNlbnQ0LmZvcm1hdChjKSA6IDEgPD0gYiA/IGMudG9GaXhlZCgwKSArICIlIiA6IDAuMSA8PSBiID8gYy50b0ZpeGVkKDEpICsgIiUiIDogMC4wMSA8PSBiID8gYy50b0ZpeGVkKDIpICsgIiUiIDogMC4wMDEgPD0gYiA/IGMudG9GaXhlZCgzKSArICIlIiA6IGMudG9GaXhlZCg0KSArICIlIgp9OwpTVFhDaGFydC5wcm90b3R5cGUuc2V0Q29tcGFyaXNvbiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICAhYi5pc0NvbXBhcmlzb24gJiYgYyA/IChhLnNldFRyYW5zZm9ybShiLCBTVFguQ29tcGFyaXNvbi5wcmljZVRvUGVyY2VudCwgU1RYLkNvbXBhcmlzb24ucGVyY2VudFRvUHJpY2UpLCBiLnBhbmVsLnlBeGlzLnByaWNlRm9ybWF0dGVyID0gU1RYLkNvbXBhcmlzb24ucHJpY2VGb3JtYXQsIGIucGFuZWwueUF4aXMud2hpY2hTZXQgPSAiZGF0YVNlZ21lbnQiKSA6IGIuaXNDb21wYXJpc29uICYmICFjICYmIChhLnVuc2V0VHJhbnNmb3JtKGIpLCBiLnBhbmVsLnlBeGlzLnByaWNlRm9ybWF0dGVyID0gbnVsbCwgYi5wYW5lbC55QXhpcy53aGljaFNldCA9ICJkYXRhU2V0Iik7CiAgICBiLmlzQ29tcGFyaXNvbiA9IGMKfTsKU1RYLkNvbXBhcmlzb24uc3RhcnRQbHVnaW4gPSBmdW5jdGlvbiAoKSB7CiAgICBTVFhDaGFydC5wcm90b3R5cGUucHJlcGVuZCgiY3JlYXRlRGF0YVNlZ21lbnQiLCBTVFguQ29tcGFyaXNvbi5jcmVhdGVDb21wYXJpc29uU2VnbWVudCkKfTsKU1RYLkRyYXdpbmcuY29tcGFyaXNvbl9zdG9wID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5uYW1lID0gImNvbXBhcmlzb25fc3RvcCI7CiAgICB0aGlzLnBhbmVsID0gbnVsbAp9OwpTVFguRHJhd2luZy5jb21wYXJpc29uX3N0b3Auc3R4SW5oZXJpdHNGcm9tKFNUWC5EcmF3aW5nKTsKU1RYLkRyYXdpbmcuY29tcGFyaXNvbl9zdG9wLnByb3RvdHlwZS5hZGp1c3QgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYSA9IHRoaXMuc3R4LnBhbmVsc1t0aGlzLnBhbmVsTmFtZV07CiAgICBhICYmICh0aGlzLnRpY2sgPSB0aGlzLnN0eC50aWNrRnJvbURhdGUodGhpcy5kMCwgYS5jaGFydCkpCn07ClNUWC5EcmF3aW5nLmNvbXBhcmlzb25fc3RvcC5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICB0aGlzLnRpY2sgPSBiOwogICAgU1RYLkNvbXBhcmlzb24ubW91c2VIYXNNb3ZlZCA9ICEwOwogICAgdGhpcy5zdHguZHJhdygpCn07ClNUWC5EcmF3aW5nLmNvbXBhcmlzb25fc3RvcC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKGEpIHsKICAgIGlmIChhID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXSkgewogICAgICAgIHZhciBiID0gYS5jaGFydDsKICAgICAgICBpZiAoYi5pc0NvbXBhcmlzb24pIHsKICAgICAgICAgICAgdmFyIGMgPSBhLnlBeGlzLAogICAgICAgICAgICAgICAgZCA9IHRoaXMuc3R4LAogICAgICAgICAgICAgICAgYiA9IE1hdGgucm91bmQoZC5waXhlbEZyb21UaWNrKHRoaXMudGljaywgYikpICsgMC41LAogICAgICAgICAgICAgICAgZSA9IGQuZGVmYXVsdENvbG9yOwogICAgICAgICAgICB0aGlzLmhpZ2hsaWdodGVkICYmIChlID0gZC5nZXRDYW52YXNDb2xvcigic3R4X2hpZ2hsaWdodF92ZWN0b3IiKSk7CiAgICAgICAgICAgIGQuY2hhcnQuY29udGV4dC5zdHhMaW5lKGIsIGEudG9wICsgYy50b3BPZmZzZXQsIGIsIGEuYm90dG9tIC0gYy5ib3R0b21PZmZzZXQsIGUsIDEsIDAuNSwgWzEwLCAxMF0pCiAgICAgICAgfQogICAgfQp9OwpTVFguRHJhd2luZy5jb21wYXJpc29uX3N0b3AucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKCkge307ClNUWC5EcmF3aW5nLmNvbXBhcmlzb25fc3RvcC5wcm90b3R5cGUuaW50ZXJzZWN0ZWQgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgcmV0dXJuIHRoaXMudGljayA+PSBjLngwICYmIHRoaXMudGljayA8PSBjLngxID8gITAgOiAhMQp9OwpTVFguRHJhd2luZy5jb21wYXJpc29uX3N0b3AucHJvdG90eXBlLmhpZ2hsaWdodCA9IGZ1bmN0aW9uIChhKSB7CiAgICByZXR1cm4gdGhpcy5oaWdobGlnaHRlZCAhPSBhID8gKHRoaXMuaGlnaGxpZ2h0ZWQgPSBhLCAhMCkgOiAhMQp9OwpTVFguRHJhd2luZy5jb21wYXJpc29uX3N0b3AucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsKICAgIGlmIChhID0gdGhpcy5zdHgucGFuZWxzW3RoaXMucGFuZWxOYW1lXSkgewogICAgICAgIGlmIChTVFguQ29tcGFyaXNvbi5tb3VzZUhhc01vdmVkKSB0aGlzLnRpY2sgPSBiLCB0aGlzLmQwID0gdGhpcy5zdHguZGF0ZUZyb21UaWNrKHRoaXMudGljaywgYS5jaGFydCk7CiAgICAgICAgZWxzZSByZXR1cm4gITE7CiAgICAgICAgdmFyIGQgPSB0aGlzLnN0eDsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgU1RYLkRyYXdpbmcuY29tcGFyaXNvbl9zdG9wLnN0b3AoZCkKICAgICAgICB9LCAwKTsKICAgICAgICByZXR1cm4gITAKICAgIH0KfTsKU1RYLkRyYXdpbmcuY29tcGFyaXNvbl9zdG9wLnN0YXJ0ID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIFNUWC5Db21wYXJpc29uLnZlY3RvclR5cGUgPSBTVFhDaGFydC52ZWN0b3JUeXBlOwogICAgU1RYLkNvbXBhcmlzb24ubW91c2VIYXNNb3ZlZCA9ICExOwogICAgYS5jaGFuZ2VWZWN0b3JUeXBlKCJjb21wYXJpc29uX3N0b3AiKTsKICAgIGEuZHJhd2luZ0NsaWNrKGIucGFuZWwsIDAsIDApCn07ClNUWC5EcmF3aW5nLmNvbXBhcmlzb25fc3RvcC5jbGVhciA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBhLmFjdGl2ZURyYXdpbmcgJiYgImNvbXBhcmlzb25fc3RvcCIgPT0gYS5hY3RpdmVEcmF3aW5nLm5hbWUgJiYgU1RYLkRyYXdpbmcuY29tcGFyaXNvbl9zdG9wLnN0b3AoYSk7CiAgICBmb3IgKHZhciBjID0gYi5wYW5lbCwgZCA9IDA7IGQgPCBhLmRyYXdpbmdPYmplY3RzLmxlbmd0aDspIHsKICAgICAgICB2YXIgZSA9IGEuZHJhd2luZ09iamVjdHNbZF07CiAgICAgICAgImNvbXBhcmlzb25fc3RvcCIgPT0gZS5uYW1lICYmIGUucGFuZWwgPT0gYyA/IChlLmFib3J0KCEwKSwgYS51bmRvU3RhbXAoKSwgYS5kcmF3aW5nT2JqZWN0cy5zcGxpY2UoZCwgMSkpIDogZCsrCiAgICB9CiAgICBhLmNoYW5nZU9jY3VycmVkKCJ2ZWN0b3IiKTsKICAgIGEuZHJhdygpCn07ClNUWC5EcmF3aW5nLmNvbXBhcmlzb25fc3RvcC5zdG9wID0gZnVuY3Rpb24gKGEpIHsKICAgIFNUWENoYXJ0LnZlY3RvclR5cGUgPSBTVFguQ29tcGFyaXNvbi52ZWN0b3JUeXBlOwogICAgYS51bmRvKCkKfTsKU1RYLkRyYXdpbmcuY29tcGFyaXNvbl9zdG9wLnByb3RvdHlwZS5zZXJpYWxpemUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICAgIG5hbWU6IHRoaXMubmFtZSwKICAgICAgICBwbmw6IHRoaXMucGFuZWxOYW1lLAogICAgICAgIGQwOiB0aGlzLmQwCiAgICB9Cn07ClNUWC5EcmF3aW5nLmNvbXBhcmlzb25fc3RvcC5wcm90b3R5cGUucmVjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoYSwgYikgewogICAgdGhpcy5zdHggPSBhOwogICAgdGhpcy5wYW5lbE5hbWUgPSBiLnBubDsKICAgIHRoaXMuZDAgPSBiLmQwOwogICAgdGhpcy5hZGp1c3QoKQp9OwpTVFguTWFya2VycyA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMucmVkcmF3VGltZW91dCA9IHRoaXMubWFya2VySG9sZGVyID0gbnVsbDsKICAgIHRoaXMuQ29uc3RydWN0KCkKfTsKU1RYLk1hcmtlcnMuY3VycmVudFppbmRleCA9IDE7ClNUWC5NYXJrZXJzLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubWFya2VycyA9IFtdOwogICAgdGhpcy5wYW5lbC5tYXJrZXJIb2xkZXIgfHwgKHRoaXMucGFuZWwubWFya2VySG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiRElWIiksIHRoaXMucGFuZWwubWFya2VySG9sZGVyLnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIiwgdGhpcy5wYW5lbC5tYXJrZXJIb2xkZXIuc3R5bGUubGVmdCA9ICIwcHgiLCB0aGlzLnBhbmVsLm1hcmtlckhvbGRlci5zdHlsZS5vdmVyZmxvdyA9ICJoaWRkZW4iLCB0aGlzLnBhbmVsLm1hcmtlckhvbGRlci5zdHlsZS56SW5kZXggPSAxLCB0aGlzLnN0eC5jaGFydC5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5wYW5lbC5tYXJrZXJIb2xkZXIpLCB0aGlzLnN0eC5hZGp1c3RQYW5lbFBvc2l0aW9ucygpKQp9OwpTVFguTWFya2Vycy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnBhbmVsLm1hcmtlckhvbGRlciAmJiAodGhpcy5zdHguY2hhcnQuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMucGFuZWwubWFya2VySG9sZGVyKSwgdGhpcy5wYW5lbC5tYXJrZXJIb2xkZXIgPSBudWxsKTsKICAgIHRoaXMucmVzZXQoKQp9OwpTVFguTWFya2Vycy5wcm90b3R5cGUucGxhY2VNYXJrZXIgPSBmdW5jdGlvbiAoYSwgYikgewogICAgZnVuY3Rpb24gYyhhKSB7CiAgICAgICAgZy5zdGVtICYmIChnLnN0ZW0uc3R5bGUuekluZGV4ID0gU1RYLk1hcmtlcnMuY3VycmVudFppbmRleCk7CiAgICAgICAgZy5ub2RlLnN0eWxlLnpJbmRleCA9IFNUWC5NYXJrZXJzLmN1cnJlbnRaaW5kZXgrKwogICAgfQoKICAgIGZ1bmN0aW9uIGQoYSkgewogICAgICAgIGMoYSk7CiAgICAgICAgZi5vcGVuRGlhbG9nID0gIm1hcmtlciI7CiAgICAgICAgZi51bmRpc3BsYXlDcm9zc2hhaXJzKCkKICAgIH0KCiAgICBmdW5jdGlvbiBlKGEpIHsKICAgICAgICBmLm9wZW5EaWFsb2cgPSAiIjsKICAgICAgICBmLmRvRGlzcGxheUNyb3NzaGFpcnMoKQogICAgfQogICAgdmFyIGYgPSB0aGlzLnN0eCwKICAgICAgICBnID0gewogICAgICAgICAgICBub2RlOiBhLAogICAgICAgICAgICBkYXRlOiBiCiAgICAgICAgfTsKICAgIGEuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIGlmICh0aGlzLmRyYXdTdGVtcykgewogICAgICAgIHZhciBrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiRElWIik7CiAgICAgICAgay5jbGFzc05hbWUgPSB0aGlzLnN0ZW1DbGFzczsKICAgICAgICBrLnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKICAgICAgICBrLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgZy5zdGVtID0gawogICAgfQogICAgdGhpcy5mb2N1cyA/IFNUWC5hbmRyb2lkIHx8CiAgICAgICAgU1RYLmlwYWQgfHwgU1RYLmlwaG9uZSA/IGcubm9kZS5hZGRFdmVudExpc3RlbmVyKCJ0b3VjaHN0YXJ0IiwgYykgOiAoZy5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlb3ZlciIsIGQpLCBnLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdXQiLCBlKSkgOiB0aGlzLmhvdmVyICYmIChTVFguaXBhZCB8fCBTVFguaXBob25lID8gZy5ub2RlLmFkZEV2ZW50TGlzdGVuZXIoInRvdWNoc3RhcnQiLCBjKSA6IGcubm9kZS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW92ZXIiLCBjKSk7CiAgICB0aGlzLm1hcmtlcnMucHVzaChnKTsKICAgIGEuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOwogICAgdGhpcy5wYW5lbC5tYXJrZXJIb2xkZXIuYXBwZW5kQ2hpbGQoYSk7CiAgICBnLnN0ZW0gJiYgdGhpcy5wYW5lbC5tYXJrZXJIb2xkZXIuYXBwZW5kQ2hpbGQoZy5zdGVtKTsKICAgIHRoaXMuc2V0TWFya2VyVGljayh0aGlzLnBhbmVsLmNoYXJ0LCBnKTsKICAgIHJldHVybiBnCn07ClNUWC5NYXJrZXJzLnByb3RvdHlwZS5zZXRNYXJrZXJUaWNrID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgIGZvciAodmFyIGMgPSAwOyBjIDwgYS5kYXRhU2V0Lmxlbmd0aDsgYysrKSB7CiAgICAgICAgdmFyIGQgPSBhLmRhdGFTZXRbY10uRFQuZ2V0VGltZSgpLAogICAgICAgICAgICBlID0gZDsKICAgICAgICAwIDwgYyAmJiAoZSA9IGEuZGF0YVNldFtjIC0gMV0uRFQuZ2V0VGltZSgpKTsKICAgICAgICB2YXIgZiA9IGIuZGF0ZS5nZXRUaW1lKCk7CiAgICAgICAgaWYgKGQgPT0gZiB8fCBkID4gZiAmJiBlIDwgZikgewogICAgICAgICAgICBiLnRpY2sgPSBjOwogICAgICAgICAgICBicmVhawogICAgICAgIH0KICAgIH0KfTsKU1RYLk1hcmtlcnMucHJvdG90eXBlLmNyZWF0ZURhdGFTZXQgPSBmdW5jdGlvbiAoYSkgewogICAgZm9yIChhID0gMDsgYSA8IHRoaXMubWFya2Vycy5sZW5ndGg7IGErKykgdGhpcy5zZXRNYXJrZXJUaWNrKHRoaXMucGFuZWwuY2hhcnQsIHRoaXMubWFya2Vyc1thXSkKfTsKU1RYLk1hcmtlcnMucHJvdG90eXBlLmluaXRpYWxpemVDaGFydCA9IGZ1bmN0aW9uIChhKSB7CiAgICB0aGlzLnN0eCA9IGE7CiAgICB0aGlzLnBhbmVsID0gYS5wYW5lbHNbdGhpcy5wYW5lbE5hbWVdOwogICAgdGhpcy5yZXNldCgpOwogICAgdGhpcy5pbml0aWFsaXplKGEpCn07ClNUWC5NYXJrZXJzLnByb3RvdHlwZS5kcmF3VW5kZXIgPSBmdW5jdGlvbiAoYSwgYikge307ClNUWC5NYXJrZXJzLnByb3RvdHlwZS5kcmF3T3ZlciA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICBmdW5jdGlvbiBjKGEsIGIpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBhLnJlZHJhd1RpbWVvdXQgPSBudWxsOwogICAgICAgICAgICB2YXIgYyA9IGIucGFuZWxzW2EucGFuZWxOYW1lXTsKICAgICAgICAgICAgaWYgKGMgJiYgIWMuaGlkZGVuICYmIGEucGxhY2VtZW50RnVuY3Rpb24pIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGcgPSBjLmNoYXJ0LCBrID0gW10sIG0gPSBnLmRhdGFTZXQubGVuZ3RoIC0gYi5jaGFydC5zY3JvbGwsIGcgPSBtICsgZy5kYXRhU2VnbWVudC5sZW5ndGgsIGwgPSAwOyBsIDwgYS5tYXJrZXJzLmxlbmd0aDsgbCsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBhLm1hcmtlcnNbbF07CiAgICAgICAgICAgICAgICAgICAgaWYgKG4udGljaykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG4ubm9kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBuLnN0ZW07CiAgICAgICAgICAgICAgICAgICAgICAgIG4udGljayA+PSBtICYmIG4udGljayA8PSBnID8gKCJibG9jayIgIT0gci5zdHlsZS5kaXNwbGF5ICYmIChyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siLCBwICYmIChwLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siKSksIGsucHVzaChuKSkgOiAibm9uZSIgIT0gci5zdHlsZS5kaXNwbGF5ICYmIChyLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIsIHAgJiYgKHAuc3R5bGUuZGlzcGxheSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibm9uZSIpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGEucGxhY2VtZW50RnVuY3Rpb24oYSwgYiwgYywgaykKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHRoaXMucmVkcmF3VGltZW91dCB8fCAodGhpcy5yZWRyYXdUaW1lb3V0ID0gc2V0VGltZW91dChjKHRoaXMsIGEpLCB0aGlzLnRyYW5zaXRpb25NUykpCn07CihmdW5jdGlvbiAoKSB7CiAgICAiMDItMjAxNC0wNyIgIT0gU1RYQ2hhcnQudmVyc2lvbiAmJiBjb25zb2xlLmxvZygiTWlzbWF0Y2hlZCBrZXJuZWwgdmVyc2lvbiBzdHhDaGFydDoiICsgU1RYQ2hhcnQudmVyc2lvbiArICIgc3R4S2VybmVsOjAyLTIwMTQtMDciKTsKICAgIHZhciBhID0gITAsCiAgICAgICAgYSA9IC0xICE9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigiMjRrLmhrIikgfHwgIC0xICE9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigid2VidWkiKSB8fCAgLTEgIT0gZG9jdW1lbnQubG9jYXRpb24uaHJlZi5pbmRleE9mKCJsb2NhbGhvc3QiKSA7CiAgICBhIHx8IC0xICE9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigiZmlsZTovLyIpIHx8IChjb25zb2xlLmxvZygiVW5hdXRob3JpemVkIGRvbWFpbiIpLCBTVFhDaGFydCA9IGZ1bmN0aW9uICgpIHt9KQp9KSgpOw==';eval(base64decode(a));